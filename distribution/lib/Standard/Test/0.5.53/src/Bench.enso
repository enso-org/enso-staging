from Standard.Base import all

## Measure the amount of time it takes to execute a given computation.

   Arguments:
   - act: The action to perform.
   - label: A name for the measurement.
   - iter_size: The number of runs per iteration.
   - num_iters: The number of iterations per measurement.

   > Example
     Measure a computation called "foo" with an iteration size of 2 and a number
     of iterations of 1.

         import Standard.Examples
         import Standard.Test.Bench

         example_measure =
             Bench.measure Examples.get_boolean "foo" iter_size=2 num_iters=1
measure : Any -> Text -> Integer -> Integer -> Nothing
measure = ~act -> label -> iter_size -> num_iters ->
    single_call = _ ->
        x1 = System.nano_time
        Runtime.no_inline act
        x2 = System.nano_time
        x2 - x1
    iteration = it_num ->
        act_it_num = num_iters - it_num
        res = iter_size.times single_call
        avg = here.avg_list res
        fmt = (avg / 1000000).format "%.2f"
        IO.println (label + "/iteration:" + act_it_num.to_text + ": " + fmt + "ms")
    num_iters.times iteration

## PRIVATE

   Reverses the provided list.

   Arguments:
   - list: The list to reverse.
reverse_list : List Any -> List
reverse_list list =
    go = list -> acc -> case list of
        Cons h t -> @Tail_Call go t (Cons h acc)
        Nil -> acc
    res = go list Nil
    res

## PRIVATE

   Sums the elements of the list.

   Arguments:
   - list: The list of numbers to sum.
sum_list : List Number -> Sum
sum_list list =
    go = list -> acc -> case list of
        Cons a b -> @Tail_Call go b (acc + a)
        Nil -> acc

    res = go list 0
    res

## PRIVATE

   Calculate the average of the elements of a numeric list.

   Arguments:
   - list: The list of numbers to calculate the average of.
avg_list : List Number -> Number
avg_list list = here.sum_list list / here.len_list list

## PRIVATE

   Calculates the length of the provided list.

   Arguments:
   - list: The list to calculate the length of.
len_list : List Any -> Integer
len_list list =
    go = list -> acc -> case list of
        Cons _ b -> @Tail_Call go b (acc + 1)
        Nil -> acc
    res = go list 0
    res

## PRIVATE

   Perform an action a number of times.

   Arguments:
   - act: The action to perform `this` number of times.
Number.times : List Any
Number.times act =
    go = results -> number -> if number == 0 then results else
        @Tail_Call go (Cons (act number) results) number-1
    res = here.reverse_list (go Nil this)
    res

