from Standard.Base import all

import Standard.Database.Data.Internal.Helpers
import Standard.Database.Data.Internal.IR
import Standard.Database.Data.Table
import Standard.Table.Data.Column as Materialized_Column

from Standard.Database.Data.Sql import Sql_Type
from Standard.Database.Data.Table import Integrity_Error

type Column

    ## UNSTABLE
       PRIVATE

       Represents a single column backed by a database.

       Arguments:
       - name: The name of the column.
       - connection: The connection with which the column is associated.
       - expression: The expressions to apply to the column.
       - context: The SQl context in which the column exists.

       These columns may come from the Table or can be created by combining
       other columns with operators. Expressions created in this way may be
       materialized or used to apply filters, groupings etc. to tables from
       which they come. Combined expressions must come from the same context -
       they must both have the same filtering, grouping etc. rules applied to be
       able to be combined.
    # type Column (name : Text) (connection : Connection)
    #             (sql_type : Sql_Type) (expression : IR.Expression)
    #             (context : IR.Context)
    type Column name connection sql_type expression context

    ## UNSTABLE

       Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        this.to_table.display show_rows format_terminal

    ## UNSTABLE

       Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print : Nothing
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## UNSTABLE

       Converts this column to JSON.
    to_json : Json
    to_json = this.to_sql.to_json

    ## UNSTABLE

       Converts this column into a single-column table.
    to_table : Table.Table
    to_table =
        Table.Table this.name this.connection [this.as_internal] this.context

    ## UNSTABLE

       Returns a materialized dataframe containing rows of this table.

       Arguments:
       - max_rows: specifies a maximum amount of rows to fetch; if not set, all
         available rows are fetched.
    to_dataframe : (Nothing | Integer) -> Materialized_Column.Column
    to_dataframe max_rows=Nothing =
        df = this.to_table.to_dataframe max_rows
        df.at this.name

    ## UNSTABLE

       Returns a vector containing all the elements in this column.
    to_vector : Vector Any
    to_vector =
        ## We remove the index to avoid fetching index data that will not be
           used anyway when constructing the raw Vector.
        without_ix = this.to_table.set_index []
        df = without_ix . to_dataframe
        raw_column = df.at this.name
        raw_column.to_vector

    ## UNSTABLE

       Returns an Sql statement that will be used for materializing this column.
    to_sql : Sql.Statement
    to_sql = this.to_table.to_sql

    ## PRIVATE

       Creates a binary operation with given kind and operand.

       Arguments:
       - op_kind: The kind of binary operator.
       - operand: The right operand to the binary operator.
       - new_type: The type of the SQL column that results from applying the
         operator.
       - operand_type: The SQL type of the operand.

       If not specified, the `new_type` is the same as the current one.
       `operand_type` is only relevant if the operand is not a column, it
       defaults to the current type if not provided.
    make_binary_op : Text -> Text -> (Column | Any) -> (Sql_Type | Nothing) -> (Sql_Type | Nothing) -> Column
    make_binary_op op_kind operand new_type=Nothing operand_type=Nothing =
        actual_new_type = if new_type.is_nothing then this.sql_type else new_type
        case operand of
            Column _ _ _ other_expr _ ->
                case Helpers.check_integrity this operand of
                    False ->
                        Error.throw <| Illegal_State_Error "Cannot compare columns coming from different contexts. Only columns of a single table can be compared."
                    True ->
                        new_expr = IR.Operation op_kind [this.expression, other_expr]
                        Column this.name this.connection actual_new_type new_expr this.context
            _ ->
                actual_operand_type = if operand_type.is_nothing then this.sql_type else operand_type
                other = IR.make_constant actual_operand_type operand
                new_expr = IR.Operation op_kind [this.expression, other]
                Column this.name this.connection actual_new_type new_expr this.context

    ## PRIVATE

       Helper for implementing unary operators.

       Arguments:
       - op_kind: The kind of the unary operator.
       - new_type: The type of the SQL column that results from applying the
         operator.
    make_unary_op : Text -> Text -> (Sql_Type | Nothing) -> Column
    make_unary_op op_kind new_type=Nothing =
        actual_new_type = if new_type.is_nothing then this.sql_type else new_type
        new_expr = IR.Operation op_kind [this.expression]
        Column this.name this.connection actual_new_type new_expr this.context

    ## UNSTABLE

       Efficiently joins two tables based on either the index or a key column.

       Arguments:
       - other: the table being the right operand of this join operation.
       - on: the column(s) or expression(s) of `this` that should be used as
         the join key. If this argument is not provided, the index of `this`
         will be used.
       - drop_unmatched: whether the rows of `this` without corresponding
         matches in `other` should be dropped from the result.
       - left_suffix: a suffix that should be added to the columns of `this`
         when there's a name conflict with a column of `other`.
       - right_suffix: a suffix that should be added to the columns of `other`
         when there's a name conflict with a column of `this`.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index in `other` is not unique,
       the corresponding rows of `this` will be duplicated in the result.
    join : Table | Column -> Nothing | Text | Column | Vector (Text | Column) -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        this.to_table.join other on drop_unmatched left_suffix right_suffix

    ## UNSTABLE

       Sums the values in this column.
    sum : Any
    sum = this.compute_aggregate "SUM"

    ## UNSTABLE

       Computes the maximum element of this column.
    max : Any
    max = this.compute_aggregate "MAX"

    ## UNSTABLE

       Computes the minimum element of this column.
    min : Any
    min = this.compute_aggregate "MIN"

    ## UNSTABLE

       Computes the mean of non-missing elements of this column.
    mean : Any
    mean = this.compute_aggregate "AVG"

    ## PRIVATE

       Computes an aggregate operator.

       Arguments:
       - op_name: The name of the operator to compute.
    compute_aggregate : Text
    compute_aggregate op_name =
        agg = here.make_aggregate this op_name
        agg.to_vector . at 0

    ## UNSTABLE

       Returns the length of this column.
    length : Integer
    length = this.to_table.row_count

    ## UNSTABLE

       Returns the number of missing items in this column.
    count_missing : Integer
    count_missing = this.where this.is_missing . length

    ## UNSTABLE

       Returns the number of non-null items in this column.
    count : Integer
    count = this.where this.is_missing.not . length

    ## UNSTABLE

       Element-wise equality comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `this` and `other`.
    == : Column | Any -> Column
    == other = this.make_binary_op "=" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Element-wise non-equality comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `this` and `other`.
    != : Column | Any -> Column
    != other = this.make_binary_op "!=" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `this` and `other`.
    >= : Column | Any -> Column
    >= other = this.make_binary_op ">=" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `this` and `other`.
    <= : Column | Any -> Column
    <= other = this.make_binary_op "<=" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `this` and `other`.
    > : Column | Any -> Column
    > other = this.make_binary_op ">" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Element-wise order comparison.

       Arguments:
       - other: The other column to compare pairwise with.

       Returns a column with results of comparing this column's elements against
       `other`.  If `other` is a column, the comparison is performed pairwise
       between corresponding elements of `this` and `other`.
    < : Column | Any -> Column
    < other = this.make_binary_op "<" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Element-wise addition.

       Arguments:
       - other: The other column to add to this column.

       Returns a column containing the result of adding `other` to each element
       of `this`.  If `other` is a column, the operation is performed pairwise
       between corresponding elements of `this` and `other`.
    + : Column | Any -> Column
    + other = this.make_binary_op "+" other

    ## UNSTABLE

       Element-wise subtraction.

       Arguments:
       - other: The other column to subtract from this column.

       Returns a column containing the result of subtracting `other` from each
       element of `this`.  If `other` is a column, the operation is performed
       pairwise between corresponding elements of `this` and `other`.
    - : Column | Any -> Column
    - other = this.make_binary_op "-" other

    ## UNSTABLE

       Element-wise multiplication.

       Arguments:
       - other: The other column to multiply `this` by.

       Returns a column containing the result of multiplying `other` by each
       element of `this`.  If `other` is a column, the operation is performed
       pairwise between corresponding elements of `this` and `other`.
    * : Column | Any -> Column
    * other = this.make_binary_op "*" other

    ## UNSTABLE

       Element-wise division.

       Arguments:
       - other: The other column to divide `this` column by.

       Returns a column containing the result of dividing each element of `this`
       by `other`.  If `other` is a column, the operation is performed pairwise
       between corresponding elements of `this` and `other`.
    / : Column | Any -> Column
    / other = this.make_binary_op "/" other

    ## UNSTABLE

       Element-wise boolean conjunction.

       Arguments:
       - other: The other column to compute the conjunction with.

       Returns a column containing the result of performing the boolean `and` on
       `other` and each element of `this`.  If `other` is a column, the
       operation is performed pairwise between corresponding elements of `this` ]
       and `other`.
    && : Column | Any -> Column
    && other = this.make_binary_op "AND" other

    ## UNSTABLE

       Element-wise boolean disjunction.

       Arguments:
       - other: The other column to compute the disjunction with.

       Returns a column containing the result of performing the boolean `or` on
       `other` and each element of `this`.  If `other` is a column, the
       operation is performed pairwise between corresponding elements of `this`
       and `other`.
    || : Column | Any -> Column
    || other = this.make_binary_op "OR" other

    ## UNSTABLE

       Boolean negation of each element in this column.
    not : Column
    not = this.make_unary_op "NOT"

    ## UNSTABLE

       Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.
    is_missing : Column
    is_missing = this.make_unary_op "ISNULL" new_type=Sql_Type.boolean

    ## UNSTABLE

       Returns a new column where missing values have been replaced with the
       provided default.
    fill_missing : Any -> Column
    fill_missing default = this.make_binary_op "FILLNULL" default

    ## UNSTABLE

       Selects only the rows of this column that correspond to `True` values in
       `filter`.

       Arguments:
       - filter: A column of booleans to mask `this` by.

       This is useful for filtering the rows by given predicate.

       > Example
         Select only the rows of `my_column` where the `status_column` column
         has the value `"Valid"`
             my_column.where (status_column == "Valid")
    where : Column -> Column
    where filter =
        case Helpers.check_integrity this filter of
            False ->
                Error.throw (Integrity_Error "Column "+filter.name)
            True ->
                new_filters = this.context.where_filters + [filter.expression]
                new_ctx = this.context.set_where_filters new_filters
                Column this.name this.connection this.sql_type this.expression new_ctx

    ## UNSTABLE

       Returns a new column without rows that had missing values.
    drop_missing : Any -> Column
    drop_missing = this.where this.is_missing.not

    ## UNSTABLE

       Returns the same column with changed name.

       Arguments:
       - new_name: The name to rename `this` column to.
    rename : Text -> Column
    rename new_name = case Helpers.ensure_name_is_sane new_name of
        True ->
            is_used_in_index = this.context.meta_index.exists i-> i.name == new_name
            case is_used_in_index of
                True -> Error.throw <| Illegal_State_Error "Cannot rename the column to "+new_name+", because it has an index with the same name."
                False ->
                    Column new_name this.connection this.sql_type this.expression this.context

    ## UNSTABLE

       Sorts the column according to the specified rules.

       Arguments:
         - order: Specifies the default sort order for this operation.
         - missing_last: Specifies the default placement of missing values when
           compared to non-missing ones. Note thet this argument is independent
           from `order`, i.e. missing values will always be sorted according to
           this rule, ignoring the ascending / descending setting.

       > Example
         Sorting `column` in ascending order.
             column.sort

       > Example
         Sorting `column` in descending order, placing missing values at the
         top of the resulting column.
             column.sort order=Sort_Order.Descending missing_last=False
    sort : Sort_Order -> Boolean -> (Any -> Any -> Ordering) | Nothing -> Column
    sort order=Sort_Order.Ascending missing_last=True =
        this.to_table.sort by=this order=order missing_last=missing_last . at this.name

    ## UNSTABLE

       Checks for each element of the column if it starts with `other`.

       Arguments:
       - other: A column or text to check for each item in `this`.

       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.  If the argument is a
       missing value (a Nothing or a column with missing values), the behaviour
       on these missing values is vendor specific.
    starts_with : Column | Text -> Column
    starts_with other = this.make_binary_op "starts_with" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Checks for each element of the column if it ends with `other`.

       Arguments:
       - other: A column ot text to check for each item in `this`.

       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.  If the argument is a
       missing value (a Nothing or a column with missing values), the behaviour
       on these missing values is vendor specific.
    ends_with : Column | Text -> Column
    ends_with other = this.make_binary_op "ends_with" other new_type=Sql_Type.boolean

    ## UNSTABLE

       Checks for each element of the column if it contains `other`.

       Arguments:
       - other: A column ot text to check for each item in `this`.

       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.  If the argument is a
       missing value (a Nothing or a column with missing values), the behaviour
       on these missing values is vendor specific.
    contains : Column | Text -> Column
    contains other = this.make_binary_op "contains" other new_type=Sql_Type.boolean

    ## PRIVATE
    as_internal : IR.Internal_Column
    as_internal = IR.Internal_Column this.name this.sql_type this.expression

type Aggregate_Column

    ## UNSTABLE

       Wraps a column grouped by its index.

       Arguments:
       - name: The name of the column.
       - connection: The connection with which the column is associated.
       - sql_type: The SQL type of the aggregate column.
       - expression: The expressions to apply to the column.
       - context: The SQl context in which the column exists.

       Allows performing aggregation operations on the contained values.
    # type Aggregate_Column (name : Text) (connection : Connection)
    #                       (sql_type : Sql_Type) (expression : IR.Expression)
    #                       (context : IR.Context)
    type Aggregate_Column name connection sql_type expression context

    ## UNSTABLE

       Sums the values in each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.
    sum : Text -> Column
    sum name_suffix='_sum' =
        here.make_aggregate this "SUM" name_suffix

    ## UNSTABLE

       Computes the maximum element of each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.
    max : Text -> Column
    max name_suffix='_max' =
        here.make_aggregate this "MAX" name_suffix

    ## UNSTABLE

       Computes the minimum element of each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.
    min : Text -> Column
    min name_suffix='_min' =
        here.make_aggregate this "MIN" name_suffix

    ## UNSTABLE

       Computes the number of non-missing elements in each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.
    count : Text -> Column
    count name_suffix='_count' =
        here.make_aggregate this "COUNT" name_suffix new_type=Sql_Type.integer

    ## UNSTABLE

       Computes the mean of non-missing elements in each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.
    mean : Text -> Column
    mean name_suffix='_mean' =
        here.make_aggregate this "AVG" name_suffix

    ## PRIVATE

       A helper that returns the underlying column from before grouping.
    ungrouped : Column
    ungrouped =
        new_ctx = this.context.set_groups []
        Column this.name this.connection this.sql_type this.expression new_ctx

## PRIVATE

   A helper method for creating an aggregated column by applying some
   operation.

   Arguments:
   - column: The column to aggregate.
   - operation: The name of the aggregation operation.
   - name_suffix: The suffix to apply to the name of the aggregate column.
   - new_type: The SQL type of the result column.
make_aggregate : Column -> Text -> Text -> Sql_Type -> Column
make_aggregate column operation name_suffix="_agg" new_type=Nothing =
    actual_new_type = if new_type.is_nothing then column.sql_type else new_type
    expr = IR.Operation operation [column.expression]
    case Helpers.ensure_name_is_sane name_suffix of
        True ->
            new_name = column.name + name_suffix
            here.lift_aggregate new_name column.connection actual_new_type expr column.context

## PRIVATE

   A helper function that lifts an aggregate query into a subquery to ensure
   correctness of further processing.

   Argument:
   - new_name: The new name for the aggregate column.
   - connection: The connection with which the aggregate is associated.
   - expected_type: The expected SQL type of the column.
   - expr: The expression for the query.
   - context: The context in which the query exists.
lift_aggregate : Text -> Connection -> Sql_Type -> IR.Expression -> IR.Context -> Column
lift_aggregate new_name connection expected_type expr context =
    # TODO [RW] This is a simple workaround for #1643 - we always wrap the
    # aggregate into a subquery, thus making it safe to use it everywhere. A
    # more complex solution may be adopted at some point.
    ixes = Table.freshen_columns [new_name] context.meta_index
    col = IR.Internal_Column new_name expected_type expr
    setup = context.as_subquery new_name+"_sub" [[col], ixes]
    subquery = setup.first
    cols = setup.second
    new_col = cols.first.first
    new_ixes = cols.second
    new_ctx = IR.subquery_as_ctx subquery . set_index new_ixes
    Column new_name connection new_col.sql_type new_col.expression new_ctx

