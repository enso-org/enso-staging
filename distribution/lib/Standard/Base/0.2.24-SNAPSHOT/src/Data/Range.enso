from Standard.Base import all

## Represents a right-exclusive range of integer values.
type Range

    ## UNSTABLE
       A representation of a right-exclusive range of integer values.

       Arguments:
       - start: The left boundary of the range. Its value is included.
       - end: The right boundary of the range. Its value is excluded.
    type Range start end

    ## Get the number of elements in the range.

       > Example
         The following range has 100 elements.

            0.up_to 100 . length
    length : Number
    length = this.end - this.start

    ## Checks if this range is empty.

       > Example
         Checking if the range from 0 to 100 is empty.

             0.up_to 100 . is_empty
    is_empty : Boolean
    is_empty = this.end <= this.start

    ## Checks if this range is not empty.

       > Example
         Checking if the range from 0 to 100 is not empty.

             0.up_to 100 . not_empty
    not_empty : Boolean
    not_empty = this.is_empty.not

    ## Applies a function to each element in the range, producing a vector of
       results.

       Arguments:
       - function: The function to apply to each integer in the range.

       > Example
         Create a vector that contains the numbers twice that of the numbers in
         the range.

             1.up_to 10 . map (*2)
    map : (Number -> Any) -> Vector Any
    map function = this.to_vector.map function

    ## Applies a function for each element in the range.

       Arguments:
       - function: The function to apply to each integer in the range.

       > Example
         To print all the numbers from 1 to 10 use:
             1.up_to 11 . each IO.println
    each : (Number -> Any) -> Nothing
    each function =
        it start end = if start == end then Nothing else
            function start
            @Tail_Call it start+1 end
        it this.start this.end
        Nothing

    ## Combines all the elements of the range, by iteratively applying the
       passed function with next elements of the range.

       Arguments:
       - init: The initial integral value for the fold.
       - function: A binary function taking an item and a number, and returning
         an item.

       In general, the result of
           Range start end . fold init f
       is the same as
           f (...(f (f init start) start+1)...) end-1

       > Example
         In the following example, we'll compute the sum of all integers less
         than 100.

             0.up_to 100 . fold 0 (+)
    fold : Any -> (Any -> Number -> Any) -> Any
    fold init function =
        it acc start end = if start == end then acc else
            new_acc = function acc start
            @Tail_Call it new_acc start+1 end
        res = it init this.start this.end
        res

    ## Checks whether `predicate` is satisfied for all numbers in this range.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking that all numbers in the range are greater than 5.

             10.up_to 100 . all (> 5)
    all : (Number -> Boolean) -> Boolean
    all predicate =
        it start end = if start==end then True else
            r = predicate start
            if r then (@Tail_Call it start+1 end) else False
        res = it this.start this.end
        res

    ## Checks whether `predicate` is satisfied for any number in this range.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking that at least one number in the range is greater than 10.

             1.up_to 100 . exists (> 10)
    exists : (Number -> Boolean) -> Boolean
    exists predicate =
        limit = this.end
        go n found = if found || (n >= limit) then found else
            @Tail_Call go n+1 (predicate n)
        go this.start False

    ## Checks whether `predicate` is satisfied for any number in this range.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Checking that at least one number in the range is greater than 10.

             1.up_to 100 . any (> 10)
    any : (Number -> Boolean) -> Boolean
    any predicate = this.exists predicate

    ## Converts the range to a vector containing the numbers in the range.

       > Example
         Getting a vector of the numbers 1 to 5.

             1.up_to 6 . to_vector
    to_vector : Vector.Vector
    to_vector =
        length = Math.max 0 (this.end - this.start)
        Vector.new length (i -> i + this.start)

