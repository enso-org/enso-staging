from Standard.Base import all

import Standard.Base.Data.Time
import Standard.Base.Data.Time.Duration
import Standard.Base.Data.Time.Time_Of_Day
import Standard.Base.Data.Time.Zone

polyglot java import java.time.format.DateTimeFormatter
polyglot java import java.time.Instant
polyglot java import java.time.LocalDate
polyglot java import org.enso.base.Time_Utils

## Obtains the current date from the system clock in the system timezone.

   > Example
     Get the current date.

         import Standard.Base.Data.Time.Date

         example_now = Date.now
now : Date
now = Date LocalDate.now

## Alias for `now`.

   > Example
     Get the current date.

         import Standard.Base.Data.Time.Date

         example_today = Date.today
today : Date
today = here.now

## Constructs a new Date from a year, month, and day.

   Arguments
   - month: The month-of-year to represent, from 1 (January) to 12 (December).
   - day: The day-of-month to represent, from 1 to 31. It must be valid for the
     year and month.

   Returns a `Time_Error` if the provided time is not valid.

   > Example
     Create a new local date at Unix epoch.

         import Standard.Base.Data.Time.Date

         example_new = Date.new 1970

   > Example
     Get the local date of 5th August 1986.

         import Standard.Base.Data.Time.Date

         example_new = Date.new 1986 8 5

new : Integer -> Integer -> Integer -> Date ! Time.Time_Error
new year (month = 1) (day = 1) =
    Panic.recover (Date (LocalDate.of year month day)) . catch e-> case e of
        Polyglot_Error err -> Error.throw (Time.Time_Error err.getMessage)
        x -> x

## Converts text containing a date into a Date object.

   Arguments:
   - text: The text to try and parse as a date.
   - pattern: An optional pattern describing how to parse the text.

   Returns a `Time_Error` if the provided `text` cannot be parsed using the
   provided `pattern`.

   ? Pattern Syntax
     Patterns are based on a simple sequence of letters and symbols. For
     example, "d MMM yyyy" will format "2011-12-03" as "3 Dec 2011".

   ? Default Date Formatting
     Unless you provide a custom format, the text must represent a valid date
     that can be parsed using the ISO-8601 extended local date format. The
     format consists of:

     - Four digits or more for the year. Years in the range 0000 to 9999
       will be pre-padded by zero to ensure four digits. Years outside
       that range will have a prefixed positive or negative symbol.
     - A dash
     - Two digits for the month-of-year. This is pre-padded by zero to ensure
       two digits.
     - A dash
     - Two digits for the day-of-month. This is pre-padded by zero to ensure two
       digits.

   > Example
     Parse the date of 23rd December 2020.

         import Standard.Base.Data.Time.Date

         example_parse = Date.parse "2020-12-23"

   > Example
     Recover from an error due to a wrong format.

         import Standard.Base.Data.Time.Date
         import Standard.Base.Data.Time

         example_parse_err = Date.parse "my birthday" . catch e-> case e of
             Time.Time_Error _ -> Date.new 2000 1 1

   > Example
     Parse "1999-1-1" as Date using a custom format.

         import Standard.Base.Data.Time.Date

         example_parse = Date.parse "1999-1-1" "yyyy-M-d"

   > Example
     Recover from the parse error.

         import Standard.Base.Data.Time.Date
         import Standard.base.Data.Time

         example_parse_err =
             date = Date.parse "1999-1-1" "yyyy-MM-dd"
             date.catch e-> case e of
                 Time.Time_Error _ -> Date.new 2000 1 1
parse : Text -> (Text | Nothing) -> Date ! Time.Time_Error
parse text pattern=Nothing =
    result = Panic.recover <| case pattern of
        Nothing -> LocalDate.parse text
        Text -> LocalDate.parse text (DateTimeFormatter.ofPattern pattern)
        _ -> Panic.throw (Time.Time_Error "An invalid pattern was provided.")
    Date result . map_error <| case _ of
        Polyglot_Error err -> Time.Time_Error err.getMessage
        x -> x

type Date

    ## This type represents a date, often viewed as year-month-day.

       Arguments:
       - internal_local_date: The internal date representation.

       For example, the value "2nd October 2007" can be stored in a `Date`.

       This class does not store or represent a time or timezone. Instead, it
       is a description of the date, as used for birthdays. It cannot represent
       an instant on the time-line without additional information such as an
       offset or timezone.
    type Date internal_local_date

    ## Get the year field.

       > Example
         Get the current year.

             import Standard.Base.Data.Time.Date

             example_year = Date.now.year
    year : Integer
    year = this . internal_local_date . getYear

    ## Get the month of year field, as a number from 1 to 12.

       > Example
         Get the current month.

             import Standard.Base.Data.Time.Date

             example_month = Date.now.month
    month : Integer
    month = this . internal_local_date . getMonthValue

    ## Get the day of month field.

       > Example
         Get the current day.

             import Standard.Base.Data.Time.Date

             example_day = Date.now.day
    day : Integer
    day = this . internal_local_date . getDayOfMonth

    ## Combine this date with time of day to create a point in time.

       Arguments:
       - time_of_day: The time to combine with the date to create a time.
       - zone: The time-zone in which to create the time.

       > Example
         Convert this date to midnight UTC time.

             import Standard.Base.Data.Time.Date
             import Standard.Base.Data.Time.Time_Of_Day
             import Standard.Base.Data.Time.Zone

             example_to_time = Date.new 2020 2 3 . to_time Time_Of_Day.new Zone.utc
    to_time : Time_Of_Day -> Zone -> Time
    to_time time_of_day (zone = Zone.system) = Time.time (this . internal_local_date . atTime time_of_day.internal_local_time . atZone zone.internal_zone_id)

    ## Add the specified amount of time to this instant to get another date.

       Arguments:
       - amount: The time duration to add to this instant.

       > Example
         Add 6 months to a local date.

             import Standard.Base.Data.Time.Date
             import Standard.Base.Data.Time.Duration

             example_add = Date.new 2020 + 6.months
    + : Duration -> Date
    + amount = if amount.is_time then Error.throw (Time.Time_Error "Date does not support time intervals") else
        Date (this . internal_local_date . plus amount.internal_period)

    ## Subtract the specified amount of time from this instant to get another
       date.

       Arguments:
       - amount: The time duration to subtract from this date.

       > Example
         Subtract 7 days from a local date.

             import Standard.Base.Data.Time.Date
             import Standard.Base.Data.Time.Duration

             example_subtract = Date.new 2020 - 7.days
    - : Duration -> Date
    - amount = if amount.is_time then Error.throw (Time.Time_Error "Date does not support time intervals") else
        Date (this . internal_local_date . minus amount.internal_period)

    ## Format this date using the default formatter.

       > Example
         Convert the current date to text.

             import Standard.Base.Data.Time.Date

             example_to_text = Date.now.to_text
    to_text : Text
    to_text = Time_Utils.default_date_formatter . format this.internal_local_date

    ## A Date to Json conversion.

       > Example
         Convert the current date to JSON.

             import Standard.Base.Data.Time.Date

             example_to_json = Date.now.to_json
    to_json : Json.Object
    to_json = Json.from_pairs [["type", "Date"], ["day", this.day], ["month", this.month], ["year", this.year]]

    ## Format this date using the provided format specifier.

       Arguments:
       - pattern: The text specifying the format for formatting the date.

       ? Pattern Syntax
         Patterns are based on a simple sequence of letters and symbols. For
         example, "d MMM yyyy" will format "2011-12-03" as "3 Dec 2011".

       > Example
         Format "2020-06-02" as "2 June 2020"

             import Standard.Base.Data.Time.Date

             example_format = Date.new 2020 6 2 . format "d MMMM yyyy"

       > Example
         Format "2020-06-02" as "2 June 20"

             import Standard.Base.Data.Time.Date

             example_format = Date.new 2020 6 2 . format "d MMMM yy"

       > Example
         Format "2020-06-02" as "Tuesday, 02 June 2020"

             import Standard.Base.Data.Time.Date

             example_format = Date.new 2020 6 2 . format "EEEE, dd MMMM yyyy"

       > Example
         Format "2020-06-02" as "Tue Jun 2"

             import Standard.Base.Data.Time.Date

             example_format = Date.new 2020 6 2 . format "EEE MMM d"

       > Example
         Format "2020-06-02" as "2020AD"

             import Standard.Base.Data.Time.Date

             example_format = Date.new 2020 6 2 . format "yyyyGG"
    format : Text -> Text
    format pattern = DateTimeFormatter.ofPattern pattern . format this.internal_local_date

