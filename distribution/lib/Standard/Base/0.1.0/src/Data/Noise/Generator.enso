from Standard.Base import all

import Standard.Base.Data.Interval.Bound
import Standard.Base.Error.Extensions

polyglot java import java.lang.Long
polyglot java import java.util.Random

## PRIVATE

   The interface for the noise generator abstraction.

   To be a valid generator, it must provide the `step` method as described
   below.
type Generator

    ## PRIVATE

       The basic generator type.
    type Generator

    ## PRIVATE

      Step the generator to produce the next value..

       Arguments:
       - The input number, which is intended for use as a seed.
       - A range for output values, which should range over the chosen output
         type.

       The return type may be chosen freely by the generator implementation, as
       it usually depends on the generator and its intended use.
    step : Number -> Interval -> Any
    step _ _ = Unimplemented "Only intended to demonstrate an interface."

## A noise generator that implements a seeded deterministic random peterbation
   of the input.

   It produces what is commonly termed "white" noise, where any value in the
   range has an equal chance of occurring.
type Deterministic_Random

    ## A determinstic random noise generator that performs a peterbation of the
       input

       It produices what is commonly termed as "white" noise, where any value in
       the range has an equal chance of occurring.
    type Deterministic_Random

    ## Step the generator to produce the next value.

       Arguments:
       - input: The seed number to perturb.
       - interval: The interval over which the noise should be generated.

       > Example
         Step the generator with the input 1 and range 0 to 1

             from Standard.Base.Data.Noise.Generator import Deterministic_Random

             example_det_random = Deterministic_Random.step 1 (Interval.inclusive 0 1)
    step : Number -> Interval -> Number
    step input interval =
        max_long = Long.MAX_VALUE
        seed = input.floor % max_long
        gen = Random.new seed
        value_range = (interval.end.n - interval.start.n).abs
        offset = (interval.start.n)
        gen.nextDouble
        val = gen.nextDouble
        (val * value_range) + offset
