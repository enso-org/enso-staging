from Standard.Base import all

import Standard.Base.Data.Time

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.Period as Java_Period

## Create an interval representing the duration between two points in time.

   Arguments:
   - start_inclusive: The start time of the duration.
   - end_inclusife: The end time of the duration.

   > Example
     An hour interval between two points in time.

         import Standard.Base.Data.Time.Duration
         import Standard.Base.Data.Time

         example_between = Duration.between Time.now (Time.new 2010 10 20)
between : Time -> Time -> Duration
between start_inclusive end_exclusive =
    period = Java_Period.ofDays 0 . normalized
    start = start_inclusive.internal_zoned_date_time
    end = end_exclusive.internal_zoned_date_time
    duration = Java_Duration.between start end
    Duration period duration

type Duration

    ## An amount of time in terms of years, months, days, hours, minutes,
       seconds and nanoseconds.

       Arguments:
       - internal_period: The internal representation of the time as a period.
       - internal_duration: The internal representation of the time as a
         duration.
    type Duration internal_period internal_duration

    ## Add the specified amount of time to this duration.

       Arguments:
       - that: The duration to add to `this`.

       > Example
         Add 6 seconds to a duration of 3 minutes

             import Standard.Base.Data.Time.Duration

             example_add = 3.minutes + 6.seconds

       > Example
         Add 12 hours to a duration of a month.

             import Standard.Base.Data.Time.Duration

             example_add = 1.month + 12.hours
    + : Duration -> Duration
    + that =
        period = this.internal_period . plus that.internal_period . normalized
        duration = this.internal_duration . plus that.internal_duration
        Duration period duration

    ## Subtract the specified amount of time from this duration.

       Arguments:
       - that: The duration to subtract from `this`.

       > Example
         Subtract 11 months from a duration of 3 years

             import Standard.Base.Data.Time.Duration

             example_subtract = 3.years - 11.months

       > Example
         Substract 30 minutes from a duration of 7 months.

             import Standard.Base.Data.Time.Duration

             example_subtract = 7.months - 30.minutes
    - : Duration -> Duration
    - that =
        period = this.internal_period . minus that.internal_period . normalized
        duration = this.internal_duration . minus that.internal_duration
        Duration period duration

    ## Get the portion of the duration expressed in nanoseconds.

       > Example
         Get the portion of the duration expressed in nanoseconds.

             import Standard.Examples

             example_nanos = Examples.duration.nanoseconds
    nanoseconds : Integer
    nanoseconds = this.internal_duration . toNanosPart

    ## Get the portion of the duration expressed in milliseconds.

       > Example
         Get the portion of the duration expressed in milliseconds.

             import Standard.Examples

             example_millis = Examples.duration.milliseconds
    milliseconds : Integer
    milliseconds = this.internal_duration . toMillisPart

    ## Get the portion of the duration expressed in seconds.

       > Example
         Get the portion of the duration expressed in seconds.

             import Standard.Examples

             example_seconds = Examples.duration.milliseconds
    seconds : Integer
    seconds = this.internal_duration . toSecondsPart

    ## Get the portion of the duration expressed in minutes.

       > Example
         Get the portion of the duration expressed in minutes.

             import Standard.Examples

             example_minutes = Examples.duration.milliseconds
    minutes : Integer
    minutes = this.internal_duration . toMinutesPart

    ## Get the portion of the duration expressed in hours.

       > Example
         Get the portion of the duration expressed in hours.

             import Standard.Examples

             example_hours = Examples.duration.milliseconds
    hours : Integer
    hours = this.internal_duration . toHours

    ## Get the portion of the duration expressed in days.

       > Example
         Get the portion of the duration expressed in days.

             import Standard.Examples

             example_days = Examples.duration.milliseconds
    days : Integer
    days = this.internal_period . getDays

    ## Get the portion of the duration expressed in months.

       > Example
         Get the portion of the duration expressed in months.

             import Standard.Examples

             example_months = Examples.duration.months
    months : Integer
    months = this.internal_period . getMonths

    ## Get the portion of the duration expressed in years.

       > Example
         Get the portion of the duration expressed in years.

             import Standard.Examples

             example_years = Examples.duration.years
    years : Integer
    years = this.internal_period . getYears

    ## Convert this duration to a Vector of years, months, days, hours, minutes,
       seconds and nanosecnods.

       > Example
         Convert duration of a year and a hour to a vector returning
         `[1, 0, 0, 1, 0, 0, 0]`.

             import Standard.Base.Data.Time.Duration

             example_to_vec = (1.year + 1.hour).to_vector

       > Example
         Convert duration of 800 nanoseconds to a vector returning
         `[0, 0, 0, 0, 0, 0, 800]`

             import Standard.Base.Data.Time.Duration

             example_to_vec = 800.nanoseconds . to_vector
    to_vector : Vector.Vector Integer
    to_vector = [this.years, this.months, this.days, this.hours, this.minutes, this.seconds, this.nanoseconds]

    ## A Duration to Json conversion.

       > Example
         Convert a duration of 10 seconds to Json.

             import Standard.Base.Data.Time.Duration

             example_to_json = 10.seconds.to_json
    to_json : Json.Object
    to_json =
        b = Vector.new_builder
        b.append ["type", "Duration"]
        if this.years==0 . not then b.append ["years", this.years]
        if this.months==0 . not then b.append ["months", this.months]
        if this.days==0 . not then b.append ["days", this.days]
        if this.hours==0 . not then b.append ["hours", this.hours]
        if this.minutes==0 . not then b.append ["minutes", this.minutes]
        if this.seconds==0 . not then b.append ["seconds", this.seconds]
        if this.nanoseconds==0 . not then b.append ["nanoseconds", this.nanoseconds]
        Json.from_pairs b.to_vector

    ## Check if this duration is date-based.

       > Example
         Check if the duration of 10 seconds is date-based.

             import Standard.Base.Data.Time.Duration

             example_is_date = 10.seconds.is_date
    is_date : Boolean
    is_date = (this.years==0 . not) || (this.months==0 . not) || (this.days==0 . not)

    ## Check if this duration is time-based.

       > Example
         Check if the duration of 10 seconds is time-based.

             import Standard.Base.Data.Time.Duration

             example_is_time = 10.seconds.is_time
    is_time : Boolean
    is_time = (this.hours==0 . not) || (this.minutes==0 . not) || (this.seconds==0 . not) || (this.nanoseconds==0 . not)

    ## Check if this duration represents an empty time-span.

       > Example
         Check if the duration of 10 seconds is empty.

             import Standard.Base.Data.Time.Duration

             example_is_empty = 10.seconds.is_empty
    is_empty : Boolean
    is_empty = this.is_date.not && this.is_time.not

    ## Check two durations for equality.

       Arguments:
       - that: The duration to compare against `this`.

       > Examples
         Check if 60 seconds and 1 minute are equal.

             import Standard.Base.Data.Time.Duration

             example_eq = 60.seconds == 1.minute
    == : Duration -> Boolean
    == that = this.to_vector == that.to_vector

    ## Compares `this` to `that` to produce an ordering.

       Arguments:
       - that: The other `Duration` to compare against.

       > Example
         Compare two durations for their ordering.

             import Standard.Base.Data.Time.Duration

             example_compare_to =
                 duration_1 = 1.year
                 duration_2 = 12.months + 1.day
                 duration_1.compare_to duration_2
    compare_to : Duration -> Ordering
    compare_to that =
        if this.years > that.years then Ordering.Greater else
            if this.years < that.years then Ordering.Less else
                if this.months > that.months then Ordering.Greater else
                    if this.months < that.months then Ordering.Less else
                        if this.days > that.days then Ordering.Greater else
                            if this.days < that.days then Ordering.Less else
                                duration_sign = this.internal_duration.compareTo that.internal_duration
                                Ordering.from_sign duration_sign

## Create a duration of `this` nanoseconds.

   > Examples
     Create a duration of 1 nanosecond.

         import Standard.Base.Data.Time.Duration

         example_nano = 1.nanosecond
Integer.nanosecond : Duration
Integer.nanosecond = Duration (Java_Period.ofDays 0) (Java_Duration.ofNanos this)

## Create a duration of `this` nanoseconds.

   > Examples
     Create a duration of 20 nanoseconds.

         import Standard.Base.Data.Time.Duration

         example_nano = 20.nanoseconds
Integer.nanoseconds : Duration
Integer.nanoseconds = this.nanosecond

## Create a duration of `this` milliseconds.

   > Example
     Create a duration of 1 millisecond.

         import Standard.Base.Data.Time.Duration

         example_milli = 1.millisecond
Integer.millisecond : Duration
Integer.millisecond = Duration (Java_Period.ofDays 0) (Java_Duration.ofMillis this)

## Create a duration of `this` milliseconds.

   > Example
     Create a duration of 20 milliseconds.

         import Standard.Base.Data.Time.Duration

         example_milli = 20.milliseconds
Integer.milliseconds : Duration
Integer.milliseconds = this.millisecond

## Create a duration of `this` seconds.

   > Example
     Create a duration of 1 second.

         import Standard.Base.Data.Time.Duration

         example_second = 1.second
Integer.second : Duration
Integer.second = Duration (Java_Period.ofDays 0) (Java_Duration.ofSeconds this)

## Create a duration of `this` seconds.

   > Example
     Create a duration of 20 seconds.

         import Standard.Base.Data.Time.Duration

         example_second = 20.seconds
Integer.seconds : Duration
Integer.seconds = this.second

## Create a duration of `this` minutes.

   > Example
     Create a duration of 1 minute.

         import Standard.Base.Data.Time.Duration

         example_min = 1.minute
Integer.minute : Duration
Integer.minute = Duration (Java_Period.ofDays 0) (Java_Duration.ofMinutes this)

## Create a duration of `this` minutes.

   > Example
     Create a duration of 20 minutes.

         import Standard.Base.Data.Time.Duration

         example_min = 20.minutes
Integer.minutes : Duration
Integer.minutes = this.minute

## Create a duration of `this` hours.

   > Example
     Create a duration of 1 hour.

         import Standard.Base.Data.Time.Duration

         example_hour = 1.hour
Integer.hour : Duration
Integer.hour = Duration (Java_Period.ofDays 0) (Java_Duration.ofHours this)

## Create a duration of `this` hours.

   > Example
     Create a duration of 20 hours.

         import Standard.Base.Data.Time.Duration

         example_hour = 20.hours
Integer.hours : Duration
Integer.hours = this.hour

## Create a duration of `this` days.

   > Example
     Create a duration of 1 day.

         import Standard.Base.Data.Time.Duration

         example_day = 1.day
Integer.day : Duration
Integer.day = Duration (Java_Period.ofDays this . normalized) (Java_Duration.ofSeconds 0)

## Create a duration of `this` days.

   > Example
     Create a duration of 20 days.

         import Standard.Base.Data.Time.Duration

         example_day = 20.days
Integer.days : Duration
Integer.days = this.day

## Create a duration of `this` months.

   > Example
     Create a duration of 1 month.

         import Standard.Base.Data.Time.Duration

         example_month = 1.month
Integer.month : Duration
Integer.month = Duration (Java_Period.ofMonths this . normalized) (Java_Duration.ofSeconds 0)

## Create a duration of `this` months.

   > Example
     Create a duration of 6 months.

         import Standard.Base.Data.Time.Duration

         example_month = 6.months
Integer.months : Duration
Integer.months = this.month

## Create a duration of `this` years.

   > Example
     Create a duration of 1 year.

         import Standard.Base.Data.Time.Duration

         example_year = 1.year
Integer.year : Duration
Integer.year = Duration (Java_Period.ofYears this . normalized) (Java_Duration.ofSeconds 0)

## Create a duration of `this` years.

   > Example
     Create a duration of 20 years.

         import Standard.Base.Data.Time.Duration

         example_year = 20.years
Integer.years : Duration
Integer.years = this.year

