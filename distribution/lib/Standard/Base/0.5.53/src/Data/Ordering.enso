from Standard.Base import all

from Standard.Builtins import Less, Equal, Greater

from Standard.Builtins export Less, Equal, Greater

## Converts a sign-based representation of ordering to Enso's native ordering.

   Arguments:
   - sign: The number representing the relative ordering of two entities.

   > Example
     Convert the number 0 to an Enso ordering.

         Ordering.from_sign 0
from_sign : Integer -> Ordering
from_sign sign = if sign == 0 then Equal else
    if sign > 0 then Greater else Less

## Types representing the ordering of values.

   These are intended to be returned from the `compare_to` function, that has a
   type as follows for a type `A`: `A.compare_to : A -> Ordering`.

   The result should be returned in terms of how `this` orders in comparison to
   `that`. So, if `this` is greater than `that`, you should return `Greater.`
type Ordering
    Less
    Equal
    Greater

    ## Converts the ordering to the signed notion of ordering based on integers.

       > Example
         Converting equal ordering to a signed number.

             import Standard.Base.Data.Ordering

             example_to_sign = Ordering.Equal.to_sign
    to_sign : Integer
    to_sign = case this of
        Less -> -1
        Greater -> 1
        Equal -> 0

