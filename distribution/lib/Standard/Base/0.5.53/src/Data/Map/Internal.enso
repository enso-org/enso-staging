from Standard.Base import all

from Standard.Base.Data.Map import all

## PRIVATE

   A helper used in the insert operation to insert into the left subtree.

   Arguments:
   - key: The key to insert.
   - value: The value to insert.
   - k: The previous top key of the left subtree.
   - v: The previous top value of the left subtree.
   - l: The left subtree.
   - r: The right subtree.
insert_l : Any -> Any -> Any -> Any -> Tree -> Tree -> Tree
insert_l key value k v l r =
    new_left = here.insert l key value
    here.balance_left k v new_left r

## PRIVATE

   A helper used in the insert operation to insert into the right subtree.

   Arguments:
   - key: The key to insert.
   - value: The value to insert.
   - k: The previous top key of the right subtree.
   - v: The previous top value of the right subtree.
   - l: The left subtree.
   - r: The right subtree.
insert_r : Any -> Any -> Any -> Any -> Tree -> Tree -> Tree
insert_r key value k v l r =
    new_right = here.insert r key value
    here.balance_right k v l new_right

## PRIVATE

   Helper for inserting a new key-value pair into a map.

   Arguments:
   - map: The map into which the insertion is performed.
   - key: The key for which to insert the value into the map.
   - value: The value to insert into the map at the given key.

   The algorithm used here is based on the paper "Implementing Sets Efficiently
   in a Functional Language" by Stephen Adams.  The implementation is based on
   Haskell's `Data.Map.Strict` as implemented in the `containers` package.
insert : Map -> Any -> Any -> Map
insert map key value = case map of
    Bin s k v l r ->
        if key > k then @Tail_Call here.insert_r key value k v l r else
            if key == k then @Tail_Call Bin s k value l r else
                @Tail_Call here.insert_l key value k v l r
    _ -> Bin 1 key value Tip Tip

## PRIVATE

   Rebalances the map after the left subtree grows.

   Arguments:
   - k: The old top key of the left subtree.
   - x: The old top value of the left subtree.
   - l: The left subtree.
   - r: The right subtree.
balance_left : Any -> Any -> Tree -> Tree -> Tree
balance_left k x l r = case r of
    Bin rs _ _ _ _ -> case l of
        Bin ls lk lx ll lr ->
            if ls <= Delta*rs then Bin 1+ls+rs k x l r else
                lls = here.size ll
                case lr of
                    Bin lrs lrk lrx lrl lrr ->
                        if lrs < Ratio*lls then Bin 1+ls+rs lk lx ll (Bin 1+rs+lrs k x lr r) else
                            lrls = here.size lrl
                            lrrs = here.size lrr
                            Bin 1+ls+rs lrk lrx (Bin 1+lls+lrls lk lx ll lrl) (Bin 1+rs+lrrs k x lrr r)
        _ -> Bin 1+rs k x Tip r
    _ -> case l of
        Tip -> Bin 1 k x Tip Tip
        Bin _ _ _ Tip Tip -> Bin 2 k x l Tip
        Bin _ lk lx Tip (Bin _ lrk lrx _ _) -> Bin 3 lrk lrx (Bin 1 lk lx Tip Tip) (Bin 1 k x Tip Tip)
        Bin _ lk lx ll Tip -> Bin 3 lk lx ll (Bin 1 k x Tip Tip)
        Bin ls lk lx ll lr -> case lr of
            Bin lrs lrk lrx lrl lrr ->
                lls = here.size ll
                if lrs < Ratio*lls then Bin 1+ls lk lx ll (Bin 1+lrs k x lr Tip) else
                    lrls = here.size lrl
                    lrrs = here.size lrr
                    Bin 1+ls lrk lrx (Bin 1+lls+lrls lk lx ll lrl) (Bin 1+lrrs k x lrr Tip)

## PRIVATE

   Rebalances the map after the right subtree grows.

   Arguments:
   - k: The old top key of the right subtree.
   - x: The old top value of the right subtree.
   - l: The left subtree.
   - r: The right subtree.
balance_right k x l r = case l of
    Bin ls _ _ _ _ -> case r of
        Bin rs rk rx rl rr ->
            if rs <= Delta*ls then Bin 1+ls+rs k x l r else
                case rl of
                    Bin rls rlk rlx rll rlr ->
                        rrs = here.size rr
                        if rls < Ratio*rrs then Bin 1+ls+rs rk rx (Bin 1+ls+rls k x l rl) rr else
                            rlls = here.size rll
                            rlrs = here.size rlr
                            Bin 1+ls+rs rlk rlx (Bin 1+ls+rlls k x l rll) (Bin 1+rrs+rlrs rk rx rlr rr)
        _ -> Bin 1+ls k x l Tip
    _ -> case r of
        Tip -> Bin 1 k x Tip Tip
        Bin _ _ _ Tip Tip -> Bin 2 k x Tip r
        Bin _ rk rx Tip rr -> Bin 3 rk rx (Bin 1 k x Tip Tip) rr
        Bin _ rk rx (Bin _ rlk rlx _ _) Tip -> Bin 3 rlk rlx (Bin 1 k x Tip Tip) (Bin 1 rk rx Tip Tip)
        Bin rs rk rx rl rr -> case rl of
            Bin rls rlk rlx rll rlr -> case rr of
                Bin rrs _ _ _ _ ->
                    if rls < Ratio*rrs then Bin 1+rs rk rx (Bin 1+rls k x Tip rl) rr else
                        srll = here.size rll
                        srlr = here.size rlr
                        Bin 1+rs rlk rlx (Bin 1+srll k x Tip rll) (Bin 1+rrs+srlr rk rx rlr rr)

## PRIVATE

   Controls the difference between inner and outer siblings of a heavy subtree.
   Used to decide between a double and a single rotation.

   The choice of values for `ratio` and `delta` is taken from the Haskell
   implementation.
ratio : Integer
ratio = 2

## PRIVATE

   Controls the maximum size difference between subtrees.

   The choice of values for `ratio` and `delta` is taken from the Haskell
   implementation.
delta : Integer
delta = 3

## PRIVATE

   Gets the size of a map.

   Arguments:
   - m: The map to get the size of.
size: Map -> Integer
size m = case m of
    Bin s _ _ _ _ -> s
    _ -> 0

