from Standard.Base import all

import Standard.Table.Data.Table as Dataframe_Table
import Standard.Table.Data.Column as Dataframe_Column
import Standard.Database.Data.Table as Database_Table
import Standard.Database.Data.Column as Database_Column
import Standard.Visualization.Helpers

# TODO add an initial offset to fully support lazy visualizations

## PRIVATE

   Prepares a table or column for visualization.

   Arguments:
   - x: The table to prepare for visualisation.
   - max_rows: The maximum number of rows to display.

   In case of Database backed data, it materializes a fragment of the data.
prepare_visualization : Any -> Integer -> Json
prepare_visualization x max_rows = Helpers.recover_errors <| case x of
    Dataframe_Table.Table _ ->
        dataframe = x.take_start max_rows
        all_rows_count = x.row_count
        included_rows = dataframe.row_count
        index = dataframe.index.catch _->
            Dataframe_Column.from_vector "" (Vector.new included_rows i->i)
        here.make_json dataframe [index] all_rows_count

    Database_Table.Table _ _ _ _ ->
        # Materialize a table with indices as normal columns (because dataframe does not support multi-indexing).
        df = x.reset_index.to_dataframe max_rows
        # Then split into actual columns and indices.
        vis_df = df.select (x.columns.map .name)
        indices = df.select (x.indices.map .name) . columns
        all_rows_count = x.row_count
        here.make_json vis_df indices all_rows_count

    # We display columns as 1-column tables.
    Dataframe_Column.Column _ ->
        here.prepare_visualization x.to_table max_rows
    Database_Column.Column _ _ _ _ _ ->
        here.prepare_visualization x.to_table max_rows

    # We display aggregates as their ungrouped counterparts.
    Dataframe_Table.Aggregate_Table _ ->
        ungrouped = Dataframe_Table.Table x.java_table.getUnderlyingTable
        here.prepare_visualization ungrouped max_rows
    Dataframe_Column.Aggregate_Column _ ->
        ungrouped = Dataframe_Column.Column x.java_column.getColumn
        here.prepare_visualization ungrouped.to_table max_rows
    Database_Table.Aggregate_Table _ _ _ _ ->
        here.prepare_visualization x.ungrouped max_rows
    Database_Column.Aggregate_Column _ _ _ _ _ ->
        here.prepare_visualization x.ungrouped.to_table max_rows

    # TODO [RW] Should we truncate Vectors?
    # We also visualize Vectors and arrays
    Vector.Vector _ ->
        truncated = x.take_start max_rows
        Json.from_pairs [["json", truncated], ["all_rows_count", x.length]] . to_text
    Array ->
        here.prepare_visualization (Vector.Vector x) max_rows

    # Anything else will be visualized with the JSON or matrix visualization
    _ ->
        Json.from_pairs [["json", x]] . to_text

## PRIVATE
   Creates a JSON representation for the visualizations.

   Arguments:
   - dataframe: the dataframe containing (possibly just a fragment of) the data
     to display.
   - indices: a vector of dataframe columns that should be displayed as indices;
     it can be empty, they should have the same amount of rows as the
     `dataframe`.
   - all_rows_count: the number of all rows in the underlying data, useful if
     only a fragment is displayed.
make_json : Table -> Vector Column -> Integer -> Json
make_json dataframe indices all_rows_count =
    columns  = dataframe.columns
    header      = ["header", columns.map .name]
    data        = ["data",   columns.map .to_vector]
    all_rows    = ["all_rows_count", all_rows_count]
    ixes        = ["indices", indices.map .to_vector]
    ixes_header = ["indices_header", indices.map .name]
    pairs    = [header, data, all_rows, ixes, ixes_header]
    Json.from_pairs pairs . to_text
