from Standard.Base import all

import Standard.Table.Data.Column
import Standard.Table.Data.Table
import Standard.Visualization.Helpers

## PRIVATE

   Name of the index column that may be generated to plot against.
index_name : Text
index_name = 'index'

## PRIVATE
data_field : Text
data_field = 'data'

## PRIVATE
axis_field : Text
axis_field = 'axis'

## PRIVATE
label_field : Text
label_field = 'label'

## PRIVATE

   Represents a recognized point data field for a scatter plot visualization.
type PointData

    ## PRIVATE
    type PointData

    ## PRIVATE
    type X

    ## PRIVATE
    type Y

    ## PRIVATE
    type Color

    ## PRIVATE
    type Shape

    ## PRIVATE
    type Label

    ## PRIVATE
    type Size

    ## PRIVATE

       Returns all recognized point data fields.
    all_fields : Vector
    all_fields = [X,Y,Color,Shape,Label,Size]

    ## PRIVATE
    recognized_names : Vector
    recognized_names = this.all_fields.map _.name

    ## PRIVATE
    is_recognized : Column -> Boolean
    is_recognized column = this.recognized_names.contains column.name

    ## PRIVATE
    name : Text
    name = this.to_text.to_lower_case

    ## PRIVATE
    fallback_column : Table -> Column ! No_Fallback_Column
    fallback_column table = case this of
        X -> table.index.catch_ <| this.iota table.row_count
        Y ->
            x_column = X.lookup_in table
            candidates = table.all_columns
            is_good_enough c = c.is_numeric && c.name != x_column.name
            is_good c = is_good_enough c && (this.is_recognized c).not

            candidates.find is_good . catch_ <| candidates.find is_good_enough
        _ -> Error.throw No_Fallback_Column

    ## PRIVATE

       Returns a vector of subsequent integers beginning from 0.
    iota : Number -> Vector
    iota count =
        range = 0.up_to count
        Column.from_vector here.index_name range.to_vector

    ## PRIVATE
    lookup_in : Table -> Column
    lookup_in table =
        named = table.lookup_ignore_case this.name
        named.catch_ <| this.fallback_column table

## PRIVATE
type No_Fallback_Column

## PRIVATE
No_Fallback_Column.to_display_text : Text
No_Fallback_Column.to_display_text =
    "No fallback column found for the scatter plot."

## PRIVATE

   Generates JSON that describes points data.
Table.Table.point_data : Table -> Object
Table.Table.point_data =
    get_point_data field = field.lookup_in this . rename field.name
    columns = PointData.all_fields.filter_map get_point_data
    (0.up_to this.row_count).to_vector.map <| row_n->
        pairs = columns.map column->
            value = column.at row_n . catch_ Nothing
            [column.name, value]
        Json.from_pairs pairs

## PRIVATE

   Generates JSON that describes plot axes.
Table.Table.axes : Table -> Object
Table.Table.axes =
    describe_axis field =
        col_name = field.lookup_in this . name
        label = Json.from_pairs [[here.label_field, col_name]]
        [field.name, label]
    x_axis = describe_axis X
    y_axis = describe_axis Y
    is_valid axis_pair =
        label = axis_pair.at 1
        label.is_valid && (this.all_columns.length > 0)
    axes_obj = Json.from_pairs <| [x_axis, y_axis].filter is_valid
    if axes_obj.fields.size > 0 then axes_obj else Nothing

## PRIVATE
Vector.Vector.point_data : Vector -> Object
Vector.Vector.point_data =
        this.map_with_index <| i-> elem->
            Json.from_pairs [[X.name,i],[Y.name,elem]]

## PRIVATE
json_from_table : Table -> Json
json_from_table table =
    data = table.point_data
    axes = table.axes
    Json.from_pairs <| [[here.data_field,data], [here.axis_field, axes]]

## PRIVATE
json_from_vector : Vector Any -> Json
json_from_vector vec =
    data = [here.data_field, vec.point_data]
    axes = [here.axis_field, Nothing]
    Json.from_pairs [data, axes]

## PRIVATE

   Default preprocessor for the scatterplot visualization.

   Generates JSON text describing the scatterplot visualization.

   Arguments:
   - value: the value to be visualized.
process_to_json_text : Any -> Text
process_to_json_text value =
    json = case value of
        Column.Column _ -> here.json_from_table  value.to_table
        Table.Table _   -> here.json_from_table  value
        Vector.Vector _ -> here.json_from_vector value
        _               -> here.json_from_vector value.to_vector

    json.to_text

