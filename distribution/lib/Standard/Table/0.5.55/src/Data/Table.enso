from Standard.Base import all

import Standard.Base.System.Platform
import Standard.Table.Data.Column
import Standard.Table.Io.Csv
import Standard.Visualization
import Standard.Base.Data.Time.Date
import Standard.Table.Io.Spreadsheet_Write_Mode
import Standard.Table.Io.Format

from Standard.Table.Data.Order_Rule as Order_Rule_Module import Order_Rule

polyglot java import org.enso.table.data.table.Table as Java_Table
polyglot java import org.enso.table.operations.OrderBuilder
polyglot java import org.enso.table.format.csv.Writer as Csv_Writer
polyglot java import org.enso.table.format.xlsx.Writer as Spreadsheet_Writer

## Creates a new table from a vector of `[name, items]` pairs.

   Arguments:
   - columns: The `[name, items]` pairs to construct a new table from.

   > Example
     Create a new table with the given columns.

         import Standard.Table

         example_new =
             first_column = ["count", [1, 2, 3]]
             second_column = ["is_valid", [True, False, True]]
             Table.new [first_column, second_column]
new : Vector -> Table
new columns =
    cols = columns.map c->
        Column.from_vector (c.at 0) (c.at 1) . java_column
    here.from_columns cols

## Creates a new table from a vector of column names and a vector of vectors
   specifying row contents.

   Arguments:
   - header: A list of texts specifying the column names
   - rows: A vector of vectors, specifying the contents of each table row. The
     length of each element of `rows` must be equal in length to `header`.

   > Example
     Create a table with 3 columns, named `foo`, `bar`, and `baz`, containing
     `[1, 2, 3]`, `[True, False, True]`, and `['a', 'b', 'c']`, respectively.

         import Standard.Table

         example_from_rows =
             header = [ 'foo' , 'bar' , 'baz' ]
             row_1 =  [ 1     , True  , 'a'   ]
             row_2 =  [ 2     , False , 'b'   ]
             row_3 =  [ 3     , True  , 'c'   ]
             Table.from_rows header [row_1, row_2, row_3]
from_rows : Vector.Vector -> Vector.Vector -> Table
from_rows header rows =
    columns = header.map_with_index i-> name-> [name, rows.map (_.at i)]
    here.new columns

## ALIAS Join Tables

   Joins a vector of tables (or columns) into a single table, using each table's
   index as the join key.

   Arguments:
   - tables: A vector of tables to join into a single table.

   Particularly useful for joining multiple columns derived from one original
   table into a new table.

   > Example
     Join multiple tables together. It joins tables on their indices, so we need
     to make sure the indices are correct.

         import Standard.Examples
         import Standard.Table

         example_join =
             table_1 = Examples.inventory_table
             table_2 = Examples.popularity_table
             Table.join [table_1, table_2]
join : Vector -> Table
join tables =
    tables.reduce .join

## UNSTABLE

   Concatenates multiple tables, resulting in a table with the number of rows
   being the sum of numbers of rows of `tables`. Any column that is present in
   some tables, but missing in others, will be `Nothing`-padded in the positions
   corresponding to the missing values.

   Arguments:
   - tables: the tables to concatenate.

   > Example
     Concatenate multiple tables together.

         import Standard.Examples
         import Standard.Table

         example_concat =
             table_1 = Examples.inventory_table
             table_2 = Examples.popularity_table
             Table.concat [table_1, table_2]
concat : Vector -> Table
concat tables =
    Table (Java_Table.concat (tables.map .java_table).to_array)

## Represents a column-oriented table data structure.
type Table

    ## PRIVATE

       A table.

       Arguments:
       - java_table: The internal java representation of the table.
    type Table java_table

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.
       - format_terminal: whether ANSI-terminal formatting should be used

       > Example
         Convert the table to a pretty-printed representation.

             import Standard.Examples

             example_display = Examples.inventory_table.display
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        cols = Vector.Vector this.java_table.getColumns
        index =  this.java_table.getIndex
        col_names = [index.getName] + cols.map .getName
        col_vals = cols.map .getStorage
        num_rows = this.row_count
        display_rows = Math.min num_rows show_rows
        rows = Vector.new display_rows row_num->
            cols = col_vals.map col->
                if col.isNa row_num then "Nothing" else Column.get_item_string col row_num
            [index.ilocString row_num] + cols
        table = here.print_table col_names rows 1 format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.

       > Example
         Convert the table to a pretty-printed representation and print it to
         the console.

             import Standard.Examples

             example_print = Examples.inventory_table.print
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Converts this table to a JSON structure.

       > Example
         Convert a table to a corresponding JSON representation.

             import Standard.Examples

             example_to_json = Examples.inventory_table.to_json
    to_json : Json
    to_json =
        index_prep = case this.index.catch (_->Nothing) of
            Nothing -> []
            index -> [index]
        cols = index_prep + this.columns
        rows = 0.up_to this.row_count . map row->
            vals_kv = cols.map col-> [col.name, col.at row]
            Json.from_pairs vals_kv
        rows.to_json

    ## UNSTABLE
       ADVANCED

       Returns a Text used to display this table in the IDE by default.

       Returns a JSON object containing useful metadata and previews of column
       values.
    to_default_visualization_data : Text
    to_default_visualization_data =
        max_size = 10
        row_count = ['number_of_rows', this.row_count]
        cols = this.columns.map c->
            name = c.name
            items = c.to_vector.take_start max_size
            Json.from_pairs [['name', name], ['data', items]]
        Json.from_pairs [row_count, ['columns', cols]] . to_text

    ## UNSTABLE
       ADVANCED

       Guides the visualization system to display the most suitable graphical
       representation for this table.
    default_visualization : Visualization.Id.Id
    default_visualization =
        cols = this.columns.map .name . map .to_lower_case
        if cols.contains "latitude" && cols.contains "longitude" then Visualization.Id.geo_map else
            if cols.contains "x" && cols.contains "y" then Visualization.Id.scatter_plot else
                Visualization.Id.table

    ## Returns the column with the given name.

       Arguments:
       - name: The name of the column being looked up.

       > Example
         Get the names of all of the items from the shop inventory.

             import Standard.Examples

             example_at = Examples.inventory_table.at "item_name"
    at : Text -> Column ! No_Such_Column_Error
    at name = case this.java_table.getColumnOrIndexByName name of
        Nothing -> Error.throw (No_Such_Column_Error name)
        c -> Column.Column c

    ## ALIAS Filter Rows
       ALIAS Mask Columns

       Selects only the rows of this table that correspond to `True` values in
       `indexes`.

       Arguments:
       - indexes: The column to mask the table by. This column should contain
         boolean values (`True` or `False`) that determine whether or not the
         corresponding row is kept.

       This is useful for filtering the rows by given predicate.

       > Example
         Select only the items where more than half the stock has been sold.

             import Standard.Examples

             example_where =
                 table = Examples.inventory_table
                 mask = (table.at "sold_stock" > (table.at "total_stock" / 2))
                 table.where mask
    where : Column -> Table
    where indexes =
        Table (this.java_table.mask indexes.java_column)

    ## ALIAS Add Column

       Sets the column value at the given name.

       Arguments:
       - name: The name of the column to set the value of.
       - column: The new value for the column called `name`.

       If a column with the given name already exists, it will be replaced.
       Otherwise a new column is added.

       > Example
         Create a table where the values of the total stock in the inventory is
         doubled.

             import Standard.Examples

             example_set =
                 table = Examples.inventory_table
                 double_inventory = table.at "total_stock" * 2
                 table.set "total_stock" double_inventory
    set : Text -> Column.Column | Vector.Vector -> Table
    set name column = case column of
        Vector.Vector _ ->
            this.set name (Column.from_vector name column)
        Column.Column _ ->
            Table (this.java_table.addOrReplaceColumn (column.rename name . java_column))

    ## Returns the vector of columns contained in this table.

       > Examples
         Get a vector containing the columns in the table.

             import Standard.Examples

             example_columns = Examples.inventory_table.columns
    columns : Vector
    columns = Vector.Vector this.java_table.getColumns . map Column.Column

    ## Sets the index of this table, using the column with the provided name.

       Arguments:
       - index: The name of the column to use as the index in this table, or the
         column itself to use.

       > Example
         Set the index of the inventory table to be the item name.

             import Standard.Examples

             example_set_index = Examples.inventory_table.set_index "item_name"
    set_index : Text | Column -> Table
    set_index index = case index of
        Text -> Table (this.java_table.indexFromColumn index)
        Column.Column c -> Table (this.java_table.indexFromColumn c)

    ## Returns the index of this table, as a column that is indexed by itself.

       Throws `No_Index_Set_Error` if there is no index set in the table it is
       being called on.

       > Example
         Get the column that is used as the index for a table.

             import Standard.Examples

             example_index = Examples.inventory_table.index
    index : Column.Column ! No_Index_Set_Error
    index = case this.java_table.getIndex.toColumn of
        Nothing -> Error.throw No_Index_Set_Error
        i -> Column.Column i

    ## Alias Select Columns

       Selects a subset of columns from this table by name.

       > Example
         Get the item name and price columns from the shop inventory.

             import Standard.Examples

             example_select =
                 Examples.inventory_table.select ["item_name", "price"]
    select : Vector -> Table
    select columns = Table (this.java_table.selectColumns columns.to_array)

    ## ALIAS Join Table

       Efficiently joins two tables based on either the index or the specified
       key column.

       Arguments:
       - other: The table being the right operand of this join operation.
       - on: The column of `this` that should be used as the join key. If this
         argument is not provided, the index of `this` will be used.
       - drop_unmatched: Whether the rows of `this` without corresponding
         matches in `other` should be dropped from the result.
       - left_suffix: A suffix that should be added to the columns of `this`
         when there's a name conflict with a column of `other`.
       - right_suffix: A suffix that should be added to the columns of `other`
         when there's a name conflict with a column of `this`.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index values in `other` are not
       unique, the corresponding rows of `this` will be duplicated in the
       result.

       > Example
         Join the popularity table and the inventory table to see the relative
         popularities of the items in the shop inventory.

             import Standard.Examples

             example_join =
                 Examples.inventory_table.join Examples.popularity_table
    join : Table | Column.Column -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        case other of
            Column.Column _ -> this.join other.to_table on drop_unmatched left_suffix right_suffix
            Table t ->
                Table (this.java_table.join t drop_unmatched on left_suffix right_suffix)

    ## ALIAS Clean Rows

       Returns a new Table without rows that contained missing values in any of
       the columns.

       > Example
         Remove any rows that contain missing values from the table.

             import Standard.Examples

             example_drop_missing_rows =
                 Examples.inventory_table.drop_missing_rows
    drop_missing_rows : Table
    drop_missing_rows =
        cols = this.columns
        case cols.not_empty of
            True ->
                any_missing_mask = cols.map .is_missing . reduce (||)
                non_missing_mask = any_missing_mask.not
                this.where non_missing_mask
            False -> this

    ## ALIAS Clean Columns

       Returns a new Table without columns that contained any missing values.

       > Example
         Remove any columns that contain missing values from the table.

             import Standard.Examples

             example_drop_missing_cols =
                 Examples.inventory_table.drop_missing_columns
    drop_missing_columns : Table
    drop_missing_columns =
        non_missing = this.columns . filter (col -> col.count_missing == 0)
        index = this.java_table.getIndex
        Table (Java_Table.new (non_missing.map .java_column . to_array) index)

    ## Returns the number of rows in this table.

       > Example
         Count the number of rows in the table.

             import Standard.Examples

             example_row_count = Examples.inventory_table.row_count
    row_count : Integer
    row_count = this.java_table.rowCount

    ## Returns the number of rows in this table.

       > Example
         Count the number of rows in the table.

             import Standard.Examples

             example_length = Examples.inventory_table.length
    length : Integer
    length = this.row_count

    ## Returns a Table describing this table's contents.

       The table lists all columns, counts of non-null items and storage types
       of each column.

       > Example
         Get information about a table.

             import Standard.Examples

             example_info = Examples.inventory_table.info
    info : Table
    info =
        cols = this.columns
        here.new [["Column", cols.map .name], ["Items Count", cols.map .count], ["Storage Type", cols.map .storage_type]] . set_index "Column"

    ## ALIAS Group a Table

       Returns an aggregate table resulting from grouping the elements by the
       value of the specified column.

       Arguments:
       - by: The column in the table to perform grouping by. If this argument
         is not set, the index is used for grouping instead.

       > Example
         Compute the number of transactions that each item has participated in,
         as well as the number of each item sold across those transactions.

             import Standard.Examples
             import Standard.Table

             example_group =
                 transactions = Examples.transactions_table
                 item_names = Examples.inventory_table.at "item_name"
                 aggregated = transactions.group by="item_id"
                 num_transactions = aggregated.at "transaction_id" . reduce .length . rename "transaction_count"
                 num_sold = aggregated.at "quantity" . reduce .sum . rename "num_sold"
                 Table.join [item_names, num_transactions, num_sold]
    group : Text | Nothing -> Aggregate_Table
    group by=Nothing =
        Aggregate_Table (this.java_table.group by)

    ## ALIAS Sort Table
       UNSTABLE

       Sorts the table according to the specified rules.

       Arguments:
       - by: Specifies the columns used for reordering the table. This argument
         may be one of:
         - a text: The text is treated as a column name.
         - a column: Any column, that may or may not belong to this table.
           Sorting by a column will result in reordering the rows of this
           table in a way that would result in sorting the given column.
         - an order rule: Specifies both the sorting column and additional
           settings, that will take precedence over the global parameters of
           this sort operation. The `column` field of the rule may be a text
           or a column, with the semantics described above.
         - a vector of any of the above: This will result in a hierarchical
           sorting, such that the first rule is applied first, the second is
           used for breaking ties, etc.
       - order: Specifies the default sort order for this operation. All the
         rules specified in the `by` argument will default to this setting,
         unless specified in the rule.
       - missing_last: Specifies the default placement of missing values when
         compared to non-missing ones. This setting may be overriden by the
         particular rules of the `by` argument.  Note thet this argument is
         independent from `order`, i.e. missing values will always be sorted
         according to this rule, ignoring the ascending / descending setting.

       > Example
         Sorting the shop inventory based on the per-item price in ascending
         order.

             import Standard.Examples

             example_sort = Examples.inventory_table.sort by="price"

       > Example
         Sort the shop inventory based on the per-item price in descending order
         and placing missing values at the top of the table.

             import Standard.Examples

             example_sort =
                table = Examples.inventory_table
                table.sort by="price" order=Sort_Order.Descending missing_last=false

       > Example
         Sort the shop inventory based on the total stock, using the number sold
         to break ties in descending order.

             import Standard.Examples

             example_sort =
                 table = Examples.inventory_table
                 table.sort by=["total_stock", "sold_stock"] order=Sort_Order.Descending

       > Example
         Sort the shop inventory in ascending order by the total stock, using
         the number of items sold in descending order to break ties.

             import Standard.Examples
             import Standard.Table

             example_sort =
                 table = Examples.inventory_table
                 sold_stock_rule = Table.Order_Rule "sold_stock" order=Sort_Order.Descending
                 table.sort by=["total_stock", sold_stock_rule]

       > Example
         Sorting the inventory in descending order based on the percentage of
         the total stock sold, using the popularity of the product to break
         ties.

             import Standard.Examples
             import Standard.Table

             example_sort =
                 table = Examples.inventory_table.join Examples.popularity_table
                 percentage_sold = table.at "sold_stock" / table.at "total_stock"
                 table.sort by=[percentage_sold, "popularity"] order=Sort_Order.Descending

       > Example
         Sort the inventory by the price using a custom comparator function.

             import Standard.Examples
             import Standard.Table

             example_sort =
                 table = Examples.inventory_table
                 comparator a b = a.compare_to b*2
                 price_rule = Table.Order_Rule "price" comparator=comparator
                 table.sort by=price_rule
    sort : Text | Column.Column | Order_Rule | Vector.Vector (Text | Column.Column | Order_Rule) -> Sort_Order -> Boolean -> Table
    sort by order=Sort_Order.Ascending missing_last=True = Panic.recover <|
        rules = this.build_java_order_rules by order missing_last
        fallback_cmp = here.comparator_to_java .compare_to
        mask = OrderBuilder.buildOrderMask rules.to_array fallback_cmp
        new_table = this.java_table.applyMask mask
        Table new_table

    ## PRIVATE

       Transforms order rules from Enso into Java.

       Arguments:
       - rules: The rule(s) to convert.
       - order: The sorting order.
       - missing_last: Whether or not missing values should be ordered last.
    build_java_order_rules : (Text | Column.Column. | Order_Rule | Vector (Text | Column.Column | Order_Rule)) -> Sort_Order -> Boolean -> Vector
    build_java_order_rules rules order missing_last = case rules of
        Text -> [this.build_java_order_rule rules order missing_last]
        Column.Column _ -> [this.build_java_order_rule rules order missing_last]
        Order_Rule _ _ _ _ -> [this.build_java_order_rule rules order missing_last]
        Vector.Vector _ -> rules.map (this.build_java_order_rule _ order missing_last)

    ## PRIVATE

       Builds a java order rule.

       Arguments:
       - rule: The rule to convert.
       - order: The sort order.
       - missing_last: Whether or not missing values should be ordered last.
    build_java_order_rule : (Text | Column.Column | Order_Rule) -> Sort_Order -> Boolean -> OrderRule
    build_java_order_rule rule order missing_last =
        order_bool = case order of
            Sort_Order.Ascending -> True
            Sort_Order.Descending -> False
        case rule of
            Text ->
                column = Panic.rethrow (this.at rule)
                OrderBuilder.OrderRule.new column.java_column Nothing order_bool missing_last
            Column.Column c ->
                OrderBuilder.OrderRule.new c Nothing order_bool missing_last
            Order_Rule col_ref cmp rule_order rule_nulls_last ->
                c = case col_ref of
                    Text -> this.at col_ref . java_column
                    Column.Column c -> c
                o = case rule_order of
                    Nothing -> order_bool
                    Sort_Order.Ascending -> True
                    Sort_Order.Descending -> False
                nulls = case rule_nulls_last of
                    Nothing -> missing_last
                    _ -> rule_nulls_last
                java_cmp = case cmp of
                    Nothing -> Nothing
                    c -> here.comparator_to_java c
                OrderBuilder.OrderRule.new c java_cmp o nulls

    ## UNSTABLE

       Concatenates `other` to `this`.

       Arguments:
       - other: The table to concatenate to `this`.

       Any column that is present in one table, but missing in another, will be
       `Nothing`-padded in the positions corresponding to the missing column.

       > Example
         Concatenate two tables together.

             import Standard.Examples

             example_concat =
                 Examples.inventory_table.concat Examples.popularity_table
    concat : Table -> Table
    concat other = Table (Java_Table.concat [this.java_table, other.java_table].to_array)

    ## ALIAS First N Rows
       UNSTABLE

       Returns a table containing the first `count` elements in this table.

       Arguments:
       - count: The number of elements to take from the start of this table.

       If `this` has a number of rows in it less than `count`, the entire table
       will be returned.

       > Example
         Get the first four rows from the table.

             import Standard.Examples

             example_take_start = Examples.inventory_table.take_start 4
    take_start : Integer -> Table
    take_start count = Table (this.java_table.slice 0 count)

    ## ALIAS Last N Rows
       UNSTABLE

       Returns a table containing the last `count` elements in this table.

       Arguments:
       - count: The number of elements to take from the end of this table.

       If `this` has a number of rows in it less than `count`, the entire table
       will be returned.

       > Example
         Get the last four rows from the table.

             import Standard.Examples

             example_take_end = Examples.inventory_table.take_end 4
    take_end : Integer -> Table
    take_end count =
        start_point = Math.max (this.row_count - count) 0
        Table (this.java_table.slice start_point count)

    ## ALIAS First Row
       UNSTABLE

       Returns the first row in the table, if it exists.

       If the table is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the first row from the table.

             import Standard.Examples

             example_first = Examples.inventory_table.first
    first : Table ! Empty_Error
    first =
        table = this.take_start 1
        if table.row_count != 1 then Error.throw Empty_Error else table

    ## UNSTABLE

       Returns the first row in the table, if it exists.

       If the table is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the first row from the table.

             import Standard.Examples

             example_head = Examples.inventory_table.head
    head : Table ! Empty_Error
    head = this.first

    ## ALIAS Last Row
       UNSTABLE

       Returns the last row in the table, if it exists.

       If the table is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the last row from the table.

             import Standard.Examples

             example_last = Examples.inventory_table.last
    last : Table ! Empty_Error
    last =
        table = this.take_end 1
        if table.row_count != 1 then Error.throw Empty_Error else table

    ## UNSTABLE

       Returns a table containing the rows of `this` table with their order
       reversed.

       > Example
         Reverse the rows in a table.

             import Standard.Examples

             example_reverse = Examples.inventory_table.reverse
    reverse : Table
    reverse =
        mask = OrderBuilder.buildReversedMask this.row_count
        Table <| this.java_table.applyMask mask

    ## UNSTABLE

       Returns a Text containing this table serialized to CSV.

       Arguments:
       - include_header: Specifies whether the first line of generated CSV
         should contain the column names.
       - always_quote: Specifies whether all fields in the resulting CSV should
         be quoted. When this is set to `False`, only the fields containing the
         `separator` in their contents will be quoted.
       - separator: a sequence used to separate fields within a single row.
       - line_ending: the style of line-endings to use in the generated CSV.

       > Example
         Convert a table to CSV.

             import Standard.Examples

             example_to_csv = Examples.inventory_table.to_csv
    to_csv : Boolean -> Boolean -> Text -> Line_Ending_Style.Line_Ending_Style -> Text
    to_csv include_header=True always_quote=False separator=',' line_ending=Line_Ending_Style.Unix =
        Csv_Writer.writeString this.java_table include_header always_quote line_ending.to_text separator .to_csv_field

    ## ALIAS Write CSV
       UNSTABLE

       Serializes this table into CSV and writes it to the specified file.

       Arguments:
       - file: the file to write the generated CSV contents to. Note that other
         files may be created or written to if `max_rows_per_file` is used.
       - include_header: Specifies whether the first line of generated CSV
         should contain the column names.
       - always_quote: Specifies whether all fields in the resulting CSV should
         be quoted. When this is set to `False`, only the fields containing the
         `separator` in their contents will be quoted.
       - separator: a sequence used to separate fields within a single row.
       - line_ending: the style of line-endings to use in the generated CSV.
       - max_rows_per_file: specifies the maximum number of rows that can be
         written to a single file. If this option is set and its value is less
         than the number of rows in this table, the behavior of the `file`
         argument changes. Instead of writing the contents directly to `file`,
         its name is parsed and a numbered series of files with names based
         on `file` is written to instead. For example, if `file` points to
         `~/my_data/output.csv`, `this` contains 250 rows, and
         `max_rows_per_file` is set to `100`, 3 different files will be written:
         - `~/my_data/output_1.csv`, containing rows 0 through 99;
         - `~/my_data/output_2.csv`, containing rows 100 through 199;
         - `~/my_data/output_3.csv`, containing rows 200 through 249.

       > Example
         Write a table to a CSV file.

             import Standard.Examples

             example_to_csv = Examples.inventory_table.write_csv (Enso_Project.data / example_csv_output.csv)
    write_csv : File.File -> Boolean -> Boolean -> Text -> Line_Ending_Style.Line_Ending_Style -> Nothing | Integer -> Nothing
    write_csv file include_header=True always_quote=False separator=',' line_ending=Line_Ending_Style.Unix max_rows_per_file=Nothing =
        Csv_Writer.writePath this.java_table file.absolute.path max_rows_per_file include_header always_quote line_ending.to_text separator .to_csv_field

    ## ALIAS Write Excel File
       UNSTABLE

       Writes this table into an XLSX spreadsheet.

       Arguments:
       - file: the XLSX file to write data to. If it exists, the behavior is
         specified by the `write_mode` argument. Note that other files may be
         created or written to if `max_rows_per_file` is used.
       - sheet: the name of the sheet to use for writing the data.
       - write_mode: specifies this method's behavior if the specified file and
         sheet already exist. Can be one of:
         - Spreadsheet_Write_Mode.Create: this is the default value. This
           setting will create a new sheet in the file, with a name chosen such
           that the clash is avoided.
         - Spreadsheet_Write_Mode.Overwrite: will result in removing all
           contents of the existing sheet and replacing it with the new data.
         - Spreadsheet_Write_Mode.Append: will append this data to the existing
           sheet, such that the new data starts after the last row containing
           any data.
       - include_header: Specifies whether the first line of generated CSV
         should contain the column names.
       - max_rows_per_file: specifies the maximum number of rows that can be
         written to a single file. If this option is set and its value is less
         than the number of rows in this table, the behavior of the `file`
         argument changes. Instead of writing the contents directly to `file`,
         its name is parsed and a numbered series of files with names based
         on `file` is written to instead. For example, if `file` points to
         `~/my_data/output.xlsx`, `this` contains 250 rows, and
         `max_rows_per_file` is set to `100`, 3 different files will be written:
         - `~/my_data/output_1.xlsx`, containing rows 0 through 99;
         - `~/my_data/output_2.xlsx`, containing rows 100 through 199;
         - `~/my_data/output_3.xlsx`, containing rows 200 through 249.

       > Example
         Write a table to an XLSX file.

             import Standard.Examples

             example_to_xlsx = Examples.inventory_table.write_xlsx (Enso_Project.data / example_xlsx_output.xlsx)
    write_xlsx : File.File -> String -> Spreadsheet_Write_Mode.Speadsheet_Write_Mode -> Boolean -> Nothing | Integer -> Nothing
    write_xlsx file sheet='Data' write_mode=Spreadsheet_Write_Mode.Create include_header=True max_rows_per_file=Nothing =
        Spreadsheet_Writer.writeXlsx this.java_table file.absolute.path sheet write_mode.to_java include_header max_rows_per_file .write_to_spreadsheet

    ## ALIAS Write JSON
       UNSTABLE

       Writes this table to a specified file, serialized into JSON. The JSON
       serialization is such that the result is an array, in which every entry
       is an object representing a single row, with column names as keys.

       Arguments:
       - file: the file to write data to. If the file exists, it will be
         overwritten.

       > Example
         Write a table to a JSON file.

             import Standard.Examples

             example_to_csv = Examples.inventory_table.write_csv (Enso_Project.data / 'example.json')
    write_json : File.File -> Nothing
    write_json file = file.write this.to_json.to_text

    ## UNSTABLE

       Writes the table to a specified file with the given serialization
       settings.

       Arguments:
       - file: the file to write to.
       - format: the format settings to use.


       > Example
         Write a table to a CSV file, without writing the header.

             import Standard.Examples
             import Table

             example_to_csv = Examples.inventory_table.write (Enso_Project.data / "example_csv_output.csv") (Table.Format.Csv include_header=False)

       > Example
         Write a table to an XLSX file, without writing the header.

             import Standard.Examples
             import Table

             example_to_xlsx = Examples.inventory_table.write (Enso_Project.data / "example_xlsx_output.xlsx") (Table.Format.Xlsx include_header=False)

       > Example
         Write a table to a JSON file.

             import Standard.Examples
             import Table

             example_to_json = Examples.inventory_table.write (Enso_Project.data / "example_output.json") Table.Format.Json
    write : File.File -> Format.Format -> Nothing
    write file format = case format of
        Format.Csv header quote sep line max -> this.write_csv file header quote sep line max
        Format.Xlsx sheet mode header max -> this.write_xlsx file sheet mode header max
        Format.Json -> this.write_json file


## UNSTABLE

   Used for converting arbitrary values into fields in CSV files.
   This default implementation delegates to the `to_text` method.
Any.to_csv_field = this.to_text

## UNSTABLE

   Used for converting text values into fields in CSV files.
Text.to_csv_field = this

## UNSTABLE
   ADVANCED

   Used to write a value into a spreadsheet cell.

   Arguments:
   - cell: an instance of `org.apache.poi.ss.usermodel.Cell`, the value of
     which should be set by this method.
Any.write_to_spreadsheet cell = cell.setCellValue this.to_text

## UNSTABLE
   ADVANCED

   Used to write a value into a spreadsheet cell.

   Arguments:
   - cell: an instance of `org.apache.poi.ss.usermodel.Cell`, the value of
     which should be set by this method.
Text.write_to_spreadsheet cell = cell.setCellValue this

## UNSTABLE
   ADVANCED

   Used to write a value into a spreadsheet cell.

   Arguments:
   - cell: an instance of `org.apache.poi.ss.usermodel.Cell`, the value of
     which should be set by this method.
Date.Date.write_to_spreadsheet cell = cell.setCellValue this.internal_local_date



## Represents a table with grouped rows.
type Aggregate_Table

    ## PRIVATE

       A table type with grouped rows.

       Arguments:
       - java_table: The internal representation of the table.
    type Aggregate_Table java_table

    ## Returns a vector of aggregate columns in this table.

       > Example
         Get a vector of aggregate columns from this table.

             import Standard.Examples

             example_columns = Examples.aggregate_table.columns
    columns : Vector.Vector
    columns = Vector.Vector this.java_table.getColumns . map Column.Aggregate_Column

    ## Returns a table containing columns resulting from calling `values` on
       each column in `this`.

       > Example
         Get the values table from an aggregate table.

             import Standard.Examples

             example_values = Examples.aggregate_table.values
    values : Table
    values = this.columns . map (_.values name_suffix='') . reduce .join

    ## Returns a column containing the number of elements in each group of the
       aggregate table.

       > Examples
         Get the counts for an aggregate table.

             import Standard.Examples

             example_count = Examples.aggregate_table.count
    count : Column
    count = Column.Column this.java_table.count

    ## ALIAS Get a Column

       Returns an aggregate column with the given name, contained in this table.

       Arguments:
       - name: The name of the aggregate column to get.

       > Example
         Get the transaction ids column from the aggregate table.

             import Standard.Examples

             example_at = Examples.aggregate_table.at "transaction_id"
    at : Text -> Column ! No_Such_Column_Error
    at name = case this.java_table.getColumnByName name of
        Nothing -> Error.throw (No_Such_Column_Error name)
        c -> Column.Aggregate_Column c

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.

       > Example
         Pretty-print and display an aggregate table in the console.

             import Standard.Examples

             example_print = Examples.aggregate_table.print
    print : Integer -> Nothing
    print show_rows=10 = this.values.print show_rows

## UNSTABLE

   An error returned when a non-existent column is being looked up.

   Arguments:
   - column_name: The name of the column that doesn't exist.
type No_Such_Column_Error column_name

## UNSTABLE

   Create a human-readable version of the no such column error.
No_Such_Column_Error.to_display_text : Text
No_Such_Column_Error.to_display_text =
    "The column " + this.column_name + " does not exist."

## UNSTABLE

   An error returned when getting an index but no index is set for that table.
type No_Index_Set_Error

## UNSTABLE

   Create a human-readable version of the no such column error.
No_Index_Set_Error.to_display_text : Text
No_Index_Set_Error.to_display_text = "The table does not have an index set."

## UNSTABLE

   An error returned when the table contains no rows.
type Empty_Error

## UNSTABLE

   Pretty prints the error.
Empty_Error.to_display_text : Text
Empty_Error.to_display_text = "The table is empty."

## PRIVATE
from_columns cols = Table (Java_Table.new cols.to_array)

## PRIVATE

   Ensures that the `txt` has at least `len` characters by appending spaces at
   the end.

   Arguments:
   - txt: The text to pad.
   - len: The minimum length of the text.
pad : Text -> Integer -> Text
pad txt len =
    true_len = txt.characters.length
    txt + (" ".repeat (len - true_len))

## PRIVATE

   Adds ANSI bold escape sequences to text if the feature is enabled.

   Arguments:
   - txt: The text to possibly bold.
ansi_bold_enabled : Text -> Text
ansi_bold enabled txt =
    case Platform.os of
        ## Output formatting for Windows is not currently supported.
        Platform.Windows -> txt
        _ -> if enabled then '\e[1m' + txt + '\e[m' else txt

## PRIVATE

   A helper function for creating an ASCII-art representation of tabular data.

   Arguments:
   - header: vector of names of columns in the table.
   - rows: a vector of rows, where each row is a vector that contains a text
     representation of each cell
   - indices_count: the number specifying how many columns should be treated as
     indices; this will make them in bold font if `format_term` is enabled.
   - format_term: a boolean flag, specifying whether to use ANSI escape codes
     for rich formatting in the terminal.
print_table : Vector Text -> (Vector (Vector Text)) -> Integer -> Boolean -> Text
print_table header rows indices_count format_term =
    content_lengths = Vector.new header.length i->
        max_row = 0.up_to rows.length . fold 0 a-> j-> Math.max a (rows.at j . at i . characters . length)
        Math.max max_row (header.at i . characters . length)
    header_line = header.zip content_lengths here.pad . map (here.ansi_bold format_term) . join ' | '
    divider = content_lengths . map (l -> "-".repeat l+2) . join '+'
    row_lines = rows.map r->
        x = r.zip content_lengths here.pad
        ixes = x.take_start indices_count . map (here.ansi_bold format_term)
        with_bold_ix = ixes + x.drop_start indices_count
        y = with_bold_ix . join ' | '
        " " + y
    ([" " + header_line, divider] + row_lines).join '\n'

## PRIVATE

   Wraps the Enso comparator function so it's usable in Java.

   Arguments:
   - cmp: The Enso comparator function.
   - x: The left operand to the compartor.
   - y: The right operand to the comparator.
comparator_to_java : (Any -> Any -> Ordering) -> Any -> Any -> Integer
comparator_to_java cmp x y = cmp x y . to_sign
