from Standard.Base import all

import Standard.Table.Data.Table
import Standard.Table.Data.Storage

polyglot java import org.enso.table.data.table.Column as Java_Column
polyglot java import org.enso.table.operations.OrderBuilder

## Creates a new column given a name and a vector of elements.

   Arguments:
   - name: The name of the column to create.
   - items: The elements to contain in the column.

   > Example
     Create a new column called "My Column" from a vector of numbers.

         import Standard.Table

         example_from_vector =
             Table.Column.from_vector "My Column" [1, 2, 3, 4, 5]
from_vector : Text -> Vector -> Column
from_vector name items = Column (Java_Column.fromItems name items.to_array)

type Column

    ## PRIVATE

       A representation of a column in a Table.

       Arguments:
       - java_column: The internal representation of the column.
    type Column java_column

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.
       - format_terminal: whether ANSI-terminal formatting should be used

       > Example
         Convert a column to a pretty-printed text representation.

             import Standard.Examples

             example_display = Examples.integer_column.display
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        java_col = this.java_column
        index = java_col.getIndex
        col_name = java_col.getName
        storage = java_col.getStorage
        num_rows = java_col.getSize
        display_rows = Math.min num_rows show_rows
        items = Vector.new display_rows num->
            row = if storage.isNa num then "Nothing" else
                here.get_item_string storage num
            [index.ilocString num, row]
        table = Table.print_table [index.getName, col_name] items 1 format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## TEXT_ONLY

       Prints an ASCII-art table with this data to the standard output.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.

       > Example
         Convert a column to a pretty-printed text representation and print it
         to the console.

             import Standard.Examples

             example_display = Examples.integer_column.print
    print : Integer -> Nothing
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Element-wise equality comparison.

       Arguments:
       - other: The value to compare `this` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise equality.

             import Standard.Examples

             example_eq = Examples.integer_column == Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_eq = Examples.integer_column == 1
    == : Column | Any -> Column
    == other =
        here.run_vectorized_binary_op this "==" (==) other

    ## Element-wise non-equality comparison.

       Arguments:
       - other: The value to compare `this` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise inequality.

             import Standard.Examples

             example_neq = Examples.integer_column != Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_neq = Examples.integer_column != 1
    != : Column | Any -> Column
    != other = (this == other).not

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `this` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise greater-than-or-equal.

             import Standard.Examples

             example_geq = Examples.integer_column >= Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_geq = Examples.integer_column >= 1
    >= : Column | Any -> Column
    >= other =
        here.run_vectorized_binary_op this ">=" (>=) other

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `this` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise less-than-or-equal.

             import Standard.Examples

             example_leq = Examples.integer_column <= Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_leq = Examples.integer_column <= 1
    <= : Column | Any -> Column
    <= other =
        here.run_vectorized_binary_op this "<=" (<=) other

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `this` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise greater-than.

             import Standard.Examples

             example_gt = Examples.integer_column > Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_gt = Examples.integer_column > 1
    > : Column | Any -> Column
    > other =
        here.run_vectorized_binary_op this ">" (>) other

    ## Element-wise order comparison.

       Arguments:
       - other: The value to compare `this` against. If `other` is a column, the
         comparison is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of comparing this column's elements against
       `other`.

       > Example
         Compare two columns for pairwise less-than.

             import Standard.Examples

             example_lt = Examples.integer_column < Examples.decimal_column

       > Example
         Compare a column with a number.

             import Standard.Examples

             example_lt = Examples.integer_column < 1
    < : Column | Any -> Column
    < other = here.run_vectorized_binary_op this "<" (<) other

    ## ALIAS Add Columns

       Element-wise addition.

       Arguments:
       - other: The value to add to `this`. If `other` is a column, the addition
         is performed pairwise between corresponding elements of `this` and
         `other`.

       Returns a column with results of adding `other` from each element of
       `this`.

       > Example
         Add two columns to each other.

             import Standard.Examples

             example_plus = Examples.decimal_column + Examples.integer_column

       > Example
         Add a single value to each item in a column.

             import Standard.Examples

             example_plus = Examples.integer_column + 10
    + : Column | Any -> Column
    + other = here.run_vectorized_binary_op this '+' (+) other

    ## ALIAS Subtract Columns

       Element-wise subtraction.

       Arguments:
       - other: The value to subtract from `this`. If `other` is a column, the
         subtraction is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column with results of subtracting `other` from each element of
       `this`.

       > Example
         Subtract one column from another.

             import Standard.Examples

             example_minus = Examples.decimal_column - Examples.integer_column

       > Example
         Subtract a single value from each item in a column.

             import Standard.Examples

             example_minus = Examples.integer_column - 10
    - : Column | Any -> Column
    - other = here.run_vectorized_binary_op this '-' (-) other

    ## ALIAS Multiply Columns

       Element-wise multiplication.

       Arguments:
       - other: The value to multiply `this` by. If `other` is a column, the
         multiplication is performed pairwise between corresponding elements of
         `this` and `other`.

       Returns a column containing the result of multiplying each element of
       `this` by `other`.

       > Example
         Multiply the elements of two columns together.

             import Standard.Examples

             example_mul = Examples.decimal_column * Examples.integer_column

       > Example
         Multiply each value in a column by a single value.

             import Standard.Examples

             example_mul = Examples.integer_column * 10
    * : Column | Any -> Column
    * other = here.run_vectorized_binary_op this '*' (*) other

    ## ALIAS Divide Columns

       Element-wise division.

       Arguments:
       - other: The value to divide `this` by. If `other` is a column, the
         division is performed pairwise between corresponding elements of `this`
         and `other`.

       Returns a column containing the result of dividing each element of `this`
       by `other`.

       > Example
         Divide the elements of one column by the elements of another.

             import Standard.Examples

             example_div = Examples.decimal_column / Examples.integer_column

       > Example
         Multiply each value in a column by a single value.

             import Standard.Examples

             example_div = Examples.integer_column / 10
    / : Column | Any -> Column
    / other = here.run_vectorized_binary_op this '/' (/) other

    ## ALIAS AND Columns

       Element-wise boolean conjunction.

       Arguments:
       - other: The value to compute the conjunction of `this` with. If `other`
         is a column, the conjunction is performed pairwise between
         corresponding elements of `this` and `other`.

       Returns a column containing the result of performing boolean `and` on
       each element of `this` and `other`.

       > Example
         Compute the pairwise logical conjunction to two columns.

             import Standard.Examples

             example_and = Examples.bool_column_1 && Examples.bool_column_2

       > Example
         Compute the logical conjunction of each value in a column with a single
         value.

             import Standard.Examples

             example_and = Examples.bool_column_1 && True
    && : Column | Any -> Column
    && other =
        here.run_vectorized_binary_op this "&&" (&&) other

    ## ALIAS OR Columns

       Element-wise boolean disjunction.

       Arguments:
       - other: The value to compute the disjunction of `this` with. If `other`
         is a column, the disjunction is performed pairwise between
         corresponding elements of `this` and `other`.

       Returns a column containing the result of performing the boolean `or` on
       each element of `this` and `other`.

       > Example
         Compute the pairwise logical disjunction to two columns.

             import Standard.Examples

             example_or = Examples.bool_column_1 || Examples.bool_column_2

       > Example
         Compute the logical disjunction of each value in a column with a single
         value.

             import Standard.Examples

             example_or = Examples.bool_column_1 || True
    || : Column | Any -> Column
    || other =
        here.run_vectorized_binary_op this "||" (||) other

    ## ALIAS NOT Columns

       Boolean negation of each element in this column.

       > Example
         Negate the elements of a column.

             import Standard.Examples

             example_not = Examples.bool_column_1.not
    not : Column
    not = here.run_vectorized_unary_op this "not" .not

    ## Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.

       > Example
         Check a column for missing values.

             import Standard.Examples

             example_is_missing = Examples.decimal_column.is_missing
    is_missing : Column
    is_missing = here.run_vectorized_unary_op this "is_missing" (== Nothing)

    ## Returns a column of booleans, with `True` items at the positions where
       this column does not contain a `Nothing`.

       > Example
         Check a column for present values.

             import Standard.Examples

             example_is_present = Examples.decimal_column.is_present
    is_present : Column
    is_present = this.is_missing.not

    ## ALIAS Fill Missing

       Returns a new column where missing values have been replaced with the
       provided default.

       Arguments:
       - default: The value to replace missing values with. If this argument
         is a column, the value from `default` at the corresponding position
         will be used.

       > Example
         Fill missing values in a column with the value 20.5.

             import Standard.Examples

             example_fill_missing = Examples.decimal_column.fill_missing 20.5
    fill_missing : Column | Any -> Column
    fill_missing default =
        storage = this.java_column.getStorage
        index = this.java_column.getIndex
        name = this.java_column.getName
        new_st = case default of
            Column java_col ->
                other_storage = java_col.getStorage
                storage.fillMissingFrom other_storage
            _ ->
                storage.fillMissing default
        col = Java_Column.new name index new_st
        Column col

    ## ALIAS Drop Missing

       Returns a new column without rows that had missing values.

       > Example
         Drop missing values from a column.

             import Standard.Examples

             example_drop_missing = Examples.decimal_column.drop_missing
    drop_missing : Any -> Column
    drop_missing =
        this.where this.is_missing.not

    ## Checks for each element of the column if it starts with `other`.

       Arguments:
       - other: The value to compare `this` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `this` and `other`.

       > Example
         Check the elements of a column for starting with the elements of
         another column.

             import Standard.Examples

             example_starts_with =
                Examples.text_column_1.starts_with Examples.text_column_2

       > Example
         Check the elements of a column for starting with a value.

             import Standard.Examples

             example_starts_with = Examples.text_column_1.starts_with "hell"
    starts_with : Column | Text -> Column
    starts_with other =
        here.run_vectorized_binary_op this "starts_with" (a -> b -> a.starts_with b) other

    ## Checks for each element of the column if it ends with `other`.

       Arguments:
       - other: The value to compare `this` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `this` and `other`.

       > Example
         Check the elements of a column for ending with the elements of another
         column.

             import Standard.Examples

             example_ends_with =
                Examples.text_column_1.ends_with Examples.text_column_2

       > Example
         Check the elements of a column for ending with a value.

             import Standard.Examples

             example_ends_with = Examples.text_column_1.ends_with "hell"
    ends_with : Column | Text -> Column
    ends_with other =
        here.run_vectorized_binary_op this "ends_with" (a -> b -> a.ends_with b) other

    ## Checks for each element of the column if it contains `other`.

       Arguments:
       - other: The value to compare `this` with. If `other` is a column, the
         operation is performed pairwise between corresponding elements of
         `this` and `other`.

       > Example
         Check the elements of a column for containing the elements of another
         column.

             import Standard.Examples

             example_contains =
                 Examples.text_column_1.contains Examples.text_column_2

       > Example
         Check the elements of a column for containing a value.

             import Standard.Examples

             example_contains = Examples.text_column_1.contains "hell"
    contains : Column | Text -> Column
    contains other =
        here.run_vectorized_binary_op this "contains" (a -> b -> a.contains b) other

    ## ALIAS Transform Column

       Applies `function` to each item in this column and returns the column
       of results.

       Arguments:
       - function: The function to apply to each element of `this` column.

       > Example
         Multiply each element of the column by itself.

             import Standard.Examples

             example_map = Examples.integer_column.map (x -> x * x)
    map : (Any -> Any) -> Column
    map function =
        storage = this.java_column.getStorage
        index = this.java_column.getIndex
        new_st = storage.map Nothing function
        col = Java_Column.new "Result" index new_st
        Column col

    ## ALIAS Transform Columns

       Applies `function` to consecutive pairs of elements of `this` and `that`
       and returns a column of results.

       Arguments:
       - that: The column to zip with `this`.
       - function: A binary function that is applied to corresponding pairs of
         elements of `this` and `that` to produce a value.
       - skip_missing: controls whether missing values should be passed to the
         `function`. The default value of `True` will skip the rows for which
         the value in either column is missing and automatically append
         `Nothing` to the result table. If set to `False`, every pair of values
         is passed to `function`.

       > Example
         Zip two columns together as pairs.

             import Standard.Examples

             example_zip =
                Examples.integer_column.zip Examples.text_column_1 [_, _]
    zip : Column -> (Any -> Any -> Any) -> Boolean -> Column
    zip that function skip_missing=True =
        s1 = this.java_column.getStorage
        ix = this.java_column.getIndex
        s2 = that.java_column.getStorage
        rs = s1.zip Nothing function s2 skip_missing
        Column (Java_Column.new "Result" ix rs)

    ## ALIAS Rename Column

       Returns a new column, containing the same elements as `this`, but with
       the given name.

       Arguments:
       - name: The new name for the column.

       > Example
         Rename a column.

             import Standard.Examples

             example_rename = Examples.integer_column.rename "My Numbers"
    rename : Text -> Column
    rename name = Column (this.java_column.rename name)

    ## Returns the name of this column.

       > Example
         Get the name of a column.

             import Standard.Examples

             example_name = Examples.text_column_2.name
    name : Text
    name = this.java_column.getName

    ## Returns the length of this column.

       > Example
         Get the length of a column.

             import Standard.Examples

             example_length = Examples.text_column_2.length
    length : Integer
    length = this.java_column . getSize

    ## Returns the number of missing items in this column.

       > Example
         Count the number of missing values in a column.

             import Standard.Examples

             example_count_missing = Examples.text_column_2.count_missing
    count_missing : Integer
    count_missing = this.java_column.getStorage.countMissing

    ## Returns the number of non-null items in this column.

       > Example
         Count the number of not missing values in a column.

             import Standard.Examples

             example_count = Examples.text_column_2.count
    count : Integer
    count = this.length - this.count_missing

    ## Returns the index of this column, as a column (indexed by itself).

       Throws `No_Index_Set_Error` if there is no index set.

       > Example
         Get the index from a column.

             import Standard.Examples

             example_index = Examples.decimal_column.index
    index : Column ! Table.No_Index_Set_Error
    index = case this.java_column.getIndex.toColumn of
        Nothing -> Error.throw Table.No_Index_Set_Error
        i -> Column i

    ## Sets the index of this column, using the provided column.

       Arguments:
       - index: The column to use as the index to this column.

       > Example
         Index the decimal column by the integer column.

             import Standard.Examples

             example_set_index =
                Examples.decimal_column.set_index Examples.integer_column
    set_index : Column -> Column
    set_index index = Column (this.java_column.setIndex index.java_column)

    ## Returns the value contained in this column at the given index.

       Arguments:
       - index: The index in the column from which to get the value.

       If the value is an NA then this method returns nothing. If the index is
       not an index in the column it returns an `Index_Out_Of_Bounds_Error`.

       > Example
         Get the first element from a column.

             import Standard.Examples

             example_at = Examples.integer_column.at 0
    at : Integer -> (Any | Nothing) ! Index_Out_Of_Bounds_Error
    at index =
        valid_index = (index >= 0) && (index < this.length)
        if valid_index.not then Error.throw (Index_Out_Of_Bounds_Error index this.length) else
            storage = this.java_column.getStorage
            if storage.isNa index then Nothing else
                storage.getItem index

    ## Selects only the rows of this column that correspond to `True` values in
       `indexes`.

       Arguments:
       - indexes: A column containing boolean values that is used to mask
         `this`.

       This is useful for filtering the rows by given predicate.

       > Example
         Select only the rows of the column where the length of the text exceeds
         2.

             import Standard.Examples

             example_where =
                 Examples.text_column_1.where (Examples.text_column_1.map .length > 2)
    where : Column -> Column
    where indexes =
        Column (this.java_column.mask indexes.java_column)

    ## Returns a vector containing all the elements in this column.

       > Example
         Get the elements of a column as a vector.

             import Standard.Examples

             example_to_vector = Examples.integer_column.to_vector
    to_vector : Vector
    to_vector = Vector.Vector this.java_column.getStorage.toList

    ## Returns the underlying storage type of this column.

       > Example
         Get the storage type of a column.

             import Standard.Examples

             example_storage_type = Examples.integer_column.storage_type
    storage_type : Storage.Type
    storage_type =
        tp = this.java_column.getStorage.getType
        if tp == Storage_Type_String then Storage.Text else
            if tp == Storage_Type_Long then Storage.Integer else
                if tp == Storage_Type_Double then Storage.Decimal else
                    if tp == Storage_Type_Bool then Storage.Boolean else
                        Storage.Any

    ## UNSTABLE

       Converts this column to JSON.

       > Example
         Get a JSON representation of the column.

             import Standard.Examples

             example_to_json = Examples.integer_column.to_json
    to_json : Json
    to_json =
        col = this.java_column
        name = col.getName
        storage = col.getStorage
        json_factory = case this.storage_type of
            Storage.Text -> Json.String
            Storage.Integer -> Json.Number
            Storage.Decimal -> Json.Number
            Storage.Boolean -> Json.Boolean
            _ -> .to_json
        storage_json = Json.Array (here.storage_to_json storage json_factory)
        fields = Map.singleton "name" (Json.String name) . insert "data" storage_json
        Json.Object fields

    ## Efficiently joins two tables based on either the index or the specified
       key column.

       Arguments:
       - other: the table being the right operand of this join operation.
       - on: the column of `this` that should be used as the join key. If this
         argument is not provided, the index of `this` will be used.
       - drop_unmatched: whether the rows of `this` without corresponding
         matches in `other` should be dropped from the result.
       - left_suffix: a suffix that should be added to the columns of `this`
         when there's a name conflict with a column of `other`.
       - right_suffix: a suffix that should be added to the columns of `other`
         when there's a name conflict with a column of `this`.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index values in `other` are not
       unique, the corresponding rows of `this` will be duplicated in the
       result.

       > Example
         Join two columns on their indices.

             import Standard.Examples

             example_join = Examples.integer_column.join Examples.bool_column_1
    join : Table.Table | Column -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        this.to_table.join other on drop_unmatched left_suffix right_suffix

    ## Converts this column into a single-column table.

       > Example
         Convert a column to a table.

             import Standard.Examples

             example_to_table = Examples.integer_column.to_table
    to_table : Table.Table
    to_table = Table.Table this.java_column.toTable

    ## UNSTABLE
       ADVANCED

       Shows a JSON serialization of a truncated version of this column, for the
       benefit of visualization in the IDE.
    to_default_visualization_data : Text
    to_default_visualization_data =
        size = ['length', this.length]
        name = ['name', this.name]
        max_data = 100
        data = ['data', this.to_vector.take_start max_data]
        Json.from_pairs [size, name, data] . to_text

    ## ALIAS Sum Columns

       Sums the values in this column.

       > Example
         Sum the values in a column.

             import Standard.Examples

             example_sum = Examples.integer_column.sum
    sum : Any
    sum = this.java_column.aggregate 'sum' (x-> Vector.Vector x . reduce (+)) True

    ## ALIAS Max Columns

       Computes the maximum element of this column.

       > Example
         Compute the maximum value of a column.

             import Standard.Examples

             example_max = Examples.integer_column.max
    max : Any
    max =
        this.java_column.aggregate 'max' (x-> Vector.Vector x . reduce Math.max) True

    ## ALIAS Min Columns

       Computes the minimum element of this column.

       > Example
         Compute the minimum value of a column.

             import Standard.Examples

             example_min = Examples.integer_column.min
    min : Any
    min =
        this.java_column.aggregate 'min' (x-> Vector.Vector x . reduce Math.min) True

    ## ALIAS Mean Columns

       Computes the mean of non-missing elements of this column.

       > Example
         Compute the mean value of a column.

             import Standard.Examples

             example_mean = Examples.integer_column.mean
    mean : Any
    mean =
        vec_mean v = if v.length == 0 then Nothing else
            (Vector.Vector v).reduce (+) / v.length
        this.java_column.aggregate 'mean' vec_mean True

    ## UNSTABLE

       Sorts the column according to the specified rules.

       Arguments:
       - order: specifies the default sort order for this operation.
       - missing_last: specifies the default placement of missing values when
         compared to non-missing ones. Note thet this argument is independent
         from `order`, i.e. missing values will always be sorted according to
         this rule, ignoring the ascending / descending setting.
       - comparator: function taking two items in this column and returning
         an ordering. If specified, it is used instead of the natural
         (`.compare_to`) ordering.

       > Example
         Sorting a column in ascending order.

             import Standard.Examples

             example_sort = Examples.integer_column.sort

       > Example
         Sorting a column in descending order, placing missing values at the
         top of the resulting column.

             import Standard.Examples

             example_sort =
                 Examples.integer_column.sort order=Sort_Order.Descending missing_last=False

       > Example
         Sorting `column` in ascending order, using a custom comparator
         function.

             import Standard.Examples

             example_sort =
                 my_comparator a b = a.abs.compare_to b.abs
                 Examples.decimal_column.sort comparator=my_comparator
    sort : Sort_Order -> Boolean -> (Any -> Any -> Ordering) | Nothing -> Column
    sort order=Sort_Order.Ascending missing_last=True comparator=Nothing =
        order_bool = case order of
            Sort_Order.Ascending -> True
            Sort_Order.Descending -> False
        java_cmp = case comparator of
            Nothing -> Nothing
            cmp -> Table.comparator_to_java cmp
        rule = OrderBuilder.OrderRule.new this.java_column java_cmp order_bool missing_last
        fallback_cmp = Table.comparator_to_java .compare_to
        mask = OrderBuilder.buildOrderMask [rule].to_array fallback_cmp
        new_col = this.java_column.applyMask mask
        Column new_col

    ## UNSTABLE

       Returns a column containing the first `count` elements in this column.

       Arguments:
       - count: The number of elements to take from the start of this column.

       If `this` has a number of items in it less than `count`, the entire
       column will be returned.

       > Example
         Take the first 2 elements of a column.

             import Standard.Examples

             example_take_start = Examples.integer_column.take_start 2
    take_start : Integer -> Column
    take_start count =
        Column (this.java_column.slice 0 count)

    ## UNSTABLE

       Returns a column containing the last `count` elements in this column.

       Arguments:
       - count: The number of elements to take from the end of this column.

       If `this` has a number of items in it less than `count`, the entire
       column will be returned.

       > Example
         Take the last 2 elements of a column.

             import Standard.Examples

             example_take_end = Examples.integer_column.take_end 2
    take_end : Integer -> Column
    take_end count =
        start_point = Math.max (this.length - count) 0
        Column (this.java_column.slice start_point count)

    ## UNSTABLE

       Returns the first element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the first element of a column.

             import Standard.Examples

             example_first = Examples.integer_column.first
    first : Any ! Empty_Error
    first = this.at 0 . catch (_ -> Error.throw Empty_Error)

    ## UNSTABLE

       Returns the first element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the first element of a column.

             import Standard.Examples

             example_head = Examples.integer_column.head
    head : Any ! Empty_Error
    head = this.first

    ## UNSTABLE

       Returns the last element in the column, if it exists.

       If the column is empty, this method will return a dataflow error
       containing an `Empty_Error`.

       > Example
         Get the last element of a column.

             import Standard.Examples

             example_last = Examples.integer_column.last
    last : Any ! Empty_Error
    last = this.at (this.length - 1) . catch (_ -> Error.throw Empty_Error)

    ## UNSTABLE

       Returns a column containing the values of `this` column with their order
       reversed.

       > Example
         Reverse the values of a column to produce a new column.

             import Standard.Examples

             example_reverse = Examples.integer_column.reverse
    reverse : Column
    reverse =
        mask = OrderBuilder.buildReversedMask this.length
        Column <| this.java_column.applyMask mask

    ## UNSTABLE

       Returns a column of numbers, in which every entry denotes how many times
       the value at the given position occured before.

       > Example
         Count duplicate occurences of values in a column.

             import Standard.Examples

             example_duplicate_count = Examples.integer_column.duplicate_count
    duplicate_count : Column
    duplicate_count = Column this.java_column.duplicateCount

## Wraps a column grouped by its index. Allows performing aggregation operations
   on the contained values.
type Aggregate_Column

    ## PRIVATE
    type Aggregate_Column java_column

    ## Converts this aggregate column into a column, aggregating groups
       with the provided `function`.

       Arguments:
       - function: the function used for value aggregation. Values belonging to
         each group are passed to this function in a vector.
       - skip_missing: controls whether missing values should be included in
         groups.
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Convert an aggregate column of transaction ids into a column by
         counting the number of transactions. per item.

             import Standard.Examples

             example_reduce =
                 Examples.aggregate_column.reduce .length . rename "transaction_count"
    reduce : (Vector.Vector -> Any) -> Boolean -> Text -> Column
    reduce function skip_missing=True name_suffix="_result" =
        f arr = function (Vector.Vector arr)
        r = this.java_column.aggregate Nothing name_suffix f skip_missing
        Column r

    ## Sums the values in each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Convert an aggregate column of transaction ids into a column by summing
         the transaction IDs together.

             import Standard.Examples

             example_sum = Examples.aggregate_column.sum . rename "id_sum"
    sum : Text -> Column
    sum name_suffix='_sum' =
        r = this.java_column.aggregate 'sum' name_suffix (x-> Vector.Vector x . reduce (+)) True
        Column r

    ## Computes the maximum element of each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Get the latest (maximum ID) transaction id for each item.

             import Standard.Examples

             example_max = Examples.aggregate_column.max . rename "latest_transaction"
    max : Text -> Column
    max name_suffix='_max' =
        r = this.java_column.aggregate 'max' name_suffix (x-> Vector.Vector x . reduce Math.max) True
        Column r

    ## Computes the minimum element of each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Get the earliest (mimumum ID) transaction id for each item.

             import Standard.Examples

             example_min = Examples.aggregate_column.min . rename "first_transaction"
    min : Text -> Column
    min name_suffix='_min' =
        r = this.java_column.aggregate 'min' name_suffix (x-> Vector.Vector x . reduce Math.min) True
        Column r

    ## Computes the number of non-missing elements in each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Count the number of non-missing elements in each group in the column,
         which gives the number of transactions in which a given item was sold.

             import Standard.Examples

             example_count = Examples.aggregate_column.count . rename "transaction_count"
    count : Text -> Column
    count name_suffix='_count' =
        r = this.java_column.aggregate 'count' name_suffix (x-> x.length) True
        Column r

    ## Computes the mean of non-missing elements in each group.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Get the mean transaction id for each item.

             import Standard.Examples

             example_mean = Examples.aggregate_column.mean
    mean : Text -> Column
    mean name_suffix='_mean' =
        vec_mean v = if v.length == 0 then Nothing else
            (Vector.Vector v).reduce (+) / v.length
        r = this.java_column.aggregate 'mean' name_suffix vec_mean True
        Column r

    ## Gathers all elements in a group into a vector and returns a column of
       such vectors.

       Arguments:
       - name_suffix: a suffix that will be appended to the original column name
         to generate the resulting column name.

       > Example
         Gather the values of the aggregate column together.

             import Standard.Examples

             example_values = Examples.aggregate_column.values
    values : Text -> Column
    values name_suffix='_values' =
        r = this.java_column.aggregate Nothing name_suffix Vector.Vector False
        Column r

    ## Prints an ASCII-art column with this data to the standard output.

       Arguments:
       - show_rows: the number of initial rows that should be displayed.

       > Example
         Pretty-print an aggregate column and display it using the standard
         output.

             import Standard.Examples

             example_print = Examples.aggregate_column.print
    print : Nothing
    print = this.values.print

## UNSTABLE

   A type representing an error for an out-of-bounds index in a column.

   Arguments:
   - index: The index of the element requested.
   - length: The length of the column in which `index` was out of bounds.
type Index_Out_Of_Bounds_Error index length

## UNSTABLE

   Pretty-prints the index out of bounds error.
Index_Out_Of_Bounds_Error.to_display_text : Text
Index_Out_Of_Bounds_Error.to_display_text =
    ix_text = this.index.to_text
    len_text = this.length.to_text
    "The index " + ix_text + " is out of bounds in a column of length " + len_text + "."

## UNSTABLE

   An error for when the column contains no elements.
type Empty_Error

## UNSTABLE

   Pretty prints the error.
Empty_Error.to_display_text : Text
Empty_Error.to_display_text = "The column is empty."

## PRIVATE

   Executes a vectorized binary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
   - operand: The operand to apply to the function after `column`.
run_vectorized_binary_op : Column -> Text -> (Any -> Any) -> Any -> Column
run_vectorized_binary_op column name fallback_fn operand = case operand of
    Column col2 ->
        s1 = column.java_column.getStorage
        ix = column.java_column.getIndex
        s2 = col2.getStorage
        rs = s1.zip name fallback_fn s2 True
        Column (Java_Column.new "Result" ix rs)
    _ ->
        s1 = column.java_column.getStorage
        ix = column.java_column.getIndex
        rs = s1.bimap name fallback_fn operand
        Column (Java_Column.new "Result" ix rs)

## PRIVATE

   Executes a vectorized unary operation over the provided column.

   Arguments:
   - column: The column to execute the operation over.
   - name: The name of the vectorized operation.
   - fallback_fn: A function used if the vectorized operation isn't available.
run_vectorized_unary_op : Column -> Text -> (Any -> Any) -> Column
run_vectorized_unary_op column name fallback_fn =
    s = column.java_column.getStorage
    ix = column.java_column.getIndex
    rs = s.map name fallback_fn
    Column (Java_Column.new "Result" ix rs)

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.LONG`
storage_type_long : Integer
storage_type_long = 1

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.DOUBLE`
storage_type_double : Integer
storage_type_double = 2

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.STRING`
storage_type_string : Integer
storage_type_string = 3

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.BOOL`
storage_type_bool : Integer
storage_type_bool = 4

## PRIVATE

   A helper function for converting a column storage to JSON.

   Arguments:
   - storage: The storage to convert to JSON.
   - factory: The factory function for converting the storage.
storage_to_json : Storage -> (Any -> Json) -> Json
storage_to_json storage factory =
    Vector.new storage.size ix->
        if storage.isNa ix then Json.Null else
            factory (storage.getItem ix)

## PRIVATE

   Gets a textual representation of the item at position `ix` in `column`.

   Arguments:
   - column: The column to get the item from.
   - ix: The index in the column from which to get the item.
get_item_string : Column -> Integer -> Text
get_item_string column ix =
    tp = column.getType
    if tp == Storage_Type_String then column.getItem ix else
        column.getItem ix . to_text

