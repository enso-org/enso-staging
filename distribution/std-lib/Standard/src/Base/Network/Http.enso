from Standard.Base import all

import Standard.Base.Data.Json
import Standard.Base.Data.Time.Duration
import Standard.Base.Data.Time.Time
import Standard.Base.Network.Http.Form
import Standard.Base.Network.Http.Header
import Standard.Base.Network.Http.Method
import Standard.Base.Network.Http.Request
import Standard.Base.Network.Http.Request.Body as Request_Body
import Standard.Base.Network.Http.Response
import Standard.Base.Network.Http.Version
import Standard.Base.Network.Proxy
import Standard.Base.Network.Uri
import Standard.Base.System.File

polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpResponse
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import java.net.URI
polyglot java import java.time.Duration as Java_Duration
polyglot java import org.enso.base.Http_Utils

type Http

    type Http timeout follow_redirects proxy version

    ## Send an Options request.

       > Example
         Send an Options request.
             Http.new.options "http://httpbin.org"
    options : To_Uri -> Vector.Vector -> Response
    options uri (headers = []) =
        req = Request.options uri headers
        this.request req

    ## Send a Get request.

       > Example
         Send a Get request.
             Http.new.get "http://httpbin.org/get"

       > Example
         Send authenticated Get request (note the use of TLS).
             Http.new.get "https://httpbin.org/basic-auth/user/pass" [Header.authorization_basic "user" "pass"]

       > Example
         Download a file.
             out_file = File.new "/tmp/out.bin"
             res = Http.new.get "http://httpbin.org/bytes/1024"
             res.body.to_file out_file
    get : To_Uri -> Vector.Vector -> Response
    get uri (headers = []) =
        req = Request.get uri headers
        this.request req

    ## Send a Head request.

       > Example
         Send a Head request.
             res = Http.new.head "http://httpbin.org"
             IO.println res.headers
    head : To_Uri -> Vector.Vector -> Response
    head uri (headers = []) =
        req = Request.head uri headers
        this.request req

    ## Send a Post request.

       > Example
         Send a Post request with binary data.
             body = Body.Bytes "Hello".utf_8
             header_binary = Header.content_type "application/octet-stream"
             Http.new.post "http://httpbin.org/post" body [header_binary]
    post : To_Uri -> Request_Body -> Vector.Vector -> Respoonse
    post uri body (headers = []) =
        req = Request.post uri body headers
        this.request req

    ## Send a Post request with the form. By default it will be encoded as
       "application/x-www-form-urlencoded". To encode the form as
       "multipart/form-data" add the appropriate header.

       > Example
         Send a Post request with form.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             Http.new.post_form "http://httpbin.org/post" form

       > Example
         Send a Post request with form encoded as "multipart/form-data".
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             Http.new.post_form "http://httpbin.org/post" form [Header.multipart_form_data]

       > Example
         Configure HTTP client and send a Post request.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             http = Http.new (timeout = 30.seconds)
             http.post_form "http://httpbin.org/post" form
    post_form : To_Uri -> To_Form -> Vector.Vector -> Response
    post_form uri parts (headers = []) =
        new_headers = [Header.application_x_www_form_urlencoded]
        req = Request.post uri (Request_Body.Form parts.to_form) new_headers . with_headers headers
        this.request req

    ## Send a Post request with body with content-type "application/json".

       > Example
         Send a Post request with json data.
             json = Json.parse <| '''
                 {"key":"val"}
             Http.new.post_json "http://httpbin.org/post" json
    post_json : To_Uri -> Json -> Vector.Vector -> Response
    post_json uri body_json (headers = []) =
        new_headers = [Header.application_json]
        req = Request.post uri (Request_Body.Json body_json) headers . with_headers new_headers
        this.request req

    ## Send a Put request.

       > Example
         Send a Put request with binary data.
             body = Body.Bytes "contents".utf_8
             header_binary = Header.content_type "application/octet-stream"
             Http.new.put "http://httpbin.org/post" body [header_binary]
    put : To_Uri -> Request_Body -> Vector.Vector -> Respoonse
    put uri body (headers = []) =
        req = Request.put uri body headers
        this.request req

    ## Send a Put request with body with content-type "application/json".

       > Example
         Send a Put request with json data.
             json = Json.parse <| '''
                 {"key":"val"}
             Http.new.put_json "http://httpbin.org/put" json
    put_json : To_Uri -> Json -> Vector.Vector -> Response
    put_json uri body_json (headers = []) =
        new_headers = [Header.application_json]
        req = Request.put uri (Request_Body.Json body_json) headers . with_headers new_headers
        this.request req

    ## Create a Delete request.

       > Example
         Send a Delete request.
             Http.new.delete "http://httpbin.org/delete"
    delete : To_Uri -> Vector.Vector -> Response
    delete uri (headers = []) =
        req = Request.delete uri headers
        this.request req

    ## Create a request

       > Example
         Send a Get request with headers.
             req = Request.new Method.Get "http://httpbin.org/get" . with_header "X-Trace-Id" "00000"
             res = Http.new.request req
             res.body

       > Example
         Open a connection and send a Post request with form.
             req = Request.post "http://httpbin.org/post" . with_form [Form.text_field "key" "value"] . with_header "X-Trace-Id" "123456789"
             res = http.new.request req
             res.code

       > Example
         Send a Post request with urlencoded form data.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             req = Request.post "http://httpbin.org/post" . with_form form
             Http.new.request req

       > Example
         Send a Post request with form encoded as "multipart/form-data".
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             req = Request.post "http://httpbin.org/post" . with_form form . with_headers [Header.multipart_form_data]
             Http.new.post req

       > Example
         Configure HTTP client and send a Post request with form.
             form = [Form.text_field "name" "John Doe"]
             req = Request.new Method.Post "http://httpbin.org/post" . with_form form
             http = Http.new (timeout = 30.seconds) (proxy = Proxy.new "proxy.example.com:80")
             http.request req
    request : Request -> Response
    request req =
        body_publishers = HttpRequest.BodyPublishers
        builder = HttpRequest.newBuilder
        # set uri
        builder.uri req.uri.internal_uri
        # prepare headers and body
        req_with_body = case req.body of
            Request_Body.Empty ->
                Pair req body_publishers.noBody
            Request_Body.Text text ->
                builder.header Header.text_plain.name Header.text_plain.value
                Pair req (body_publishers.ofString text)
            Request_Body.Json json ->
                builder.header Header.application_json.name Header.application_json.value
                Pair req (body_publishers.ofString json.to_text)
            Request_Body.Form form ->
                add_multipart form =
                    body_builder = Http_Utils.multipart_body_builder
                    form.parts.map part-> case part.value of
                        Form.Part_Text text -> body_builder.add_part_text part.key text
                        Form.Part_File file -> body_builder.add_part_file part.key file.path
                    boundary = body_builder.get_boundary
                    Pair (req.with_headers [Header.multipart_form_data boundary]) body_builder.build
                add_urlencoded form =
                    body_builder = Http_Utils.urlencoded_body_builder
                    form.parts.map part-> case part.value of
                        Form.Part_Text text -> body_builder.add_part_text part.key text
                        Form.Part_File file -> body_builder.add_part_file part.key file.path
                    Pair req body_builder.build
                if req.headers.contains Header.multipart_form_data then add_multipart form else
                    add_urlencoded form
        # method
        req_http_method = case req.method of
            Method.Options -> "OPTIONS"
            Method.Get -> "GET"
            Method.Post -> "POST"
            Method.Put -> "PUT"
            Method.Delete -> "DELETE"
            Method.Trace -> "TRACE"
            Method.Connect -> "CONNECT"
        case req_with_body of
            Pair req body ->
                # set method and body
                builder.method req_http_method body
                # set headers
                req.headers.map h-> builder.header h.name h.value
        http_request = builder.build
        body_handler = HttpResponse.BodyHandlers . ofByteArray
        Response.response (this.internal_http_client.send http_request body_handler)

    ## PRIVATE

       Build an HTTP client.
    internal_http_client : HttpClient
    internal_http_client =
        builder = HttpClient.newBuilder
        # timeout
        if this.timeout.is_date then Panic.throw (Time.time_error "Connection timeout does not support date intervals") else
            builder.connectTimeout this.timeout.internal_duration
        # redirect
        redirect = HttpClient.Redirect
        redirect_policy = case this.follow_redirects of
            True -> redirect.ALWAYS
            False -> redirect.NEVER
        builder.followRedirects redirect_policy
        # proxy
        case this.proxy of
            Proxy.Proxy_Addr proxy_host proxy_port ->
                proxy_selector = ProxySelector.of (InetSocketAddress.new proxy_host proxy_port)
                builder.proxy proxy_selector
            Proxy.System ->
                proxy_selector = ProxySelector.getDefault
                builder.proxy proxy_selector
            Proxy.None ->
                Nothing
        # version
        case this.version of
            Version.Http_1_1 ->
                builder.version HttpClient.Version.HTTP_1_1
            Version.Http_2 ->
                builder.version HttpClient.Version.HTTP_2
        # build http client
        builder.build

## Create a new instance of HTTP client.

   > Example
     Create an HTTP client with default settings.
         Http.new

   > Example
     Create an HTTP client with extended timeout.
         Http.new timeout=30.seconds

   > Example
     Create an HTTP client with extended timeout and proxy settings.
         Http.new (timeout = 30.seconds) (proxy = Proxy.new "example.com" 8080)
new : Duration -> Boolean -> Proxy -> Http
new (timeout = 10.seconds) (follow_redirects = True) (proxy = Proxy.System) (version = Version.Http_1_1) =
    Http timeout follow_redirects proxy version

## Send an Options request.

   > Example
     Send an Options request.
         Http.options "http://httpbin.org"
options : To_Uri -> Vector.Vector -> Response
options uri (headers = []) = here.new.options uri headers

## Send a Get request.

   > Example
     Send a Get request.
         Http.get "http://httpbin.org/get"

   > Example
     Send authenticated Get request (note the use of TLS).
         Http.get "https://httpbin.org/basic-auth/user/pass" [Header.authorization_basic "user" "pass"]

   > Example
     Download a file.
         out_file = File.new "/tmp/out.bin"
         res = Http.get "http://httpbin.org/bytes/1024"
         res.body.to_file out_file
get : To_Uri -> Vector.Vector -> Response
get uri (headers = []) = here.new.get uri headers

## Send a Head request.

   > Example
     Send a Head request.
         res = Http.head "http://httpbin.org"
         IO.println res.headers
head : To_Uri -> Vector.Vector -> Response
head uri (headers = []) = here.new.options uri headers

## Send a Post request.

   > Example
     Send a Post request with binary data.
         body = Body.Bytes "Hello".utf_8
         header_binary = Header.content_type "application/octet-stream"
         Http.post "http://httpbin.org/post" body [header_binary]
post : To_Uri -> Request_Body -> Vector.Vector -> Respoonse
post uri body (headers = []) = here.new.post uri body headers

## Send a Post request with the form. By default it will be encoded as
   "application/x-www-form-urlencoded". To encode the form as
   "multipart/form-data" add the appropriate header.

   > Example
     Send a Post request with form.
         form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
         Http.post_form "http://httpbin.org/post" form

   > Example
     Send a Post request with form encoded as "multipart/form-data".
         form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
         Http.post_form "http://httpbin.org/post" form [Header.multipart_form_data]
post_form : To_Uri -> To_Form -> Vector.Vector -> Response
post_form uri parts (headers = []) = here.new.post_form uri parts headers

## Send a Post request with body with content-type "application/json".

   > Example
     Send a Post request with json data.
         json = Json.parse <| '''
             {"key":"val"}
         Http.post_json "http://httpbin.org/post" json
post_json : To_Uri -> Json -> Vector.Vector -> Response
post_json uri body_json (headers = []) = here.new.post_json uri body_json headers
