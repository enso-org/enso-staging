from Standard.Base import all

import Builtins

## Represents a polyglot language.
type Language
    ## The Java laguage.
    type Java
    ## Unknown language.
    type Unknown

## A meta-representation of a runtime value.

   ! Warning
     The functionality contained in this module exposes certain implementation
     details of the language. As such, the API has no stability guarantees and
     is subject to change as the Enso interpreter evolves.
type Meta
    ## An Atom meta-representation.
    type Atom value
    ## A constructor meta-representation.
    type Constructor value
    ## A primitive value meta-prepresentation.
    type Primitive value
    ## An unresolved symbol meta-representation.
    type Unresolved_Symbol value
    ## An error meta-representation, containing the payload of a dataflow error.
    type Error value
    ## A polyglot value meta-representation.
    type Polyglot value

## Returns a vector of field values of the given atom.
Atom.fields : Vector.Vector
Atom.fields = Vector.Vector (Builtins.Meta.get_atom_fields this.value)

## Returns a constructor value of the given atom.
Atom.constructor : Any
Atom.constructor = Builtins.Meta.get_atom_constructor this.value

## Returns a new unresolved symbol with its name changed to the provided
   argument.
Unresolved_Symbol.rename : Text -> Any
Unresolved_Symbol.rename new_name =
    Builtins.Meta.create_unresolved_symbol new_name this.scope

## Returns the name of an unresolved symbol.
Unresolved_Symbol.name : Text
Unresolved_Symbol.name = Builtins.Meta.get_unresolved_symbol_name this.value

## Returns the definition scope of an unresolved symbol.
Unresolved_Symbol.scope : Any
Unresolved_Symbol.scope = Builtins.Meta.get_unresolved_symbol_scope this.value

## Returns a vector of field names defined by a constructor.
Constructor.fields : Vector.Vector
Constructor.fields = Vector.Vector (Builtins.Meta.get_constructor_fields this.value)

## Returns the name of a constructor.
Constructor.name : Text
Constructor.name = Builtins.Meta.get_constructor_name this.value

## Creates a new atom of the given constructor, with field values provided
   in the `fields` vector.
Constructor.new : Vector.Vector -> Any
Constructor.new fields = Builtins.Meta.new_atom this.value fields.to_array

## Returns the language of a polyglot value.
Polyglot.get_language : Language
Polyglot.get_language =
    lang_str = Builtins.Meta.get_polyglot_language
    if lang_str == "java" then Java else Unknown

## Checks if `this` is an instance of `typ`.
Any.is_a : Any -> Boolean
Any.is_a typ = here.is_a this typ

## Checks if `this` is an instance of `typ`.
Any.is_an : Any -> Boolean
Any.is_an typ = here.is_a this typ

## Checks if `this` is an instance of `typ`.
Base.Error.is_a : Any -> Boolean
Base.Error.is_a typ = this.is_an typ

## Checks if `this` is an instance of `typ`.
Base.Error.is_an : Any -> Boolean
Base.Error.is_an typ = typ == Base.Error

## Checks if `value` is an instance of `typ`.
is_a : Any -> Any -> Boolean
is_a value typ = if typ == Any then True else
    if Builtins.Meta.is_error value then typ == Base.Error else
        case value of
            Array -> typ == Array
            Boolean -> if typ == Boolean then True else value == typ
            Text -> typ == Text
            Number -> if typ == Number then True else case value of
                Integer -> typ == Integer
                Decimal -> typ == Decimal
            Base.Polyglot -> typ == Base.Polyglot
            _ ->
                meta_val = here.meta value
                case meta_val of
                    Atom _ -> if Builtins.meta.is_atom typ then typ == value else
                        meta_val.constructor == typ
                    Constructor _ ->
                        meta_typ = here.meta typ
                        case meta_typ of
                            Atom _ -> meta_val.constructor == meta_typ.constructor
                            Constructor _ -> meta_val.constructor == meta_typ
                            _ -> False
                    Error _ -> typ == Error
                    Unresolved_Symbol _ -> typ == Unresolved_Symbol
                    _ -> False

## Checks if `value` is an instance of `typ`.
is_an : Any -> Any -> Boolean
is_an value typ = here.is_a value typ

## Returns a meta-representation of a given runtime entity.
meta : Any -> Meta
meta value = if Builtins.Meta.is_atom value then Atom value else
    if Builtins.Meta.is_constructor value then Constructor value else
        if Builtins.Meta.is_polyglot value then Polyglot value else
            if Builtins.Meta.is_unresolved_symbol value then Unresolved_Symbol value else
                if Builtins.Meta.is_error value then Error value.catch else
                    Primitive value

## Checks whether two objects are represented by the same underlying reference.
   This is a power-user feature, that is only useful for certain optimizations.
is_same_object : Any -> Any -> Boolean
is_same_object value_1 value_2 = Builtins.Meta.is_same_object value_1 value_2
