from Standard.Base import all

## Checks if `this` is equal to `that.`

   Arguments:
   - that: The object to compare `this` against.

   Two values are considered to be equal in Enso when they have the same
   structure, and each of the values of their fields are recursively equal.

   > Example
     Checking if 1 is equal to 2.
         1 == 2
Any.== : Any -> Boolean
Any.== that = if Meta.is_same_object this that then True else
    this_meta = Meta.meta this
    that_meta = Meta.meta that
    case Cons this_meta that_meta of
        Cons (Meta.Atom _) (Meta.Atom _) ->
            c_1 = this_meta.constructor
            c_2 = that_meta.constructor
            if Meta.is_same_object c_1 c_2 . not then False else
                f_1 = this_meta.fields
                f_2 = that_meta.fields
                0.up_to f_1.length . all i-> (f_1.at i) == (f_2.at i)
        Cons (Meta.Error _) (Meta.Error _) -> this_meta.payload == that_meta.payload
        Cons (Meta.Polyglot o_1) (Meta.Polyglot o_2) ->
            langs_match = this_meta.language == Meta.Java && that_meta.language == Meta.Java
            if langs_match.not then False else o_1.equals o_2
        ## Constructor comparison is covered by the identity equality.
           Primitive objects should define their own equality.
           Therefore, there is no more cases to handle in this method.
        _ -> False

## Checks if `this` is not equal to `that`.

   Arguments:
   - that: The object to compare `this` against.

   > Example
     Checking if 1 is not equal to 2.
         1 != 2
Any.!= : Any -> Boolean
Any.!= that = (this == that).not

## Checks if `this` is greater than `that`.

   To have `>` defined, a type must define `compare_to`, returning an Ordering.

   > Example
     Compare two integers.
         1 > 10 == False
Any.> : Any -> Boolean
Any.> that = this.compare_to that == Ordering.Greater

## Checks if `this` is less than `that`.

   To have `<` defined, a type must define `compare_to`, returning an Ordering.

   > Example
     Compare two integers.
         1 < 10 == True
Any.< : Any -> Boolean
Any.< that = this.compare_to that == Ordering.Less

## Checks if the type is an instance of `Nothing`.

   > Example
     Checking if a variable `a` is nothing.
         a.is_nothing
Any.is_nothing : Boolean
Any.is_nothing = case this of
    Nothing -> True
    _ -> False

## Executes the provided handler on a dataflow error, or executes as identity on
   a non-error value.

   Arguments:
   - handler: The function to call on this if it is an error value. By default
     this is identity.

   > Example
     Catching an erroneous value to perform some operation on it.
       (Time.Time_Error "Message").catch (err -> IO.println err)
Any.catch : (Error -> Any) -> Any
Any.catch (handler = x->x) = this.catch_primitive handler

## Maps a dataflow error.
   If the original value was a non-error value, it is not affected, but if it
   was an error, the error is mapped through the provided function.

   Arguments:
   - f: The function to transform the error.

   > Example
     Wrapping an error value.
       map.get "x" . map_error (_ -> ElementNotFound "x")
Any.map_error : (Error -> Error) -> Any
Any.map_error _ = this

## Checks if the underlying value is an error.
Any.is_error : Boolean
Any.is_error = False

## Applies the function `this` to the provided argument.

   Arguments:
   - argument: The argument to apply `this` to.

   > Example
     Applying a function to a block.
         (x -> x + 1) <|
            y = 1 ^ 3
            3 + y
Any.<| : Any -> Any
Any.<| ~argument = this argument

## Applies the function on the right hand side to the argument on the left.

   Arguments
   - function: The function to apply to `this`.

   > Example
     Applying a function in a pipeline.
         1 |> (* 2)
Any.|> : (Any -> Any) -> Any
Any.|> function = function this

## Composes two functions together.

   For `f << g`, this creates the function composition `f ∘ g`.

   Arguments:
   - that: The function to compose with `this`.

   > Example
     Compose the functions +1 and *2 and apply it to 2
         (+1 << *2) 2
Any.<< : (Any -> Any) -> (Any -> Any) -> Any -> Any
Any.<< that = x -> this (that x)

## Composes two functions together in the forward direction.

   For `f >> g`, this creates the function composition `g ∘ f`.

   Arguments:
   - that: The function to compose with `this`.

   > Example
     Add one and then multiply by two as a function applied to 2.
         (+1 >> *2) 2
Any.>> : (Any -> Any) -> (Any -> Any) -> Any -> Any
Any.>> that = x -> that (this x)

## UNSTABLE
   ADVANCED

   Returns a Text used to display this value in the IDE. The particular
   representation is left unspecified and subject to change in the future.
   The current implementation uses a JSON serialization as the default.

   Types defining their own versions of this method should ensure that the
   result is reasonably small and the operation is quick to compute.
Any.to_default_visualization_data : Text
Any.to_default_visualization_data = this.to_json.to_text
