from Standard.Base import all

polyglot java import java.lang.Double
polyglot java import java.lang.Math
polyglot java import java.lang.String

## Computes the inverse of the sine function

   Selects a value in the -pi/2 through pi/2 range.
Number.asin : Decimal
Number.asin = Math.asin this.to_decimal

## Computes the inverse of the cosine function.

   Selects a value in the -pi/2 through pi/2 range.
Number.acos : Decimal
Number.acos = Math.acos this.to_decimal

## Computes the inverse of the tangent function.

   Selects a value in the -pi/2 through pi/2 range.
Number.atan : Decimal
Number.atan = Math.atan this.to_decimal

## Computes the argument (angle) in the conversion from cartesian
   to polar coordinates.

   The returned angle is in the -pi through pi range.
Number.atan_2 : Number -> Decimal
Number.atan_2 y = Math.atan2 this.to_decimal y.to_decimal

## Computes the sine function.
Number.sin : Decimal
Number.sin = Math.sin this.to_decimal

## Computes the cosine function.
Number.cos : Decimal
Number.cos = Math.cos this.to_decimal

## Computes the tangent function.
Number.tan : Decimal
Number.tan = Math.tan this.to_decimal

## Computes the hyperbolic sine function.
Number.sinh : Decimal
Number.sinh = Math.sinh this.to_decimal

## Computes the hyperbolic cosine function.
Number.cosh : Decimal
Number.cosh = Math.cosh this.to_decimal

## Computes the hyperbolic tangent function.
Number.tanh : Decimal
Number.tanh = Math.tanh this.to_decimal

## Computes the exponential function.
Number.exp : Decimal
Number.exp = Math.exp this.to_decimal

## Computes the natural logarithm function.
Number.ln : Decimal
Number.ln = Math.log this.to_decimal

## Computes the square root of `this`.
Number.sqrt : Decimal
Number.sqrt = Math.sqrt this.to_decimal

## Computes the `base`-log of `this`.
Number.log : Number -> Decimal
Number.log base = this.ln / base.ln

# TODO this should expose a more-user friendly API in the future.
## Converts a decimal value to a string, using the Java string formatting
   syntax.
Decimal.format : Text -> Text
Decimal.format fmt = String.format fmt this

## Creates a new right-exclusive range of integers from `this` to `n`.
Integer.up_to : Integer -> Range
Integer.up_to n = Range this n

## Checks equality of numbers, using an `epsilon` value.

   Returns `True` when `this` and `that` are at most `epsilon` apart.
Number.equals : Number -> Number -> Boolean
Number.equals that epsilon=0.0 = (this - that).abs <= epsilon

## Returns the smaller value of `this` and `that`.
Number.min : Number -> Number
Number.min that = if this < that then this else that

## Returns the larger value of `this` and `that`.
Number.max : Number -> Number
Number.max that = if this > that then this else that

## Number to JSON conversion.
Number.to_json : Json.Number
Number.to_json = Json.Number this

## Parses a textual representation of a decimal into a decimal number.
   Returns `Nothing` if the text does not represent a valid decimal.
Decimal.parse : Text -> Decimal | Nothing
Decimal.parse text =
    Panic.recover (Double.parseDouble text) . catch (_ -> Nothing)

