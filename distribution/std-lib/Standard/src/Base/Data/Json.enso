from Standard.Base import all

import Standard.Base.Data.Json.Internal

## Represents a JSON structure.
type Json
    type Object fields
    type Array items
    type String value
    type Number value
    type Boolean value
    type Null

    ## Marshalls this JSON into an arbitrary value described by
       `type_descriptor`.

       The type descriptor is a fully-applied type, describing all required
       sub-types. It can either be an Atom or one of the primitive types
       (`Number`, `Text`, `Boolean`, `Vector`).

       > Example
         The following shows an example of reading a nested JSON into a desired
         type. It will return a vector of `Book` objects containing data from
         `json_string`.
             type Book title author
             type Author name year_of_birth

             read_data =
                 json_string = '''
                     [
                       {
                         "title": "Lord of the Rings",
                         "author": {
                           "name": "J. R. R. Tolkien",
                           "year_of_birth": 1892
                         }
                       },
                       {
                         "title": "The Little Prince",
                         "author": {
                           "name": "Antoine de Saint-ExupÃ©ry",
                           "year_of_birth": 1900
                         }
                       },
                       {
                         "title": "And Then There Were None",
                         "author": {
                           "name": "Agatha Christie",
                           "year_of_birth": 1890
                         }
                       }
                     ]
                 parsed = Json.parse json_string
                 parsed.into (Vector (Book title=Text (Author name=Text year_of_birth=Number)))
    into : Any -> Any ! Marshalling_Error
    into type_descriptor =
        Panic.recover (Internal.into_helper type_descriptor this)

    ## Returns this Json object.

       Included to implement the `to_json` interface.
    to_json : Json
    to_json = this

    ## Renders this JSON into an RFC-8259 compliant text.
    to_text : Text
    to_text = Internal.render_helper "" this

    ## Recursively unwraps the JSON value into primitive values.
    unwrap : Any
    unwrap = case this of
        Json.Array its -> its.map .unwrap
        Json.Boolean b -> b
        Json.Number n -> n
        Json.String t -> t
        Json.Null -> Nothing
        Json.Object f -> f.map .unwrap

## A failure indicating malformed text input into the JSON parser.

   Check the `message` field for detailed information on the specific failure.
type Parse_Error message

## Gets the value associated with the given key in this object. Returns
   `Nothing` if the associated key is not defined.
Object.get : Text -> Json | Nothing
Object.get field = this.fields.get field

## Parses an RFC-8259 compliant JSON text into a `Json` structure.
parse : Text -> Json ! Parse_Error
parse json_text =
    r = Panic.recover (Internal.parse_helper json_text)
    r.catch e-> case e of
        Polyglot_Error err -> Error.throw (Parse_Error err.getMessage)
        p -> Panic.throw p

## A failure indicating the inability to marshall a `Json` object into the
   specified format.
type Marshalling_Error
    ## The `json` object could not be converted into `format`, due to a type
       mismatch.

       This can occur e.g. when trying to reinterpret a number as a `Text`, etc.
    type Type_Mismatch_Error json format

    ## The `json` object could not be converted into `format`, due to a field
       missing in the `json` structure.

       This can occure when trying to reinterpret a JSON object into an atom,
       when the JSON does not contain all the fields required by the atom.
    type Missing_Field_Error json field format

## Generically converts an atom into a JSON object.

   The input atom is converted into a JSON object, with a `"type"` field set to
   the atom's type name and all other fields serialized with their name as
   object key and the value as the object value.
Any.to_json =
    m = Meta.meta this
    case m of
        Meta.Atom _ ->
            cons = Meta.Constructor m.constructor
            fs = m.fields
            fnames = cons.fields
            json_fs = 0.up_to fnames.length . fold Map.empty m-> i->
                m.insert (fnames.at i) (fs.at i . to_json)
            with_tp = json_fs . insert "type" (String cons.name)
            Object with_tp
        Meta.Constructor _ ->
            Object (Map.empty . insert "type" (String m.name))
        ## The following two cases cannot be handled generically and should
           instead define their own `to_json` implementations.
        Meta.Polyglot _ -> Null
        Meta.Primitive _ -> Null

## Method used by object builders to convert a value into a valid JSON key.
Text.to_json_key : Text
Text.to_json_key = this

## Boolean to JSON conversion.
Base.Boolean.to_json : Boolean
Base.Boolean.to_json = Boolean this

## Nothing to JSON conversion.
Nothing.to_json : Null
Nothing.to_json = Null

## A smart constructor, building an object representation based on a vector
   of key-value pairs.

   All values used as keys must define a `to_json_key : Text` method.

   > Example
     The following code:
         Json.from_pairs [["foo", 533], ["bar", False]]
     Returns a JSON object, that after serialization becomes:
         { "foo": 533, "bar": false }
from_pairs : Vector.Vector -> Object
from_pairs contents =
    fs = contents.fold Map.empty map-> kv_pair->
        key = kv_pair . at 0 . to_json_key
        val = kv_pair . at 1 . to_json
        map.insert key val
    Object fs
