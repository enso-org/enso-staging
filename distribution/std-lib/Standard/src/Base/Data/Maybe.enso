from Standard.Base import all

## A type representing computations that may fail.
type Maybe

    ## No contained value.
    Nothing

    ## A value.
    type Some value

    ## Applies the provided function to the contained value if it exists,
       otherwise returning the provided default value.

       Arguments:
       - default: The value to return if `this` is Nothing. This value is lazy
         and hence will not execute any provided computation unless it is used.
       - function: The function to execute on the value inside the `Just`, if it
         is a just.

       > Example
         Apply a function over a Just value to get 4.
             (Just 2).maybe 0 *2
    maybe : Any -> (Any -> Any) -> Any
    maybe ~default function = case this of
        Nothing -> default
        Some val -> function val

    ## Check if the maybe value is `Just`.

       > Example
         Check if `Nothing` is `Just`.
             Nothing.is_just
    is_just : Boolean
    is_just = case this of
        Nothing -> False
        Some _ -> True

    ## Check if the maybe value is `Nothing`.

       > Example
         Check if `Nothing` is `Nothing`.
             Nothing.is_nothing
    is_nothing : Boolean
    is_nothing = this.is_just.not

