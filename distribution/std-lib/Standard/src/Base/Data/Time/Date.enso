from Standard.Base import all

import Standard.Base.Data.Time.Time
import Standard.Base.Data.Time.Duration
import Standard.Base.Data.Time.Time_Of_Day
import Standard.Base.Data.Time.Zone

polyglot java import java.time.format.DateTimeFormatter
polyglot java import java.time.Instant
polyglot java import java.time.LocalDate
polyglot java import org.enso.base.Time_Utils

type Date

    ## This type represents a date, often viewed as year-month-day. For example,
       the value "2nd October 2007" can be stored in a `Date`.

       This class does not store or represent a time or timezone. Instead, it
       is a description of the date, as used for birthdays. It cannot represent
       an instant on the time-line without additional information such as an
       offset or timezone.
    type Date internal_local_date

    ## Get the year field.
    year : Integer
    year = this . internal_local_date . getYear

    ## Get the month of year field, as a number from 1 to 12.
    month : Integer
    month = this . internal_local_date . getMonthValue

    ## Get the day of month field.
    day : Integer
    day = this . internal_local_date . getDayOfMonth

    ## Combine this date with time of day to create a point in time.

       > Example
         Convert this date to midnight UTC time.
             Day.new 2020 2 3 . to_time Time_Of_Day.new Zone.utc
    to_time : Time_Of_Day -> Zone -> Time
    to_time daytime (zone = Zone.system) = Time.time (this . internal_local_date . atTime daytime.internal_local_time . atZone zone.internal_zone_id)

    ## Add specified amount of time to this instant.

       > Example
         Add 6 months to a local date.
             Date.new 2020 + 6.months
    + : Duration -> Date
    + amount = if amount.is_time then Error.throw (Time.Time_Error "Date does not support time intervals") else Date (this . internal_local_date . plus amount.internal_period)

    ## Subtract specified amount of time to this instant.

       > Example
         Subtract 7 days from a local date.
             Date.new 2020 - 7.days
    - : Duration -> Date
    - amount = if amount.is_time then Error.throw (Time.Time_Error "Date does not support time intervals") else Date (this . internal_local_date . minus amount.internal_period)

    ## Format this date using the default formatter.
    to_text : Text
    to_text = Time_Utils.default_date_formatter . format this.internal_local_date

    ## A Date to Json conversion.
    to_json : Json.Object
    to_json = Json.from_pairs [["type", "Date"], ["day", this.day], ["month", this.month], ["year", this.year]]

    ## Format this date using formatter text.

       Patterns are based on a simple sequence of letters and symbols. For
       example, "d MMM yyyy" will format "2011-12-03" as "3 Dec 2011".

       For the list of accepted symbols in pattern refer to
       `Base.Data.Time.Time.format` doc.

       > Example
         Format "2020-06-02" as "2 June 2020"
             Date.new 2020 6 2 . format "d MMMM yyyy"

       > Example
         Format "2020-06-02" as "2 June 20"
             Date.new 2020 6 2 . format "d MMMM yy"

       > Example
         Format "2020-06-02" as "Tuesday, 02 June 2020"
             Date.new 2020 6 2 . format "EEEE, dd MMMM yyyy"

       > Example
         Format "2020-06-02" as "Tue Jun 2"
             Date.new 2020 6 2 . format "EEE MMM d"

       > Example
         Format "2020-06-02" as "2020AD"
             Date.new 2020 6 2 . format "yyyyGG"
    format : Text -> Text
    format pattern = DateTimeFormatter.ofPattern pattern . format this.internal_local_date

## Obtains an instance of `Date` from a text, such as "2007-12-03".

   Arguments:
   - text: The textual content to parse as a date.

   Returns a `Time_Error` if the provided `text` cannot be parsed using the
   provided `pattern`.

   The text must represent a valid date and is parsed using the ISO-8601
   extended local date format. The format consists of:

   - Four digits or more for the year. Years in the range 0000 to 9999
     will be pre-padded by zero to ensure four digits. Years outside
     that range will have a prefixed positive or negative symbol.
   - A dash
   - Two digits for the month-of-year. This is pre-padded by zero to ensure two
     digits.
   - A dash
   - Two digits for the day-of-month. This is pre-padded by zero to ensure two
     digits.

   > Example
     Parse the date of 23rd December 2020.
         Date.parse "2020-12-23"

   > Example
     Recover from the parse error.
         Date.parse "my birthday" . catch e-> case e of
             Time.Error _ -> Date.new 2000 1 1
parse : Text -> Date ! Time.Time_Error
parse text =
    Panic.recover (Date (LocalDate.parse text)) . catch e-> case e of
        Polyglot_Error err -> Error.throw (Time.Time_Error err.getMessage)
        x -> x

## Obtains an instance of `Date` from a text using custom format.

   Arguments:
   - text: The textual content to parse as a time.
   - pattern: The pattern describing how to parse the text.

   For the list of accepted symbols in pattern refer to
   `Base.Data.Time.Time.format` doc.

   Returns a `Time_Error` if the provided `text` cannot be parsed using the
   provided `pattern`.

   > Example
     Parse "1999-1-1" as Date.
         Date.parse_format "1999-1-1" "yyyy-M-d"

   > Example
     Recover from the parse error.
         date = Date.parse "1999-1-1" "yyyy-MM-dd"
         date.catch e-> case e of
             Time.Error msg -> Date.new 2000 1 1
parse_format : Text -> Text -> Date ! Time.Time_Error
parse_format text pattern =
    format = DateTimeFormatter.ofPattern pattern
    Panic.recover (Date (LocalDate.parse text format)) . catch e-> case e of
        Polyglot_Error err -> Error.throw (Time.Time_Error err.getMessage)
        x -> x

## Obtains the current date from the system clock in the system timezone.
now : Date
now = Date LocalDate.now

## Alias for `now`.
today : Date
today = here.now

## Obtains an instance of `Date` from a year, month and day.

   - month - the month-of-year to represent, from 1 (January) to 12 (December)
   - day - the day-of-month to represent, from 1 to 31 and must be valid for the
     year and month

   Returns a `Time_Error` if the provided time is not valid.

   > Example
     Create a new local date at Unix epoch.
         Date.new 1970

   > Example
     Get the local date of 5th August 1986.
         Date.new 1986 8 5
new : Integer -> Integer -> Integer -> Date ! Time.Time_Error
new year (month = 1) (day = 1) =
    Panic.recover (Date (LocalDate.of year month day)) . catch e-> case e of
        Polyglot_Error err -> Error.throw (Time.Time_Error err.getMessage)
        x -> x
