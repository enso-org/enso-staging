from Standard.Base import all

import Standard.Base.Data.Time.Time

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.Period as Java_Period

type Duration

    ## An amount of time in terms of years, months, days, hours, minutes,
       seconds and nanoseconds.
    type Duration internal_period internal_duration

    ## Add specified amount of time to this duration.

       > Example
         Add 6 seconds to a duration of 3 minutes
             3.minutes + 6.seconds

       > Example
         Add 12 hours to a duration of a month.
             1.month + 12.hours
    + : Duration -> Duration
    + other = Duration (this.internal_period . plus other.internal_period . normalized) (this.internal_duration . plus other.internal_duration)

    ## Subtract specified amount of time from this duration.

       > Example
         Subtract 11 months from a duration of 3 years
             3.years - 11.months

       > Example
         Substract 30 minutes from a duration of 7 months.
             7.months - 30.minutes
    - : Duration -> Duration
    - other = Duration (this.internal_period . minus other.internal_period . normalized) (this.internal_duration . minus other.internal_duration)

    ## Get the amount of nanoseconds of this duration.
    nanoseconds : Integer
    nanoseconds = this.internal_duration . toNanosPart

    ## Get the amount of milliseconds of this duration.
    milliseconds : Integer
    milliseconds = this.internal_duration . toMillisPart

    ## Get the amount of minutes of this duration.
    seconds : Integer
    seconds = this.internal_duration . toSecondsPart

    ## Get the amount of minutes of this duration.
    minutes : Integer
    minutes = this.internal_duration . toMinutesPart

    ## Get the amount of hours of this duration.
    hours : Integer
    hours = this.internal_duration . toHours

    ## Get the amount of days of this duration.
    days : Integer
    days = this.internal_period . getDays

    ## Get the amount of months of this duration.
    months : Integer
    months = this.internal_period . getMonths

    ## Get the amount of days of this duration.
    years : Integer
    years = this.internal_period . getYears

    ## Convert this duration to a Vector of years, months, days, hours, minutes,
       seconds and nanosecnods.

       > Example
         Convert duration of a year and a hour to a vector returning `[1, 0, 0, 1, 0, 0, 0]`.
             1.year . plus 1.hour . to_vector

       > Example
         Convert duration of 800 nanoseconds to a vector returning `[0, 0, 0, 0, 0, 0, 800]`
             800.nanoseconds . to_vector
    to_vector : Vector.Vector
    to_vector = [this.years, this.months, this.days, this.hours, this.minutes, this.seconds, this.nanoseconds]

    ## A Duration to Json conversion.
    to_json : Json.Object
    to_json =
        b = Vector.new_builder
        b.append ["type", "Duration"]
        if this.years==0 . not then b.append ["years", this.years]
        if this.months==0 . not then b.append ["months", this.months]
        if this.days==0 . not then b.append ["days", this.days]
        if this.hours==0 . not then b.append ["hours", this.hours]
        if this.minutes==0 . not then b.append ["minutes", this.minutes]
        if this.seconds==0 . not then b.append ["seconds", this.seconds]
        if this.nanoseconds==0 . not then b.append ["nanoseconds", this.nanoseconds]
        Json.from_pairs b.to_vector

    ## Check if this duration is date-based.
    is_date : Boolean
    is_date = (this.years==0 . not) || (this.months==0 . not) || (this.days==0 . not)

    ## Check if this duration is time-based.
    is_time : Boolean
    is_time = (this.hours==0 . not) || (this.minutes==0 . not) || (this.seconds==0 . not) || (this.nanoseconds==0 . not)

    ## Check if this duration represents an empty time-span.
    is_empty : Boolean
    is_empty = this.is_date.not && this.is_time.not

    ## Check the durations equality.
    == : Duration -> Boolean
    == that = this.to_vector == that.to_vector

## Duration in nanoseconds.
Integer.nanosecond : Duration
Integer.nanosecond = Duration (Java_Period.ofDays 0) (Java_Duration.ofNanos this)

## Duration in nanoseconds.
Integer.nanoseconds : Duration
Integer.nanoseconds = this.nanosecond

## Duration in milliseconds.
Integer.millisecond : Duration
Integer.millisecond = Duration (Java_Period.ofDays 0) (Java_Duration.ofMillis this)

## Duration in milliseconds.
Integer.milliseconds : Duration
Integer.milliseconds = this.millisecond

## Duration in seconds.
Integer.second : Duration
Integer.second = Duration (Java_Period.ofDays 0) (Java_Duration.ofSeconds this)

## Duration in seconds.
Integer.seconds : Duration
Integer.seconds = this.second

## Duration in minutes.
Integer.minute : Duration
Integer.minute = Duration (Java_Period.ofDays 0) (Java_Duration.ofMinutes this)

## Duration in minutes.
Integer.minutes : Duration
Integer.minutes = this.minute

## Duration in hours.
Integer.hour : Duration
Integer.hour = Duration (Java_Period.ofDays 0) (Java_Duration.ofHours this)

## Duration in hours.
Integer.hours : Duration
Integer.hours = this.hour

## Duration in days.
Integer.day : Duration
Integer.day = Duration (Java_Period.ofDays this . normalized) (Java_Duration.ofSeconds 0)

## Duration in days.
Integer.days : Duration
Integer.days = this.day

## Duration in months.
Integer.month : Duration
Integer.month = Duration (Java_Period.ofMonths this . normalized) (Java_Duration.ofSeconds 0)

## Duration in months.
Integer.months : Duration
Integer.months = this.month

## Duration in years.
Integer.year : Duration
Integer.year = Duration (Java_Period.ofYears this . normalized) (Java_Duration.ofSeconds 0)

## Duration in years.
Integer.years : Duration
Integer.years = this.year

## Create an interval representing the duration between two points in time.

   > Example
     An hour interval between two points in time.
         Duration.between Time.now (Time.new 2010 10 20)
between : Time -> Time -> Duration
between start_inclusive end_exclusive =
   Duration (Java_Period.ofDays 0 . normalized) (Java_Duration.between start_inclusive.internal_zoned_date_time end_exclusive.internal_zoned_date_time)
