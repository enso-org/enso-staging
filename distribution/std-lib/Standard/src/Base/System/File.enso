from Standard.Base import all

import Standard.Base.System.File.Option

export Standard.Base.System.File.Option

polyglot java import java.io.InputStream as Java_Input_Stream
polyglot java import java.io.IOException
polyglot java import java.nio.file.AccessDeniedException
polyglot java import java.nio.file.NoSuchFileException

type File_Error
    type No_Such_File_Error file
    type Access_Denied_Error file
    type Io_Error message

## PRIVATE

   Utility method for rewrapping Java exceptions into Enso panics.
rethrow_java file exception =
    case exception of
        Polyglot_Error exc ->
            if Java.is_instance exc NoSuchFileException then
                Panic.throw (No_Such_File_Error file)
            if Java.is_instance exc AccessDeniedException then
                Panic.throw (Access_Denied_Error file)
            if Java.is_instance exc IOException then
                Panic.throw (Io_Error exc.getMessage)
            Panic.throw exception
        _ -> Panic.throw exception

## PRIVATE

   Utility method for running an action with Java exceptions mapping.
handle_java_exceptions file ~action =
    err = Panic.recover action
    r = err.catch (here.rethrow_java file)
    r

## PRIVATE

   Utility method for closing primitive Java streams. Provided to avoid
   accidental scope capture with `Managed_Resource` finalizers.
close_stream : Any -> Nothing
close_stream stream =
    stream.close
    Nothing

## An output stream, allowing for interactive writing of contents into an
   open file.
type Output_Stream
    type Output_Stream file stream_resource

    ## Writes a vector of bytes into the file at the current stream position.
    write_bytes : Vector.Vector -> Nothing ! File_Error
    write_bytes contents = Managed_Resource.with this.stream_resource java_stream->
        here.handle_java_exceptions this.file <|
            java_stream.write contents.to_array
            java_stream.flush
        Nothing

    ## Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.
    close : Nothing
    close = Managed_Resource.finalize this.stream_resource

## An input stream, allowing for interactive reading of contents from an open
   file.
type Input_Stream
    type Input_Stream file stream_resource

    ## Reads all the bytes in this file into a vector of bytes.
    read_all_bytes : Vector.Vector ! File_Error
    read_all_bytes = Managed_Resource.with this.stream_resource java_stream->
        here.handle_java_exceptions this.file <|
            Vector.from_polyglot_array java_stream.readAllBytes

    ## Reads _up to_ the provided number of bytes from the stream.

       Makes a best-effort to read as many bytes as provided, however fewer
       bytes may be read, if end of stream is encountered.

       The length of the returned vector is the same as the number of bytes
       read.
    read_n_bytes : Integer -> Vector.Vector ! File_Error
    read_n_bytes n = Managed_Resource.with this.stream_resource java_stream->
        here.handle_java_exceptions this.file <|
            bytes = java_stream.readNBytes n
            Vector.from_polyglot_array bytes

    ## Reads the next byte from the stream.

       The returned value is an integer in the range 0-255 representing the
       next byte of input, or -1 if end of stream is reached.
    read_byte : Integer ! File_Error
    read_byte = Managed_Resource.with this.stream_resource java_stream->
        here.handle_java_exceptions this.file <|
            java_stream.read

    ## Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.
    close : Nothing
    close = Managed_Resource.finalize this.stream_resource

    ## Exposes operations on the underlying Java input stream.

       Useful when integrating with polyglot functions requiring an
       `InputStream` as an argument.
    with_java_stream : (Java_Input_Stream -> Any) -> Any
    with_java_stream f = Managed_Resource.with this.stream_resource f

type File
    type File prim_file

    ## Returns a new input stream for this file.

       The returned stream should be closed as soon as it is not used anymore.
       The `with_input_stream` method should be preferred whenever possible.

       The `open_options` argument is a vector of `File.Option` objects,
       describing the access properties of the created stream.
    new_input_stream : Vector.Vector -> Input_Stream ! File_Error
    new_input_stream open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = here.handle_java_exceptions this <|
            (this.prim_file.newInputStream opts)
        resource = Managed_Resource.register stream here.close_stream
        Input_Stream this resource

    ## Returns a new output stream for this file.

       The returned stream should be closed as soon as it is not used anymore.
       The `with_output_stream` method should be preferred whenever possible.

       The `open_options` argument is a vector of `File.Option` objects,
       describing the access properties of the created stream.
    new_output_stream : Vector.Vector -> Output_Stream ! File_Error
    new_output_stream open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = here.handle_java_exceptions this <|
            this.prim_file.newOutputStream opts
        resource = Managed_Resource.register stream here.close_stream
        Output_Stream this resource

    ## Creates a new output stream for this file and runs the specified action
       on it.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       The `open_options` argument is a vector of `File.Option` objects,
       describing the properties of the created stream.
    with_output_stream : Vector.Vector -> (Output_Stream -> Any ! File_Error) -> Any ! File_Error
    with_output_stream open_options action =
        Resource.bracket (this.new_output_stream open_options) (_.close) action

    ## Creates a new input stream for this file and runs the specified action
       on it.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       The `open_options` argument is a vector of `File.Option` objects,
       describing the properties of the created stream.
    with_input_stream : Vector.Vector -> (Input_Stream -> Any ! File_Error) -> Any ! File_Error
    with_input_stream open_options action =
        Resource.bracket (this.new_input_stream open_options) (_.close) action

    ## Reads all bytes in this file into a byte vector.
    read_bytes : Vector.Vector ! File_Error
    read_bytes =
        opts = [Option.Read]
        this.with_input_stream opts (_.read_all_bytes)

    ## Reads the whole file into a `Text`, assuming UTF-8 content encoding.
    read : Text ! File_Error
    read =
        bytes = this.read_bytes
        Text.from_utf_8 bytes

    ## Appends a number of bytes at the end of this file.
    append_bytes : Vector.Vector -> Nothing ! File_Error
    append_bytes contents =
        opts = [Option.Append, Option.Create]
        this.with_output_stream opts (_.write_bytes contents)

    ## Appends a UTF-8 encoded `Text` at the end of this file.
    append : Text -> Nothing ! File_Error
    append contents = this.append_bytes contents.utf_8

    ## Writes a number of bytes into this file, removing any existing contents.

       If the file does not exist, it will be created.
    write_bytes : Vector.Vector -> Nothing ! File_Error
    write_bytes contents =
        opts = [Option.Write, Option.Create, Option.Truncate_Existing]
        this.with_output_stream opts (_.write_bytes contents)
        Nothing

    ## Writes a UTF-8 encoded `Text` into this file, removing any existing
       contents.

       If the file does not exist, it will be created.
    write : Text -> Nothing ! File_Error
    write contents = this.write_bytes contents.utf_8

    ## Resolve a child file of the given file.
    / : (Text | File) -> File
    / subpath = case subpath of
        File prim -> File (this.prim_file.resolve prim)
        _ -> File (this.prim_file.resolve subpath)

    ## A text representation of this file.
    to_text : Text
    to_text = this.prim_file.to_text

    ## A File to JSON conversion.
    to_json : Json.Object
    to_json = Json.from_pairs [["type", "File"], ["path", this.path]]

    ## Checks whether the file exists.
    exists : Boolean
    exists = this.prim_file.exists

    ## Checks whether the file exists and is a directory.
    is_directory : Boolean
    is_directory = this.prim_file.isDirectory

    ## Creates the directory represented by this file if it did not exist.

       It also creates parent directories if they did not exist.
    create_directory : Nothing
    create_directory = this.prim_file.createDirectories

    ## Checks whether the file exists and is a regular file.
    is_regular_file : Boolean
    is_regular_file = this.prim_file.isRegularFile

    ## Resolves the parent filesystem node of this file.
    parent : File
    parent = File this.prim_file.getParent

    ## Returns the path of this file.
    path : Text
    path = this.prim_file.getPath

    ## Returns the name of this file.
    name : Text
    name = this.prim_file.getName

    ## Converts this file to an equivalent file represented with an absolute
       path.
    absolute : File
    absolute = File this.prim_file.getAbsoluteFile

    ## Checks is this file's path is absolute.
    is_absolute : Boolean
    is_absolute = this.prim_file.isAbsolute

    ## Normalizes the filepath.
    normalize : File
    normalize = File this.prim_file.normalize

    ## Checks if this file has the same `path` as `that`.
    == : File -> Boolean
    == that = this.prim_file.isEqual that.prim_file

    ## Deletes the file.

       If the file is a directory, it must be empty, otherwise a `Panic` will
       be thrown.
    delete : Nothing ! File_Error
    delete =
        here.handle_java_exceptions this <|
            this.prim_file.delete
        Nothing

    ## Deletes the file if it exists on disk.

       If the file is a directory, it must be empty, otherwise a `Panic` will
       be thrown.
    delete_if_exists : Nothing ! File_Error
    delete_if_exists = if this.exists then this.delete else Nothing

## Creates a new file object, pointing to the given path.

   > Example
     Create a new file pointing to the `data.csv` file in the project directory.
         File.new (Enso_Project.data / "data.csv").path
new : Text -> File
new path = File (Prim_Io.get_file path)

## Open and read the file at `path`.

   > Example
     Read the `data.csv` file in the project directory.
         File.open (Enso_Project.data / "data.csv")
read : Text -> Text
read path = (here.new path).read

## Returns the current working directory (CWD) of the current program.
current_directory : File
current_directory = File (Prim_Io.get_cwd)

## Returns the home directory of the current user.
home : File
home = here.new (Prim_Io.get_user_home)
