from Standard.Base import all

import Standard.Base.System.Platform
import Standard.Table.Data.Column
import Standard.Table.Io.Csv

from Standard.Table.Data.Order_Rule as Order_Rule_Module import Order_Rule

polyglot java import org.enso.table.data.table.Table as Java_Table
polyglot java import org.enso.table.operations.OrderBuilder

## An error returned when a non-existent column is being looked up.
type No_Such_Column_Error column_name

## Represents a column-oriented table data structure.
type Table
    type Table java_table

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        cols = Vector.Vector this.java_table.getColumns
        index =  this.java_table.getIndex
        col_names = [index.getName] + cols.map .getName
        col_vals = cols.map .getStorage
        num_rows = this.row_count
        display_rows = Math.min num_rows show_rows
        rows = Vector.new display_rows row_num->
            cols = col_vals.map col->
                if col.isNa row_num then "Nothing" else Column.get_item_string col row_num
            [index.ilocString row_num] + cols
        table = here.print_table col_names rows 1 format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Converts this table to a JSON structure.
    to_json : Json
    to_json =
        col_jsons = this.columns.map .to_json
        cols_json = Json.Array col_jsons
        fields = Map.singleton "columns" cols_json
        Json.Object fields

    ## UNSTABLE
       ADVANCED

       Returns a Text used to display this table in the IDE by default.
       Returns a JSON object containing useful metadata and previews of column
       values.
    to_default_visualization_data : Text
    to_default_visualization_data =
        max_size = 10
        row_count = ['number_of_rows', this.row_count]
        cols = this.columns.map c->
            name = c.name
            items = c.to_vector.take_start max_size
            Json.from_pairs [['name', name], ['data', items]]
        Json.from_pairs [row_count, ['columns', cols]] . to_text

    ## Returns the column with the given name.
    at : Text -> Column ! No_Such_Column_Error
    at name = case this.java_table.getColumnByName name of
        Nothing -> Error.throw (No_Such_Column_Error name)
        c -> Column.Column c

    ## Selects only the rows of this table that correspond to `True` values in
       `indexes`.
       This is useful for filtering the rows by given predicate.

       > Example
         Select only the rows of `my_table` where the `"Status"` column has the
         value `"Valid"`
             my_table.where (my_table.at "Status" == "Valid")
    where : Column -> Table
    where indexes =
        Table (this.java_table.mask indexes.java_column)

    ## Sets the column value at the given name. If a column with the given name
       already exists, it will be replaced. Otherwise a new column is added.
    set : Text -> Column.Column | Vector.Vector -> Table
    set name column = case column of
        Vector.Vector _ ->
            this.set name (Column.from_vector name column)
        Column.Column _ ->
            Table (this.java_table.addOrReplaceColumn (column.rename name . java_column))

    ## Returns the vector of columns contained in this table.
    columns : Vector
    columns =
        Vector.Vector this.java_table.getColumns . map Column.Column

    ## Sets the index of this table, using the column with the provided name.
    set_index : Text -> Table
    set_index index =
        Table (this.java_table.indexFromColumn index)

    ## Returns the index of this table, as a column (indexed by itself).
       Returns `Nothing` if there is no index set.
    index : Column.Column | Nothing
    index = case this.java_table.getIndex.toColumn of
        Nothing -> Nothing
        i -> Column.Column i

    ## Selects a subset of columns from this table by name.
    select : Vector -> Table
    select columns = Table (this.java_table.selectColumns columns.to_array)

    ## Efficiently joins two tables based on either the index or the specified
       key column.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index values in `other` are not
       unique, the corresponding rows of `this` will be duplicated in the
       result.

       Arguments:
         - other: the table being the right operand of this join operation.
         - on: the column of `this` that should be used as the join key. If
               this argument is not provided, the index of `this` will be used.
         - drop_unmatched: whether the rows of `this` without corresponding
                           matches in `other` should be dropped from the result.
         - left_suffix: a suffix that should be added to the columns of `this`
                        when there's a name conflict with a column of `other`.
         - right_suffix: a suffix that should be added to the columns of `other`
                         when there's a name conflict with a column of `this`.
    join : Table | Column.Column -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        case other of
            Column.Column _ -> this.join other.to_table on drop_unmatched left_suffix right_suffix
            Table t ->
                Table (this.java_table.join t drop_unmatched on left_suffix right_suffix)

    ## Returns a new Table without rows that contained missing values in any of
       the columns.
    drop_missing_rows : Table
    drop_missing_rows =
        cols = this.columns
        case cols.not_empty of
            True ->
                any_missing_mask = cols.map .is_missing . reduce (||)
                non_missing_mask = any_missing_mask.not
                this.where non_missing_mask
            False -> this

    ## Returns a new Table without columns that contained any missing values.
    drop_missing_columns : Table
    drop_missing_columns =
        non_missing = this.columns . filter (col -> col.count_missing == 0)
        index = this.java_table.getIndex
        Table (Java_Table.new (non_missing.map .java_column . to_array) index)

    ## Returns the amount of rows in this table.
    row_count : Integer
    row_count = this.java_table.rowCount

    ## Returns a Table describing this table's contents.

       The table lists all columns, counts of non-null items and storage types
       of each column.
    info : Table
    info =
        cols = this.columns
        here.new [["Column", cols.map .name], ["Items Count", cols.map .count], ["Storage Type", cols.map .storage_type]] . set_index "Column"

    ## Returns an aggregate table resulting from grouping the elements by the
       value of the specified column.

       If the `by` argument is not set, the index is used for grouping instead.

       > Example
         Creates a simple table and computes aggregation statistics:
            name = ['name', ["foo", "bar", "foo", "baz", "foo", "bar", "quux"]]
            price = ['price', [0.4, 3.5, Nothing, 6.7, Nothing, 97, Nothing]]
            quantity = ['quantity', [10, 20, 30, 40, 50, 60, 70]]
            t = Table.new [name, price, quantity]

            agg = t.group by='name'

            records_num = agg.count
            total_quantity = agg.at 'quantity' . sum
            mean_price = agg.at 'price' . mean

            Table.join [records_num, total_quantity, mean_price]
    group : Text | Nothing -> Aggregate_Table
    group by=Nothing =
        Aggregate_Table (this.java_table.group by)

    ## UNSTABLE

       Sorts the table according to the specified rules.

       Arguments:
         - by: specifies the columns used for reordering the table. This
           argument may be one of:
             - a text: the text is treated as a column name.
             - a column: any column, that may or may not belong to this table.
               Sorting by a column will result in reordering the rows of this
               table in a way that would result in sorting the given column.
             - an order rule: specifies both the sorting column and additional
               settings, that will take precedence over the global parameters of
               this sort operation. The `column` field of the rule may be a text
               or a column, with the semantics described above.
             - a vector of any of the above: this will result in a hierarchical
               sorting, such that the first rule is applied first, the second is
               used for breaking ties, etc.
         - order: specifies the default sort order for this operation. All the
           rules specified in the `by` argument will default to this setting,
           unless specified in the rule.
         - missing_last: specifies the default placement of missing values when
           compared to non-missing ones. This setting may be overriden by the
           particular rules of the `by` argument.  Note thet this argument is
           independent from `order`, i.e. missing values will always be sorted
           according to this rule, ignoring the ascending / descending setting.

       > Example
         Sorting `table` in ascending order by the value in column `'Quantity'`
             table.sort by='Quantity'

       > Example
         Sorting `table` in descending order by the value in column `'Quantity'`,
         placing missing values at the top of the table.
             table.sort by='Quantity' order=Sort_Order.Descending missing_last=False

       > Example
         Sorting `table` in ascending order by the value in column `'Quantity'`,
         using the value in column `'Rating'` for breaking ties.
             table.sort by=['Quantity', 'Rating']

       > Example
         Sorting `table` in ascending order by the value in column `'Quantity'`,
         using the value in column `'Rating'` in descending order for breaking
         ties.
             table.sort by=['Quantity', Order_Rule 'Rating' (order=Sort_Order.Descending)]

       > Example
         Sorting `table` in ascending order by the value in an externally
         computed column, using the value in column `'Rating'` for breaking
         ties.
             quality_ratio = table.at 'Rating' / table.at 'Price'
             table.sort by=[quality_ratio, 'Rating']

       > Sorting `table` in ascending order, by the value in column
         `'position'`, using a custom comparator function.
             manhattan_comparator a b = (a.x.abs + a.y.abs) . compare_to (b.x.abs + b.y.abs)
             table.sort by=(Order_Rule 'position' comparator=manhattan_comparator)
    sort : Text | Column.Column | Order_Rule | Vector.Vector (Text | Column.Column | Order_Rule) -> Sort_Order -> Boolean -> Table
    sort by order=Sort_Order.Ascending missing_last=True = Panic.recover <|
        rules = this.build_java_order_rules by order missing_last
        fallback_cmp = here.comparator_to_java .compare_to
        mask = OrderBuilder.buildOrderMask rules.to_array fallback_cmp
        new_table = this.java_table.applyMask mask
        Table new_table

    ## PRIVATE
    build_java_order_rules rules order missing_last = case rules of
        Text -> [this.build_java_order_rule rules order missing_last]
        Column.Column _ -> [this.build_java_order_rule rules order missing_last]
        Order_Rule _ _ _ _ -> [this.build_java_order_rule rules order missing_last]
        Vector.Vector _ -> rules.map (this.build_java_order_rule _ order missing_last)

    ## PRIVATE
    build_java_order_rule rule order missing_last =
        order_bool = case order of
            Sort_Order.Ascending -> True
            Sort_Order.Descending -> False
        case rule of
            Text ->
                column = Panic.rethrow (this.at rule)
                OrderBuilder.OrderRule.new column.java_column Nothing order_bool missing_last
            Column.Column c ->
                OrderBuilder.OrderRule.new c Nothing order_bool missing_last
            Order_Rule col_ref cmp rule_order rule_nulls_last ->
                c = case col_ref of
                    Text -> this.at col_ref . java_column
                    Column.Column c -> c
                o = case rule_order of
                    Nothing -> order_bool
                    Sort_Order.Ascending -> True
                    Sort_Order.Descending -> False
                nulls = case rule_nulls_last of
                    Nothing -> missing_last
                    _ -> rule_nulls_last
                java_cmp = case cmp of
                    Nothing -> Nothing
                    c -> here.comparator_to_java c
                OrderBuilder.OrderRule.new c java_cmp o nulls

    ## UNSTABLE

       Concatenates `other` to `this`. Any column that is present in one table,
       but missing in another, will be `Nothing`-padded in the positions
       corresponding to the missing column.
    concat other =
        Table (this.java_table.concat other.java_table)

## PRIVATE
comparator_to_java cmp x y = cmp x y . to_sign

## Represents a table with grouped rows.
type Aggregate_Table
    type Aggregate_Table java_table

    ## Returns a vector of aggregate columns in this table.
    columns : Vector.Vector
    columns = Vector.Vector this.java_table.getColumns . map Column.Aggregate_Column

    ## Returns a table containing columns resulting from calling `values` on
       each column in `this`.
    values : Table
    values = this.columns . map (_.values name_suffix='') . reduce .join

    ## Returns a column containing the number of elements in each group.
    count : Column
    count = Column.Column this.java_table.count

    ## Returns an aggregate column with the given name, contained in this table.
    at : Text -> Column | Nothing
    at name = case this.java_table.getColumnByName name of
        Nothing -> Nothing
        c -> Column.Aggregate_Column c

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print : Integer -> Nothing
    print show_rows=10 = this.values.print show_rows

## PRIVATE
from_columns cols = Table (Java_Table.new cols.to_array)

## Creates a new table from a vector of column names and a vector of vectors
   specifying row contents.

   Arguments:
     - header: a list of texts specifying the column names
     - rows: a vector of vectors, specifying the contents of each table row.
       the length of each element of `rows` must be equal in length to `header`.

   > Example
     The code below creates a table with 3 columns, named `foo`, `bar`, and
     `baz`, containing `[1, 2, 3]`, `[True, False, True]`, and `['a', 'b', 'c']`,
     respectively.
         header = [ 'foo' , 'bar' , 'baz' ]
         row_1 =  [ 1     , True  , 'a'   ]
         row_2 =  [ 2     , False , 'b'   ]
         row_3 =  [ 3     , True  , 'c'   ]
         Table.from_rows header [row_1, row_2, row_3]
from_rows : Vector.Vector -> Vector.Vector -> Table
from_rows header rows =
    columns = header.map_with_index i-> name-> [name, rows.map (_.at i)]
    here.new columns

## Creates a new table from a vector of `[name, items]` pairs.

   > Example
     Create a new table with the given in two columns:
         Table.new [["foo", [1, 2, 3]], ["bar", [True, False, True]]]
new columns =
    cols = columns.map c->
        Column.from_vector (c.at 0) (c.at 1) . java_column
    here.from_columns cols

## Joins a vector of tables (or columns) into a single table, using each table's
   index as the join key. Particularly useful for joining multiple columns
   derived from one original table into a new table.
join : Vector -> Table
join tables =
    tables.reduce .join

## PRIVATE

   Ensures that the `txt` has at least `len` characters by appending spaces at
   the end.
pad txt len =
    true_len = txt.characters.length
    txt + (" ".repeat (len - true_len))

## PRIVATE
ansi_bold enabled txt =
    case Platform.os of
        ## Output formatting for Windows is not currently supported.
        Platform.Windows -> txt
        _ -> if enabled then '\e[1m' + txt + '\e[m' else txt

## PRIVATE

   A helper function for creating an ASCII-art representation of tabular data.

   Arguments:
   - header: vector of names of columns in the table.
   - rows: a vector of rows, where each row is a vector that contains a text
     representation of each cell
   - indices_count: the number specifying how many columns should be treated as
     indices; this will make them in bold font if `format_term` is enabled.
   - format_term: a boolean flag, specifying whether to use ANSI escape codes
     for rich formatting in the terminal.
print_table : Vector Text -> (Vector (Vector Text)) -> Integer -> Boolean -> Text
print_table header rows indices_count format_term =
    content_lengths = Vector.new header.length i->
        max_row = 0.up_to rows.length . fold 0 a-> j-> Math.max a (rows.at j . at i . characters . length)
        Math.max max_row (header.at i . characters . length)
    header_line = header.zip content_lengths here.pad . map (here.ansi_bold format_term) . join ' | '
    divider = content_lengths . map (l -> "-".repeat l+2) . join '+'
    row_lines = rows.map r->
        x = r.zip content_lengths here.pad
        ixes = x.take_start indices_count . map (here.ansi_bold format_term)
        with_bold_ix = ixes + x.drop_start indices_count
        y = with_bold_ix . join ' | '
        " " + y
    ([" " + header_line, divider] + row_lines).join '\n'
