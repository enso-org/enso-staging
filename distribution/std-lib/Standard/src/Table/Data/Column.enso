from Standard.Base import all

import Standard.Table.Data.Table
import Standard.Table.Data.Storage

polyglot java import org.enso.table.data.table.Column as Java_Column
polyglot java import org.enso.table.operations.OrderBuilder

type Column
    type Column java_column

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        java_col = this.java_column
        index = java_col.getIndex
        col_name = java_col.getName
        storage = java_col.getStorage
        num_rows = java_col.getSize
        display_rows = Math.min num_rows show_rows
        items = Vector.new display_rows num->
            row = if storage.isNa num then "Nothing" else
                here.get_item_string storage num
            [index.ilocString num, row]
        table = Table.print_table [index.getName, col_name] items 1 format_terminal
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Element-wise equality comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    == : Column | Any -> Column
    == other =
        here.run_vectorized_binary_op this "==" (==) other

    ## Element-wise non-equality comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    != : Column | Any -> Column
    != other = (this == other).not

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    >= : Column | Any -> Column
    >= other =
        here.run_vectorized_binary_op this ">=" (>=) other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    <= : Column | Any -> Column
    <= other =
        here.run_vectorized_binary_op this "<=" (<=) other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    > : Column | Any -> Column
    > other =
        here.run_vectorized_binary_op this ">" (>) other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    < : Column | Any -> Column
    < other = here.run_vectorized_binary_op this "<" (<) other

    ## Element-wise addition. Returns a column containing the result
       of adding `other` to each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    + : Column | Any -> Column
    + other = here.run_vectorized_binary_op this '+' (+) other

    ## Element-wise subtraction. Returns a column containing the result
       of subtracting `other` from each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    - : Column | Any -> Column
    - other = here.run_vectorized_binary_op this '-' (-) other

    ## Element-wise multiplication. Returns a column containing the result
       of multiplying `other` by each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    * : Column | Any -> Column
    * other = here.run_vectorized_binary_op this '*' (*) other

    ## Element-wise division. Returns a column containing the result
       of dividing each element of `this` by `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    / : Column | Any -> Column
    / other = here.run_vectorized_binary_op this '/' (/) other

    ## Element-wise boolean conjunction. Returns a column containing the result
       of performing the boolean `and` on `other` and each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    && : Column | Any -> Column
    && other =
        here.run_vectorized_binary_op this "&&" (&&) other

    ## Element-wise boolean disjunction. Returns a column containing the result
       of performing the boolean `or` on `other` and each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    || : Column | Any -> Column
    || other =
        here.run_vectorized_binary_op this "||" (||) other

    ## Boolean negation of each element in this column.
    not : Column
    not =
        here.run_vectorized_unary_op this "not" .not

    ## Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.
    is_missing : Column
    is_missing = here.run_vectorized_unary_op this "is_missing" (== Nothing)

    ## Returns a column of booleans, with `True` items at the positions where
       this column does not contain a `Nothing`.
    is_present : Column
    is_present = this.is_missing.not

    ## Returns a new column where missing values have been replaced with the
       provided default.
    fill_missing : Any -> Column
    fill_missing default =
        storage = this.java_column.getStorage
        index = this.java_column.getIndex
        name = this.java_column.getName
        new_st = storage.fillMissing default
        col = Java_Column.new name index new_st
        Column col

    ## Returns a new column without rows that had missing values.
    drop_missing : Any -> Column
    drop_missing =
        this.where this.is_missing.not

    ## Checks for each element of the column if it starts with `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    starts_with : Column | Text -> Column
    starts_with other =
        here.run_vectorized_binary_op this "starts_with" (a -> b -> a.starts_with b) other

    ## Checks for each element of the column if it ends with `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    ends_with : Column | Text -> Column
    ends_with other =
        here.run_vectorized_binary_op this "ends_with" (a -> b -> a.ends_with b) other

    ## Checks for each element of the column if it contains `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    contains : Column | Text -> Column
    contains other =
        here.run_vectorized_binary_op this "contains" (a -> b -> a.contains b) other

    ## Applies `function` to each item in this column and returns the column
       of results.
    map : (Any -> Any) -> Column
    map function =
        storage = this.java_column.getStorage
        index = this.java_column.getIndex
        new_st = storage.map Nothing function
        col = Java_Column.new "Result" index new_st
        Column col

    ## Applies `function` to consecutive pairs of elements of `this` and `that`
       and returns a column of results.
    zip : Column -> (Any -> Any -> Any) -> Column
    zip that function =
        s1 = this.java_column.getStorage
        ix = this.java_column.getIndex
        s2 = that.java_column.getStorage
        rs = s1.zip Nothing function s2
        Column (Java_Column.new "Result" ix rs)

    ## Returns a new column, containing the same elements as `this`, but with
       the given name.
    rename name = Column (this.java_column.rename name)

    ## Returns the name of this column.
    name : Text
    name = this.java_column.getName

    ## Returns the length of this column.
    length : Integer
    length = this.java_column . getSize

    ## Returns the number of missing items in this column.
    count_missing : Integer
    count_missing = this.java_column.getStorage.countMissing

    ## Returns the number of non-null items in this column.
    count : Integer
    count = this.length - this.count_missing

    ## Returns the index of this column, as a column (indexed by itself).
       Returns `Nothing` if there is no index set.
    index : Column | Nothing
    index = case this.java_column.getIndex.toColumn of
        Nothing -> Nothing
        i -> Column i

    ## Returns the item contained in this column at the given index.
    at : Integer -> Any
    at index =
        storage = this.java_column.getStorage
        if storage.isNa index then Nothing else
            storage.getItem index

    ## Selects only the rows of this column that correspond to `True` values in
       `indexes`.
       This is useful for filtering the rows by given predicate.

       > Example
         Select only the rows of `my_column` where the `status_column` column
         has the value `"Valid"`
             my_column.where (status_column == "Valid")
    where : Column -> Column
    where indexes =
        Column (this.java_column.mask indexes.java_column)

    ## Returns a vector containing all the elements in this column.
    to_vector : Vector
    to_vector = Vector.Vector this.java_column.getStorage.toList

    ## Returns the underlying storage type of this column.
    storage_type : Storage.Type
    storage_type =
        tp = this.java_column.getStorage.getType
        if tp == Storage_Type_String then Storage.Text else
            if tp == Storage_Type_Long then Storage.Integer else
                if tp == Storage_Type_Double then Storage.Decimal else
                    if tp == Storage_Type_Bool then Storage.Boolean else
                        Storage.Any

    ## Converts this column to JSON.
    to_json : Json
    to_json =
        col = this.java_column
        name = col.getName
        storage = col.getStorage
        json_factory = case this.storage_type of
            Storage.Text -> Json.String
            Storage.Integer -> Json.Number
            Storage.Decimal -> Json.Number
            Storage.Boolean -> Json.Boolean
            _ -> .to_json
        storage_json = Json.Array (here.storage_to_json storage json_factory)
        fields = Map.singleton "name" (Json.String name) . insert "data" storage_json
        Json.Object fields

    ## Efficiently joins two tables based on either the index or the specified
       key column.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index values in `other` are not
       unique, the corresponding rows of `this` will be duplicated in the
       result.

       Arguments:
         - other: the table being the right operand of this join operation.
         - on: the column of `this` that should be used as the join key. If
               this argument is not provided, the index of `this` will be used.
         - drop_unmatched: whether the rows of `this` without corresponding
                           matches in `other` should be dropped from the result.
         - left_suffix: a suffix that should be added to the columns of `this`
                        when there's a name conflict with a column of `other`.
         - right_suffix: a suffix that should be added to the columns of `other`
                         when there's a name conflict with a column of `this`.
    join : Table.Table | Column -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        this.to_table.join other on drop_unmatched left_suffix right_suffix

    ## Converts this column into a single-column table.
    to_table : Table.Table
    to_table = Table.Table this.java_column.toTable

    ## UNSTABLE
       ADVANCED

       Shows a JSON serialization of a truncated version of this column, for the
       benefit of visualization in the IDE.
    to_default_visualization_data : Text
    to_default_visualization_data =
        size = ['length', this.length]
        name = ['name', this.name]
        max_data = 100
        data = ['data', this.to_vector.take_start max_data]
        Json.from_pairs [size, name, data] . to_text

    ## Sums the values in this column.
    sum : Any
    sum = this.java_column.aggregate 'sum' (x-> Vector.Vector x . reduce (+)) True

    ## Computes the maximum element of this column.
    max : Any
    max =
        this.java_column.aggregate 'max' (x-> Vector.Vector x . reduce Math.max) True

    ## Computes the minimum element of this column.
    min : Any
    min =
        this.java_column.aggregate 'min' (x-> Vector.Vector x . reduce Math.min) True

    ## Computes the mean of non-missing elements of this column.
    mean : Any
    mean =
        vec_mean v = if v.length == 0 then Nothing else
            (Vector.Vector v).reduce (+) / v.length
        this.java_column.aggregate 'mean' vec_mean True

    ## UNSTABLE

       Sorts the column according to the specified rules.

       Arguments:
         - order: specifies the default sort order for this operation.
         - missing_last: specifies the default placement of missing values when
           compared to non-missing ones. Note thet this argument is independent
           from `order`, i.e. missing values will always be sorted according to
           this rule, ignoring the ascending / descending setting.
         - comparator: function taking two items in this column and returning
           an ordering. If specified, it is used instead of the natural
           (`.compare_to`) ordering.

       > Example
         Sorting `column` in ascending order.
             column.sort

       > Example
         Sorting `column` in descending order, placing missing values at the
         top of the resulting column.
             column.sort order=Sort_Order.Descending missing_last=False

       > Sorting `column` in ascending order, using a custom comparator
         function.
             manhattan_comparator a b = (a.x.abs + a.y.abs) . compare_to (b.x.abs + b.y.abs)
             column.sort comparator=manhattan_comparator
    sort : Sort_Order -> Boolean -> (Any -> Any -> Ordering) | Nothing -> Column
    sort order=Sort_Order.Ascending missing_last=True comparator=Nothing =
        order_bool = case order of
            Sort_Order.Ascending -> True
            Sort_Order.Descending -> False
        java_cmp = case comparator of
            Nothing -> Nothing
            cmp -> Table.comparator_to_java cmp
        rule = OrderBuilder.OrderRule.new this.java_column java_cmp order_bool missing_last
        fallback_cmp = Table.comparator_to_java .compare_to
        mask = OrderBuilder.buildOrderMask [rule].to_array fallback_cmp
        new_col = this.java_column.applyMask mask
        Column new_col

## Creates a new column given a name and a vector of elements.
from_vector : Text -> Vector -> Column
from_vector name items = Column (Java_Column.fromItems name items.to_array)

## Wraps a column grouped by its index. Allows performing aggregation operations
   on the contained values.
type Aggregate_Column
    type Aggregate_Column java_column

    ## Converts this aggregate column into a column, aggregating groups
       with the provided `function`.

       Arguments:
         - function: the function used for value aggregation. Values belonging
                     to each group are passed to this function in a vector.
         - skip_missing: controls whether missing values should be included
                         in groups.
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    reduce : (Vector.Vector -> Any) -> Boolean -> Text -> Column
    reduce function skip_missing=True name_suffix="_result" =
        f arr = function (Vector.Vector arr)
        r = this.java_column.aggregate Nothing name_suffix f skip_missing
        Column r

    ## Sums the values in each group.

       Arguments:
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    sum : Text -> Column
    sum name_suffix='_sum' =
        r = this.java_column.aggregate 'sum' name_suffix (x-> Vector.Vector x . reduce (+)) True
        Column r

    ## Computes the maximum element of each group.

       Arguments:
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    max : Text -> Column
    max name_suffix='_max' =
        r = this.java_column.aggregate 'max' name_suffix (x-> Vector.Vector x . reduce Math.max) True
        Column r

    ## Computes the minimum element of each group.

       Arguments:
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    min : Text -> Column
    min name_suffix='_min' =
        r = this.java_column.aggregate 'min' name_suffix (x-> Vector.Vector x . reduce Math.min) True
        Column r

    ## Computes the number of non-missing elements in each group.

       Arguments:
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    count : Text -> Column
    count name_suffix='_count' =
        r = this.java_column.aggregate 'count' name_suffix (x-> x.length) True
        Column r

    ## Computes the mean of non-missing elements in each group.

       Arguments:
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    mean : Text -> Column
    mean name_suffix='_mean' =
        vec_mean v = if v.length == 0 then Nothing else
            (Vector.Vector v).reduce (+) / v.length
        r = this.java_column.aggregate 'mean' name_suffix vec_mean True
        Column r

    ## Gathers all elements in a group into a vector and returns a column of
       such vectors.

       Arguments:
         - name_suffix: a suffix that will be appended to the original column
                        name to generate the resulting column name.
    values : Text -> Column
    values name_suffix='_values' =
        r = this.java_column.aggregate Nothing name_suffix Vector.Vector False
        Column r

## PRIVATE
run_vectorized_binary_op column name fallback_fn operand = case operand of
    Column col2 ->
        s1 = column.java_column.getStorage
        ix = column.java_column.getIndex
        s2 = col2.getStorage
        rs = s1.zip name fallback_fn s2
        Column (Java_Column.new "Result" ix rs)
    _ ->
        s1 = column.java_column.getStorage
        ix = column.java_column.getIndex
        rs = s1.bimap name fallback_fn operand
        Column (Java_Column.new "Result" ix rs)

## PRIVATE
run_vectorized_unary_op column name fallback_fn =
    s = column.java_column.getStorage
    ix = column.java_column.getIndex
    rs = s.map name fallback_fn
    Column (Java_Column.new "Result" ix rs)


## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.LONG`
storage_type_long = 1

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.DOUBLE`
storage_type_double = 2

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.STRING`
storage_type_string = 3

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.BOOL`
storage_type_bool = 4

## PRIVATE
storage_to_json storage factory =
    Vector.new storage.size ix->
        if storage.isNa ix then Json.Null else
            factory (storage.getItem ix)

## PRIVATE
get_item_string column ix =
    tp = column.getType
    if tp == Storage_Type_String then column.getItem ix else
        column.getItem ix . to_text

