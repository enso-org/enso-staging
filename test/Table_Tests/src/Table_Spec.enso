from Standard.Base import all
from Standard.Table import all

import Standard.Table.Data.Storage
import Standard.Test

type My x y

My.== that = case that of
    My x1 y1 -> (this.x + this.y) == (x1 + y1)
    _ -> False

My.compare_to that = this.x+this.y . compare_to that.x+that.y

My.frobnicate = case this of
    My x1 y1 -> My y1 x1

spec =
    Test.group "Parsing" <|
        Test.specify "should parse a simple numeric table" <|
            simple_empty = (Enso_Project.data / "simple_empty.csv") . read_csv
            c_1_data = [1, 4, 7, 10]
            c_2_data = [2, Nothing, 8, 11]
            c_3_data = [Nothing, 6, 9, 12]

            c_1 = Json.from_pairs [["name", "a"], ["data", c_1_data]]
            c_2 = Json.from_pairs [["name", "b"], ["data", c_2_data]]
            c_3 = Json.from_pairs [["name", "c"], ["data", c_3_data]]

            expected = Json.from_pairs [["columns", [c_1, c_2, c_3]]]

            simple_empty.to_json.should_equal expected
        Test.specify "should correctly infer types of varied-type columns" <|
            varied_column = (Enso_Project.data / "varied_column.csv") . read_csv has_header=False
            c_1_data = ["2005-02-25", "2005-02-28", "4", "2005-03-02", Nothing, "2005-03-04", "2005-03-07", "2005-03-08"]
            c_2_data = ["2005-02-25", "2005-02-28", "2005-03-01", Nothing, "2005-03-03", "2005-03-04", "2005-03-07", "2005-03-08"]
            c_3_data = [1, 2, 3, 4, 5, Nothing, 7, 8]
            c_4_data = [1, 2, 3, 4, 5, 6, 7, 8]
            c_5_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.25, 7.0, 8.0]
            c_6_data = ['1', '2', '3', '4', '5', '6.25', '7', 'osiem']

            c_1 = Json.from_pairs [["name", "C0"], ["data", c_1_data]]
            c_2 = Json.from_pairs [["name", "C1"], ["data", c_2_data]]
            c_3 = Json.from_pairs [["name", "C2"], ["data", c_3_data]]
            c_4 = Json.from_pairs [["name", "C3"], ["data", c_4_data]]
            c_5 = Json.from_pairs [["name", "C4"], ["data", c_5_data]]
            c_6 = Json.from_pairs [["name", "C5"], ["data", c_6_data]]

            expected = Json.from_pairs [["columns", [c_1, c_2, c_3, c_4, c_5, c_6]]]
            varied_column.to_json.should_equal expected

    Test.group "JSON serialization" <|
        Test.specify "should serialize all column types to correct JSON" <|
            c_1 = [1, 2, 3, Nothing]
            c_2 = [1.2, 3.4, 5.6, 7.8]
            c_3 = [Nothing, 'foo', 'bar', 'baz']
            c_4 = [True, False, True, True]
            c_5 = [My 1 2, My True False, My 6.3 6.4, [1, 2, 3]]

            t = Table.new [['a', c_1], ['b', c_2], ['c', c_3], ['d', c_4], ['e', c_5]]

            j_c_1 = Json.from_pairs [["name", "a"], ["data", c_1]]
            j_c_2 = Json.from_pairs [["name", "b"], ["data", c_2]]
            j_c_3 = Json.from_pairs [["name", "c"], ["data", c_3]]
            j_c_4 = Json.from_pairs [["name", "d"], ["data", c_4]]
            j_c_5 = Json.from_pairs [["name", "e"], ["data", c_5]]

            expected = Json.from_pairs [["columns", [j_c_1, j_c_2, j_c_3, j_c_4, j_c_5]]]

            t.to_json.should_equal expected

    Test.group "JSON construction" <|
        Test.specify "should allow converting a JSON array into a table" <|
            r_1 = Json.from_pairs [['foo', 20], ['bar', 'baz'], ['baz', False]]
            r_2 = Json.from_pairs [['bar', 'xyz'], ['baz', True]]
            r_3 = Json.from_pairs [['baz', False], ['foo', 13]]
            t = [r_1, r_2, r_3].to_json.to_table ['foo', 'bar', 'baz']
            t.columns.map .name . should_equal ['foo', 'bar', 'baz']
            t.at 'foo' . to_vector . should_equal [20, Nothing, 13]
            t.at 'bar' . to_vector . should_equal ['baz', 'xyz', Nothing]
            t.at 'baz' . to_vector . should_equal [False, True, False]

    Test.group 'Construction' <|
        Test.specify 'should allow creating a table from rows' <|
            header = ['foo', 'bar']
            rows = [[1, False], [2, True], [3, False]]
            r = Table.from_rows header rows

            r.at 'foo' . to_vector . should_equal [1, 2, 3]
            r.at 'bar' . to_vector . should_equal [False, True, False]

    Test.group "Vector conversion" <|
        Test.specify "should allow converting columns to valid vectors" <|
            col_1 = Column.from_vector 'x' [1, 2, 3]
            col_1.to_vector.reduce (+) . should_equal 6

            col_2 = Column.from_vector 'y' [My 1 2, My 2 3]
            col_2.to_vector.map (my -> my.x + my.y) . should_equal [3, 5]

            col_3 = Column.from_vector 'z' [False, True, False]
            col_3.to_vector.map .not . should_equal [True, False, True]

    Test.group "Mapping Operations" <|
        Test.specify "should allow mapping a function over a column" <|
            c_str = Column.from_vector 'x' ['a', 'b', Nothing, 'b']
            c_str.map (+ "x") . to_vector . should_equal ['ax', 'bx', Nothing, 'bx']
            c_int = Column.from_vector 'x' [1, 2, 1, 5, 1]
            c_int.map (+ 1) . to_vector . should_equal [2, 3, 2, 6, 2]
            c_dec = Column.from_vector 'x' [1.9, 2.0, 1.2, 5.6, 1.9]
            c_dec.map (+ 1.5) . to_vector . should_equal [3.4, 3.5, 2.7, 7.1, 3.4]
            c_bool = Column.from_vector 'x' [True, False, Nothing, True, False]
            c_bool.map (_.to_text) . to_vector . should_equal ["True", "False", Nothing, "True", "False"]
            c_any = Column.from_vector 'x' [My 1 6, My 6 3, My 2 5, My 3 4, My 200 300]
            c_any.map (_.frobnicate) . to_vector . should_equal [My 6 1, My 3 6, My 5 2, My 4 3, My 300 200]

        Test.specify "should allow zipping columns with a custom function" <|
            b = Column.from_vector 'w' [6.3, 3.1, 5.2, 4.6, 8.0]
            a = Column.from_vector 'z' ['foo', 'bar', 'baz', 'spam', 'eggs']
            c = a.zip b x-> y-> x + y.to_text
            c.to_vector.should_equal ['foo6.3', 'bar3.1', 'baz5.2', 'spam4.6', 'eggs8.0']

        Test.specify "should handle vectorized equality and fall back on non-vectorized if needed" <|
            c_str = Column.from_vector 'x' ['a', 'b', Nothing, 'b']
            (c_str == 'b').to_vector.should_equal [False, True, Nothing, True]
            c_int = Column.from_vector 'x' [1, 2, 1, 5, 1]
            (c_int == 1).to_vector.should_equal [True, False, True, False, True]
            c_dec = Column.from_vector 'x' [1.9, 2.0, 1.2, 5.6, 1.9]
            (c_dec == 1.9).to_vector.should_equal [True, False, False, False, True]
            c_bool = Column.from_vector 'x' [True, False, Nothing, True, False]
            (c_bool == False).to_vector.should_equal [False, True, Nothing, False, True]
            c_any = Column.from_vector 'x' [My 1 6, My 6 3, My 2 5, My 3 4, My 200 300]
            (c_any == My 7 0).to_vector.should_equal [True, False, True, True, False]

        Test.specify "should switch between maps and zips based on argument type" <|
            a = Column.from_vector 'x' [0, 1, 7, 3, 6]
            b = Column.from_vector 'w' [6.3, 3.1, 5.2, Nothing, 8]
            (a + 3.2).to_vector.should_equal [3.2, 4.2, 10.2, 6.2, 9.2]
            (a + b).to_vector.should_equal [6.3, 4.1, 12.2, Nothing, 14]
            gt_const = a > 5
            gt_const.to_vector.should_equal [False, False, True, False, True]
            gt_b = a > b
            gt_b.to_vector.should_equal [False, False, True, Nothing, False]
            both = gt_const && gt_b
            both.to_vector.should_equal [False, False, True, Nothing, False]

        Test.specify "should handle Text operations" <|
            a = Column.from_vector 'a' ["abab", "abc", Nothing, "bca", "acca"]
            nils = [Nothing, Nothing, Nothing, Nothing, Nothing]

            a.starts_with "ab" . to_vector . should_equal [True, True, Nothing, False, False]
            b = Column.from_vector 'b' ["ba", "ab", "d", Nothing, "ac"]
            a.starts_with b . to_vector . should_equal [False, True, Nothing, Nothing, True]
            a.starts_with Nothing . to_vector . should_equal nils

            a.ends_with "ca" . to_vector . should_equal [False, False, Nothing, True, True]
            c = Column.from_vector 'c' ["ab", "b", "d", Nothing, "cc"]
            a.ends_with c . to_vector . should_equal [True, False, Nothing, Nothing, False]
            a.ends_with Nothing . to_vector . should_equal nils

            a.contains "c" . to_vector . should_equal [False, True, Nothing, True, True]
            a.contains c . to_vector . should_equal [True, True, Nothing, Nothing, True]
            a.contains Nothing . to_vector . should_equal nils

    Test.group "Masking Tables" <|
        Test.specify "should allow selecting table rows based on a boolean column" <|
            df = (Enso_Project.data / "simple_empty.csv").read_csv
            r = df.where (Column.from_vector 'x' [True, False, False, True])
            r.at "a" . to_vector . should_equal [1, 10]
            r.at "b" . to_vector . should_equal [2, 11]
            r.at "c" . to_vector . should_equal [Nothing, 12]
        Test.specify "should treat NA values in the mask as false and extend the mask with NAs" <|
            df = (Enso_Project.data / "simple_empty.csv").read_csv
            r = df.where (Column.from_vector 'x' [Nothing, True, False])
            r.at "a" . to_vector . should_equal [4]
            r.at "b" . to_vector . should_equal [Nothing]
            r.at "c" . to_vector . should_equal [6]
        Test.specify "should work correctly if a mask is bigger than the table itself" <|
            df = (Enso_Project.data / "simple_empty.csv").read_csv
            r = df.where (Column.from_vector 'x' [True, False, False, False, True])
            r.at "a" . to_vector . should_equal [1]
            r.at "b" . to_vector . should_equal [2]
            r.at "c" . to_vector . should_equal [Nothing]

    Test.group "Masking Columns" <|
        Test.specify "should allow selecting column rows based on a boolean column" <|
            df = (Enso_Project.data / "simple_empty.csv").read_csv
            mask = Column.from_vector 'x' [True, False, False, True]
            df.at "a" . where mask . to_vector . should_equal [1, 10]
            df.at "c" . where mask . to_vector . should_equal [Nothing, 12]

        Test.specify "should work correctly if a mask is bigger than the column itself" <|
            col = Column.from_vector "col" [1, 2]
            mask = Column.from_vector 'x' [True, False, False, True]
            col.where mask . to_vector . should_equal [1]

    Test.group "Joining Tables" <|
        a_0 = ['x', [0, 1, 7, 3, 6]]
        a_1 = ['y', ["foo", "bar", "baz", "spam", "eggs"]]
        a = Table.new [a_0, a_1]
        b_0 = ['w', [6, 3, 5, 5, 3, 3]]
        b_1 = ['z', ["foo", "foo", "bar", "spam", "bar", "eggs"]]
        b = Table.new [b_0, b_1]

        Test.specify "should allow joining tables index-on-index" <|
            r_1 = a.set_index 'x' . join (b.set_index 'w')
            r_1.at 'y' . to_vector . should_equal ['foo', 'bar', 'baz', 'spam', 'spam', 'spam', 'eggs']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, Nothing, 'foo', 'bar', 'eggs', 'foo']
            r_2 = a.set_index 'y' . join (b.set_index 'z') drop_unmatched=True
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [6, 3, 5, 3, 5, 3]

        Test.specify "should allow joining tables column-on-index" <|
            r_1 = a.join (b.set_index 'w') on='x'
            r_1.at 'y' . to_vector . should_equal ['foo', 'bar', 'baz', 'spam', 'spam', 'spam', 'eggs']
            r_1.at 'z' . to_vector . should_equal [Nothing, Nothing, Nothing, 'foo', 'bar', 'eggs', 'foo']
            r_2 = a.join (b.set_index 'z') drop_unmatched=True on='y'
            r_2.at 'x' . to_vector . should_equal [0, 0, 1, 1, 3, 6]
            r_2.at 'w' . to_vector . should_equal [6, 3, 5, 3, 5, 3]

        Test.specify "should allow joining tables on the default index" <|
            x = Table.new [['x', [1, 2, 4, 6]]]
            y = Table.new [['y', [8, 9]]]
            r_1 = x.join y
            r_1.at 'x' . to_vector . should_equal [1, 2, 4, 6]
            r_1.at 'y' . to_vector . should_equal [8, 9, Nothing, Nothing]

            r_2 = x.join y drop_unmatched=True
            r_2.at 'x' . to_vector . should_equal [1, 2]
            r_2.at 'y' . to_vector . should_equal [8, 9]

        Test.specify "should append suffixes to disambiguate column names" <|
            x = Table.new [['x', [1, 2, 4, 6]]]
            y = Table.new [['x', [8, 9]]]
            r_1 = x.join y
            r_1.columns.map .name . should_equal ['x_left', 'x_right']

            r_2 = x.join y left_suffix='_old' right_suffix='_new'
            r_2.columns.map .name . should_equal ['x_old', 'x_new']

    Test.group "Filling Missing Values" <|
        Test.specify "should coerce non-coercible types to Object" <|
            strs = Column.from_vector 'x' ["a", Nothing, "b", Nothing]
            strs_filled = strs.fill_missing False
            strs_filled.to_vector . should_equal ["a", False, "b", False]
            strs_filled.storage_type . should_equal Storage.Any

            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing "X"
            ints_filled.to_vector . should_equal [1, "X", 2, "X"]
            ints_filled.storage_type . should_equal Storage.Any

            bools = Column.from_vector 'x' [True, False, Nothing]
            bools_filled = bools.fill_missing "X"
            bools_filled.to_vector . should_equal [True, False, "X"]
            bools_filled.storage_type . should_equal Storage.Any

        Test.specify "should coerce long and double types to double" <|
            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing 0.5
            ints_filled.to_vector . should_equal [1.0, 0.5, 2.0, 0.5]
            ints_filled.storage_type . should_equal Storage.Decimal

            decimals = Column.from_vector 'x' [0.5, Nothing, Nothing, 0.25]
            decimals_filled = decimals.fill_missing 42
            decimals_filled.to_vector . should_equal [0.5, 42.0, 42.0, 0.25]
            decimals_filled.storage_type . should_equal Storage.Decimal

        Test.specify "should keep String, Boolean, Long and Double type" <|
            strs = Column.from_vector 'x' ["a", Nothing, "b", Nothing]
            strs_filled = strs.fill_missing "X"
            strs_filled.to_vector . should_equal ["a", "X", "b", "X"]
            strs_filled.storage_type . should_equal Storage.Text

            bools = Column.from_vector 'x' [True, False, Nothing]
            bools_filled = bools.fill_missing False
            bools_filled.to_vector . should_equal [True, False, False]
            bools_filled.storage_type . should_equal Storage.Boolean

            ints = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            ints_filled = ints.fill_missing 42
            ints_filled.to_vector . should_equal [1, 42, 2, 42]
            ints_filled.storage_type . should_equal Storage.Integer

            decimals = Column.from_vector 'x' [0.5, Nothing, Nothing, 0.25]
            decimals_filled = decimals.fill_missing 1.0
            decimals_filled.to_vector . should_equal [0.5, 1.0, 1.0, 0.25]
            decimals_filled.storage_type . should_equal Storage.Decimal

    Test.group "Counting Values" <|
        Test.specify "should count missing and non-missing values" <|
            col = Column.from_vector 'x' [1, Nothing, 2]
            col.length . should_equal 3
            col.count . should_equal 2
            col.count_missing . should_equal 1

    Test.group "Dropping Missing Values" <|
        Test.specify "should drop missing rows in a Column" <|
            col = Column.from_vector 'x' [1, Nothing, 2, Nothing]
            col.drop_missing.to_vector . should_equal [1, 2]

        Test.specify "should drop rows that contain at least one missing column in a Table" <|
            t = Table.new [["a", [1, Nothing, 3, 4]], ["b", [1, 2, Nothing, "x"]]]
            d = t.drop_missing_rows
            d.at "a" . to_vector . should_equal [1, 4]
            d.at "b" . to_vector . should_equal [1, "x"]

        Test.specify "should drop columns that contain at least one missing row in a Table" <|
            a = ["a", [1, Nothing, 3, 4]]
            b = ["b", [1, 2, Nothing, "x"]]
            c = ["c", [10, 20, 30, 40]]
            t = Table.new [a, b, c]
            d = t.drop_missing_columns
            d.columns.map .name . should_equal ["c"]
            d.at "c" . to_vector . should_equal [10, 20, 30, 40]

    Test.group "Info" <|
        Test.specify "should return Table information" <|
            a = ["strs", ["a", "b", Nothing, "a"]]
            b = ["ints", [1, 2, Nothing, Nothing]]
            c = ["objs", [1, "a", "c", Any]]
            r = Table.new [a, b, c]
            i = r.info
            i.index . to_vector . should_equal ["strs", "ints", "objs"]
            i.at "Items Count" . to_vector . should_equal [3, 2, 4]
            i.at "Storage Type" . to_vector . should_equal [Storage.Text, Storage.Integer, Storage.Any]

    Test.group "Aggregation" <|
        name = ['name', ["foo", "bar", "foo", "baz", "foo", "bar", "quux"]]
        price = ['price', [0.4, 3.5, Nothing, 6.7, Nothing, 97, Nothing]]
        quantity = ['quantity', [10, 20, 30, 40, 50, 60, 70]]
        t = Table.new [name, price, quantity]
        agg = t.group by='name'

        Test.specify "should allow counting group sizes" <|
            agg.count.to_vector.should_equal [3, 2, 1, 1]

        Test.specify "should allow aggregating columns with basic arithmetic aggregators" <|
            agg.at 'price' . mean . to_vector . should_equal [0.4, 50.25, 6.7, Nothing]
            agg.at 'price' . min . to_vector . should_equal [0.4, 3.5, 6.7, Nothing]

        Test.specify "should allow aggregating with user-defined aggregate functions" <|
            median vec =
                sorted = vec.sort
                if sorted.is_empty then Nothing else sorted.at (sorted.length-1 / 2).floor
            agg.at 'quantity' . reduce median . to_vector . should_equal [30, 20, 40, 70]

    Test.group "Column-wide statistics" <|
        Test.specify 'should allow computing basic column-wide stats' <|
            price = Column.from_vector 'price' [0.4, 3.5, Nothing, 6.7, Nothing, 97, Nothing]
            price.sum.should_equal 107.6
            price.min.should_equal 0.4
            price.max.should_equal 97
            price.mean.should_equal 26.9

    Test.group "Sorting Tables" <|
        df = (Enso_Project.data / "clothes.csv").read_csv

        Test.specify "should allow sorting by a single column name" <|
            r_1 = df.sort by="Quantity"
            r_1.at 'Id' . to_vector . should_equal [2,4,1,3,5,6]

            r_2 = df.sort by="Rating" missing_last=False
            r_2.at 'Id' . to_vector . should_equal [2,6,5,1,4,3]

            r_3 = df.sort by="Rating" missing_last=False order=Sort_Order.Descending
            r_3.at 'Id' . to_vector . should_equal [2,6,3,1,4,5]

        Test.specify 'should allow sorting by multiple column names' <|
            r_1 = df.sort by=['Quantity', 'Rating']
            r_1.at 'Id' . to_vector . should_equal [4,2,1,3,5,6]

            r_2 = df.sort by=['Rating', 'Quantity'] missing_last=False order=Sort_Order.Descending
            r_2.at 'Id' . to_vector . should_equal [6,2,3,1,4,5]

        Test.specify 'should allow sorting by external columns' <|
            quality_ratio = df.at 'Rating' / df.at 'Price'

            r_1 = df.sort by=quality_ratio
            r_1.at 'Id' . to_vector . should_equal [4,1,3,5,2,6]

            r_2 = df.sort by=['Quantity', quality_ratio]
            r_2.at 'Id' . to_vector . should_equal [4,2,1,3,5,6]

        Test.specify 'should allow sorting with specific by-column rules' <|
            r_1 = df.sort by=['Quantity', (Order_Rule 'Price' order=Sort_Order.Descending)]
            r_1.at 'Id' . to_vector . should_equal [4,2,3,1,6,5]

        Test.specify 'should respect defined comparison operations for custom types' <|
            c_1 = ['id', [1, 2, 3, 4, 5, 6]]
            c_2 = ['val', [My 1 2, My 3 4, My 2 1, My 5 2, My 7 0, My 4 -1]]
            df = Table.new [c_1, c_2]
            r = df.sort by='val'
            r.at 'id' . to_vector . should_equal [1,3,6,2,4,5]

        Test.specify 'should allow passing a custom comparator per column and should missing-proof it' <|
            c_1 = ['id', [1, 2, 3, 4, 5, 6]]
            c_2 = ['val', [My 1 2, My 2 5, My 3 4, My 6 3, Nothing, My 1 0]]
            df = Table.new [c_1, c_2]

            cmp a b = (a.x-a.y).abs . compare_to (b.x-b.y).abs
            r = df.sort by=(Order_Rule 'val' comparator=cmp)
            r.at 'id' . to_vector . should_equal [1,3,6,2,4,5]

        Test.specify 'should return dataflow error when passed a non-existent column' <|
            r = df.sort by='foobar'
            r.should_fail_with No_Such_Column_Error

        Test.specify 'should correctly reorder all kinds of columns and leave the original columns untouched' <|
            ord = [0, 3, 2, 4, 1]
            ints = [1, 2, 3, 4, 5]
            reals = [1.3, 4.6, 3.2, 5.2, 1.6]
            bools = [False, False, True, True, False]
            texts = ["foo", "foo", "bar", "baz", "spam"]
            objs = [Cons 1 2, Cons 2 3, Cons 6 7, Cons 8 9, Cons 10 30]

            df = Table.new [['ord', ord], ['ints', ints], ['reals', reals], ['bools', bools], ['texts', texts], ['objs', objs]]
            r = df.sort by='ord'

            r.at 'ints' . to_vector . should_equal [1, 5, 3, 2, 4]
            df.at 'ints' . to_vector . should_equal ints

            r.at 'reals' . to_vector . should_equal [1.3, 1.6, 3.2, 4.6, 5.2]
            df.at 'reals' . to_vector . should_equal reals

            r.at 'bools' . to_vector . should_equal [False, False, True, False, True]
            df.at 'bools' . to_vector . should_equal bools

            r.at 'texts' . to_vector . should_equal ['foo', 'spam', 'bar', 'foo', 'baz']
            df.at 'texts' . to_vector . should_equal texts

            r.at 'objs' . to_vector . should_equal [Cons 1 2, Cons 10 30, Cons 6 7, Cons 2 3, Cons 8 9]
            df.at 'objs' . to_vector . should_equal objs


    Test.group "Sorting Columns" <|
        Test.specify 'should sort columns with specified ordering and missing placement' <|
            c = Column.from_vector 'foo' [1, 7, Nothing, 4, 8, Nothing]

            r_1 = c.sort
            r_1.to_vector.should_equal [1,4,7,8,Nothing,Nothing]

            r_2 = c.sort order=Sort_Order.Descending
            r_2.to_vector.should_equal [8,7,4,1,Nothing,Nothing]

            r_3 = c.sort order=Sort_Order.Descending missing_last=False
            r_3.to_vector.should_equal [Nothing,Nothing,8,7,4,1]

        Test.specify 'should respect defined comparison operations for custom types' <|
            c = Column.from_vector 'foo'  [My 1 2, My 3 4, My 2 1, My 5 2, My 7 0, My 4 -1]
            r = c.sort
            r.to_vector.should_equal [My 1 2, My 2 1, My 4 -1, My 3 4, My 5 2, My 7 0]

        Test.specify 'should allow passing a custom comparator' <|
            c = Column.from_vector 'foo' [My 1 2, My 2 5, My 3 4, My 6 3, Nothing, My 1 0]
            cmp a b = (a.x-a.y).abs . compare_to (b.x-b.y).abs
            r = c.sort comparator=cmp
            r.to_vector.should_equal [My 1 2, My 3 4, My 1 0, My 2 5, My 6 3, Nothing]

    Test.group "Concatenating Tables" <|
        Test.specify 'should concat tables with the same schema' <|
            c_1_1 = ['foo', [1, 2, 3, 4]]
            c_1_2 = ['bar', ['baz', 'quux', 'spam', 'eggs']]
            t_1 = Table.new [c_1_1, c_1_2]

            c_2_1 = ['foo', [5, 6, 7]]
            c_2_2 = ['bar', [False, True, False]]
            t_2 = Table.new [c_2_1, c_2_2]

            r = t_1.concat t_2

            r.columns.length.should_equal 2
            r.at 'foo' . to_vector . should_equal [1, 2, 3, 4, 5, 6, 7]
            r.at 'bar' . to_vector . should_equal ['baz', 'quux', 'spam', 'eggs', False, True, False]

        Test.specify 'should missing-pad unmatched columns' <|
            c_1_1 = ['foo', [1, 2, 3, 4]]
            c_1_2 = ['bar', ['baz', 'quux', 'spam', 'eggs']]
            t_1 = Table.new [c_1_1, c_1_2]

            c_2_1 = ['foo', [5, 6, 7]]
            c_2_2 = ['baz', [False, True, False]]
            t_2 = Table.new [c_2_1, c_2_2]

            r = t_1.concat t_2

            r.columns.length.should_equal 3
            r.at 'foo' . to_vector . should_equal [1, 2, 3, 4, 5, 6, 7]
            r.at 'bar' . to_vector . should_equal ['baz', 'quux', 'spam', 'eggs', Nothing, Nothing, Nothing]
            r.at 'baz' . to_vector . should_equal [Nothing, Nothing, Nothing, Nothing, False, True, False]

        Test.specify 'should concatenate indexes' <|
            i_1 = ['ix', [1, 2, 3]]
            c_1 = ['col', [5, 6, 7]]

            i_2 = ['ix_2', [False, True]]
            c_2 = ['col', [7, 8]]

            t_1 = Table.new [i_1, c_1] . set_index 'ix'
            t_2 = Table.new [i_2, c_2] . set_index 'ix_2'

            r = t_1.concat t_2

            r.index.to_vector.should_equal [1, 2, 3, False, True]
