from Standard.Base import all

import Standard.Test

polyglot java import java.util.Random

type My_Type foo bar baz

My_Type.my_method = this.foo + this.bar + this.baz

type Test_Type x

spec = Test.group "Meta-Value Manipulation" <|
    Test.specify "should allow manipulating unresolved symbols" <|
        sym = .does_not_exist
        meta_sym = Meta.meta sym
        meta_sym.name.should_equal "does_not_exist"
        new_sym = meta_sym . rename "my_method"
        object = My_Type 1 2 3
        new_sym object . should_equal 6
    Test.specify "should allow manipulating atoms" <|
        atom = My_Type 1 "foo" Nothing
        meta_atom = Meta.meta atom
        meta_atom.constructor.should_equal My_Type
        meta_atom.fields.should_equal [1, "foo", Nothing]
        Meta.meta (meta_atom.constructor) . new [1, "foo", Nothing] . should_equal atom
    Test.specify "should correctly return representations of different classes of objects" <|
        Meta.meta 1 . should_equal (Meta.Primitive 1)
        Meta.meta "foo" . should_equal (Meta.Primitive "foo")
    Test.specify "should allow manipulation of error values" <|
        err = Error.throw "My Error"
        meta_err = Meta.meta err
        meta_err.is_a Meta.Error . should_be_true
        meta_err.value . should_equal "My Error"
    Test.specify "should allow checking if a value is of a certain type" <|
        1.is_an Any . should_be_true
        1.2.is_an Any . should_be_true
        (My_Type 1 "foo" Nothing).is_an Any . should_be_true

        Array.is_an Array . should_be_true
        [].to_array.is_an Array . should_be_true
        [].to_array.is_a Decimal . should_be_false

        Boolean.is_a Boolean . should_be_true
        True.is_a Boolean . should_be_true
        False.is_a Boolean . should_be_true
        True.is_an Integer . should_be_false

        "".is_a Text . should_be_true
        "".is_a Decimal . should_be_false

        1.is_an Array . should_be_false
        1.is_an Integer . should_be_true
        1.is_a Number . should_be_true
        1.is_a Decimal . should_be_false

        1.0.is_a Number . should_be_true
        1.0.is_a Decimal . should_be_true
        1.0.is_an Integer . should_be_false
        1.0.is_a Text . should_be_false

        random_gen = Random.new
        Meta.is_a random_gen Polyglot . should_be_true
        Meta.is_an random_gen Integer . should_be_false

        (My_Type 1 "foo" Nothing).is_a My_Type . should_be_true
        (My_Type 1 "foo" Nothing).is_a Test_Type . should_be_false
        (My_Type 1 "foo" Nothing).is_a Number . should_be_false

        err = Error.throw "Error Value"
        1.is_an Error . should_be_false
        err.is_an Error . should_be_true
        err.is_a Text . should_be_false
        Meta.is_an err Error . should_be_true
        Meta.is_a err Text . should_be_false
