from Standard.Base import all

import Standard.Test

foreign js my_method a b = """
    return a + b;

type My_Type
    type My_Type a b

    foreign js my_method = """
        return this.a + this.b;

    my_method_2 x = this.my_method * x

    foreign js my_method_3 y = """
        var r = this.my_method_2(y)
        return r + 1;

    foreign js my_throw = """
        var err = new Error("JS Exc");
        throw err;

    do_throw = Panic.throw this

    foreign js do_catch = """
        try {
            this.do_throw();
        } catch (e) {
            return e.a;
        }

foreign js make_object = """
    return {
        x: 10,
        y: false,
        compare: function (guess) {
            return this.x < guess;
        }
    };

foreign js make_array = """
    return [{ x: 10}, {x: 20}, {x: 30}];

foreign js make_str str = """
    return "foo " + str + " bar"

foreign js make_int = """
    return 10

foreign js make_double = """
    return 10.5

foreign js does_not_parse = """
    return { x

spec = Test.group "Polyglot JS" <|
    Test.specify "should allow declaring module-level methods in JS" <|
        here.my_method 1 2 . should_equal 3

    Test.specify "should allow mutual calling of instance-level methods" <|
        My_Type 3 4 . my_method_3 5 . should_equal 36

    Test.specify "should expose methods and fields of JS objects" <|
        obj = here.make_object
        obj.x . should_equal 10
        obj.y . should_be_false
        obj.compare 5 . should_be_false
        obj.compare 11 . should_be_true

    Test.specify "should expose array interfaces for JS arrays" <|
        vec = Vector.Vector here.make_array
        vec.map .x . should_equal [10, 20, 30]

    Test.specify "should correctly marshall strings" <|
        str = here.make_str "x" + " baz"
        str.should_equal "foo x bar baz"

    Test.specify "should make JS strings type pattern-matchable" <|
        str = here.make_str "x"
        t = case str of
            Text -> True
            _ -> False
        t.should_be_true

    Test.specify "should make JS numbers type pattern-matchable" <|
        int_match = case here.make_int of
            Integer -> True
        int_match.should_be_true
        double_match = case here.make_double of
            Decimal -> True
        double_match.should_be_true
        num_int_match = case here.make_int of
            Number -> True
        num_int_match.should_be_true
        num_double_match = case here.make_double of
            Number -> True
        num_double_match.should_be_true

    Test.specify "should allow Enso to catch JS exceptions" <|
        value = My_Type 1 2
        result = Panic.recover <| value.my_throw
        err = result.catch
        err.cause.message . should_equal "JS Exc"
        err.cause.name . should_equal "Error"

    Test.specify "should allow JS to catch Enso exceptions" <|
        value = My_Type 7 2
        result = value.do_catch
        result . should_equal 7

    Test.specify "should properly handle parse errors" <|
        err = Panic.recover here.does_not_parse . catch
        err.cause.message.should .contain "Expected }"

