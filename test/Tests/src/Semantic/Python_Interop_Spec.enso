from Standard.Base import all

import Standard.Test

foreign python my_method a b = """
    return a + b

type My_Type
    type My_Type a b

    foreign python my_method = """
        return self.a + self.b

    my_method_2 x = this.my_method * x

    foreign python my_method_3 y = """
        r = self.my_method_2(y)
        return r + 1

    foreign python my_throw = """
        err = RuntimeError('Error!')
        raise err

    do_throw = Panic.throw this

    foreign python do_catch = """
        try:
            self.do_throw()
        except Exception as e:
            return e.a

foreign python make_object = """
    class My:
        def __init__(self):
            self.x = 10
            self.y = False
        def compare(self, guess):
            return self.x < guess
    return My()

foreign python make_array = """
    class My:
        def __init__(self, x):
            self.x = x
        def compare(self, guess):
            return self.x < guess
    return [My(10), My(20), My(30)]

foreign python make_str str = """
    return ("foo " + str + " bar")

foreign python make_int = """
    return 10

foreign python make_double = """
    return 10.5

foreign python does_not_parse = """
    if? cxcc 531 6

spec =
    pending = if Polyglot.is_language_installed "python" then Nothing else """
        Can't run Python tests, Python is not installed.
    Test.group "Polyglot Python" pending=pending <|
        Test.specify "should allow declaring module-level methods in Python" <|
            here.my_method 1 2 . should_equal 3

        Test.specify "should allow mutual calling of instance-level methods" <|
            My_Type 3 4 . my_method_3 5 . should_equal 36

        Test.specify "should expose methods and fields of Python objects" <|
            obj = here.make_object
            obj.x . should_equal 10
            obj.y . should_be_false
            obj.compare 5 . should_be_false
            obj.compare 11 . should_be_true

        Test.specify "should expose array interfaces for Python arrays" <|
            vec = Vector.Vector here.make_array
            vec.map .x . should_equal [10, 20, 30]

        Test.specify "should correctly marshall strings" <|
            str = here.make_str "x" + " baz"
            str.should_equal "foo x bar baz"

        Test.specify "should make Python strings type pattern-matchable" <|
            str = here.make_str "x"
            t = case str of
                Text -> True
                _ -> False
            t.should_be_true

        Test.specify "should make Python numbers type pattern-matchable" <|
            int_match = case here.make_int of
                Integer -> True
            int_match.should_be_true
            double_match = case here.make_double of
                Decimal -> True
            double_match.should_be_true
            num_int_match = case here.make_int of
                Number -> True
            num_int_match.should_be_true
            num_double_match = case here.make_double of
                Number -> True
            num_double_match.should_be_true

        Test.specify "should allow Enso to catch Python exceptions" <|
            value = My_Type 1 2
            result = Panic.recover <| value.my_throw
            err = result.catch
            err.cause.args.at 0 . should_equal 'Error!'
            err.cause.to_text . should_equal "RuntimeError('Error!')"

        pending_msg = "Graalpython does not support handling interop exceptions"
        Test.specify "should allow Python to catch Enso exceptions" pending=pending_msg <|
            value = My_Type 7 2
            result = value.do_catch
            result . should_equal 7

        Test.specify "should properly handle parse errors" <|
            err = Panic.recover here.does_not_parse . catch
            err.cause.args.at 0 . should .contain 'invalid syntax'

