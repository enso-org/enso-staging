from Standard.Base import all

import Standard.Test

type My_Type foo

spec =
    Test.group "No Method Errors" <|
        Test.specify "should be recoverable" <|
            err_1 = Panic.recover (123 . foobar "baz") . catch e->e
            err_2 = Panic.recover ("foo" . baz 123) . catch e->e
            err_3 = Panic.recover (My_Type False . nope) . catch e->e

            err_1.target.should_equal 123
            err_1.method_name.should_equal "foobar"

            err_2.target.should_equal "foo"
            err_2.method_name.should_equal "baz"

            err_3.target.to_text.should_equal "(My_Type False)"
            err_3.method_name.should_equal "nope"
    Test.group "Dataflow Errors" <|
        Test.specify "should be able to be shown in the default visualization" <|
            json = (Error.throw <| My_Type "aaa").to_default_visualization_data
            json . should_equal <| (Json.from_pairs [["foo", "aaa"], ["type", "My_Type"]]).to_text
        Test.specify "should implement to_display_text" <|
            Error.throw Nothing . to_display_text . should_equal "Error: Nothing"
        Test.specify "should be able to be mapped" <|
            error = Error.throw 42
            regular = 10
            f x = 2*x
            (error.map_error f . catch).should_equal 84
            regular.map_error f . should_equal 10

        Test.specify "should allow to check if the value is an error" <|
            error = Error.throw 42
            regular = 10

            error.is_error . should_equal True
            regular.is_error . should_equal False
