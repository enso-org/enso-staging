from Standard.Base import all

import Standard.Base.Data.Noise.Generator
import Standard.Base.Error.Extensions

import Standard.Test

spec =
    Test.group "Generator Interface" <|
        gen = Generator.Generator
        Test.specify "should not be invokable" <|
            interval = Interval.inclusive 0 1
            Test.expect_panic_with (gen.step 1 interval) Extensions.Unimplemented_Error
    Test.group "Deterministic Random Noise Generator" <|
        gen = Generator.Deterministic_Random
        Test.specify "should always return the same output for the same input" <|
            interval = Interval.inclusive 0 1
            values = Vector.fill 10000 1 . map (gen.step _ interval)
            values.all (== values.at 0) . should_be_true
        Test.specify "should always produce values within the specified interval" <|
            interval = Interval.inclusive -100 100
            values = 1.up_to 10000 . to_vector . map (gen.step _ interval)
            values.all (v -> (v >= -100) && (v <= 100)) . should_be_true

